{"identifier": "checkEmptyInput", "parameters": {}, "return_type": "<not_specific>", "repo": "wendelguedes/portal-saude", "path": "docs/js/script.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["MIT"], "hexsha": "01ff9a3282a3055d2005e234a7e01555b1135787", "ext": "js", "size": 2793, "code": "function checkEmptyInput() {\n    var isEmpty = false,\n        fname = document.getElementById(\"fname\").value,\n        lname = document.getElementById(\"lname\").value;\n    if (fname === \"\") {\n        alert(\"First Name Connot Be Empty\");\n        isEmpty = true;\n    }\n    else if (lname === \"\") {\n        alert(\"Last Name Connot Be Empty\");\n        isEmpty = true;\n    }\n    return isEmpty;\n}", "code_tokens": ["function", "checkEmptyInput", "(", ")", "{", "var", "isEmpty", "=", "false", ",", "fname", "=", "document", ".", "getElementById", "(", "\"fname\"", ")", ".", "value", ",", "lname", "=", "document", ".", "getElementById", "(", "\"lname\"", ")", ".", "value", ";", "if", "(", "fname", "===", "\"\"", ")", "{", "alert", "(", "\"First Name Connot Be Empty\"", ")", ";", "isEmpty", "=", "true", ";", "}", "else", "if", "(", "lname", "===", "\"\"", ")", "{", "alert", "(", "\"Last Name Connot Be Empty\"", ")", ";", "isEmpty", "=", "true", ";", "}", "return", "isEmpty", ";", "}"], "original_docstring": "// Verifica se algum dos campos obrigatorios estao vazios;", "comment": [], "docstring_tokens": ["Verifica", "se", "algum", "dos", "campos", "obrigatorios", "estao", "vazios", "."], "docstring": "Verifica se algum dos campos obrigatorios estao vazios.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Verifica se algum dos campos obrigatorios estao vazios;", "short_docstring_tokens": ["Verifica", "se", "algum", "dos", "campos", "obrigatorios", "estao", "vazios", ";"], "original_string": "function checkEmptyInput() {\n    var isEmpty = false,\n        fname = document.getElementById(\"fname\").value,\n        lname = document.getElementById(\"lname\").value;\n\n    if (fname === \"\") {\n        alert(\"First Name Connot Be Empty\");\n        isEmpty = true;\n    }\n    else if (lname === \"\") {\n        alert(\"Last Name Connot Be Empty\");\n        isEmpty = true;\n    }\n    return isEmpty;\n}", "id": "14e9e04df7a4a0af7755990d85d3d3bf84d44f29c922319fd7f810ce20bc402b"}
{"identifier": "selectedRowToInput", "parameters": {}, "return_type": null, "repo": "wendelguedes/portal-saude", "path": "docs/js/script.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["MIT"], "hexsha": "01ff9a3282a3055d2005e234a7e01555b1135787", "ext": "js", "size": 2793, "code": "function selectedRowToInput() {\n    for (var i = 1; i < table.rows.length; i++) {\n        table.rows[i].onclick = function () {\n            rIndex = this.rowIndex;\n            document.getElementById(\"fname\").value = this.cells[0].innerHTML;\n            document.getElementById(\"lname\").value = this.cells[1].innerHTML;\n        };\n    }\n}", "code_tokens": ["function", "selectedRowToInput", "(", ")", "{", "for", "(", "var", "i", "=", "1", ";", "i", "<", "table", ".", "rows", ".", "length", ";", "i", "++", ")", "{", "table", ".", "rows", "[", "i", "]", ".", "onclick", "=", "function", "(", ")", "{", "rIndex", "=", "this", ".", "rowIndex", ";", "document", ".", "getElementById", "(", "\"fname\"", ")", ".", "value", "=", "this", ".", "cells", "[", "0", "]", ".", "innerHTML", ";", "document", ".", "getElementById", "(", "\"lname\"", ")", ".", "value", "=", "this", ".", "cells", "[", "1", "]", ".", "innerHTML", ";", "}", ";", "}", "}"], "original_docstring": "// display selected row data into input text", "comment": ["// get the seected row index"], "docstring_tokens": ["display", "selected", "row", "data", "into", "input", "text"], "docstring": "display selected row data into input text", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "display selected row data into input text", "short_docstring_tokens": ["display", "selected", "row", "data", "into", "input", "text"], "original_string": "function selectedRowToInput() {\n\n    for (var i = 1; i < table.rows.length; i++) {\n        table.rows[i].onclick = function () {\n            // get the seected row index\n            rIndex = this.rowIndex;\n            document.getElementById(\"fname\").value = this.cells[0].innerHTML;\n            document.getElementById(\"lname\").value = this.cells[1].innerHTML;\n        };\n    }\n}", "id": "dae07940667671bb68025c2a715b55ab426e534c7f36772a06dd49d2cd6671f4"}
{"identifier": "EqualDistanceMultiCurve", "parameters": {"hit": null}, "return_type": null, "repo": "txst54/webosu-1", "path": "public/assets/js/curves/EqualDistanceMultiCurve.js", "language": "JavaScript", "stars_count": 18.0, "issues_count": 3.0, "forks_count": 9.0, "license": ["CC0-1.0"], "hexsha": "afbfe4167616fb7617355c0c09b684b4f897dccb", "ext": "js", "size": 3606, "code": "function EqualDistanceMultiCurve(hit) {\n        Curve.call(this, hit);\n        this.ncurve = 0;\n        this.startAngle = 0;\n        this.endAngle = 0;\n    }", "code_tokens": ["function", "EqualDistanceMultiCurve", "(", "hit", ")", "{", "Curve", ".", "call", "(", "this", ",", "hit", ")", ";", "this", ".", "ncurve", "=", "0", ";", "this", ".", "startAngle", "=", "0", ";", "this", ".", "endAngle", "=", "0", ";", "}"], "original_docstring": "// Adapted from EqualDistanceMultiCurve.java from github://itdelatrisu/opsu", "comment": [], "docstring_tokens": ["Adapted", "from", "EqualDistanceMultiCurve", ".", "java", "from", "github", ":", "//", "itdelatrisu", "/", "opsu"], "docstring": "Adapted from EqualDistanceMultiCurve.java from github://itdelatrisu/opsu", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "hit", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Adapted from EqualDistanceMultiCurve.java from github://itdelatrisu/opsu", "short_docstring_tokens": ["Adapted", "from", "EqualDistanceMultiCurve", ".", "java", "from", "github", ":", "//", "itdelatrisu", "/", "opsu"], "original_string": "function EqualDistanceMultiCurve(hit) {\n        Curve.call(this, hit);\n        this.ncurve = 0;\n        this.startAngle = 0;\n        this.endAngle = 0;\n    }", "id": "666acff1d0fee04b3faca24993ae2fe370521c057cde8c933664736d2a7db5c6"}
{"identifier": "EqualDistanceMultiCurve", "parameters": {"hit": null}, "return_type": null, "repo": "Jonlan02/jonsd", "path": "scripts/curves/EqualDistanceMultiCurve.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "934a723ad932c3ee361f2c145e3e4d4335cd6576", "ext": "js", "size": 2868, "code": "function EqualDistanceMultiCurve(hit) {\n        Curve.call(this, hit);\n        this.ncurve = 0;\n        this.startAngle = 0;\n        this.endAngle = 0;\n    }", "code_tokens": ["function", "EqualDistanceMultiCurve", "(", "hit", ")", "{", "Curve", ".", "call", "(", "this", ",", "hit", ")", ";", "this", ".", "ncurve", "=", "0", ";", "this", ".", "startAngle", "=", "0", ";", "this", ".", "endAngle", "=", "0", ";", "}"], "original_docstring": "// Adapted from EqualDistanceMultiCurve.java from github://itdelatrisu/opsu", "comment": [], "docstring_tokens": ["Adapted", "from", "EqualDistanceMultiCurve", ".", "java", "from", "github", ":", "//", "itdelatrisu", "/", "opsu"], "docstring": "Adapted from EqualDistanceMultiCurve.java from github://itdelatrisu/opsu", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "hit", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Adapted from EqualDistanceMultiCurve.java from github://itdelatrisu/opsu", "short_docstring_tokens": ["Adapted", "from", "EqualDistanceMultiCurve", ".", "java", "from", "github", ":", "//", "itdelatrisu", "/", "opsu"], "original_string": "function EqualDistanceMultiCurve(hit) {\n        Curve.call(this, hit);\n        this.ncurve = 0;\n        this.startAngle = 0;\n        this.endAngle = 0;\n    }", "id": "666acff1d0fee04b3faca24993ae2fe370521c057cde8c933664736d2a7db5c6"}
{"identifier": "addBeatmapList", "parameters": {"listurl": null, "list": null, "filter": null, "maxsize": null}, "return_type": "<not_specific>", "repo": "txst54/webosu-1", "path": "public/assets/js/addbeatmaplist.js", "language": "JavaScript", "stars_count": 18.0, "issues_count": 3.0, "forks_count": 9.0, "license": ["CC0-1.0"], "hexsha": "5b0b6852f1fbdfed92ce11c7652837456765f85b", "ext": "js", "size": 15039, "code": "function addBeatmapList(listurl, list, filter, maxsize) {\n    if (!list) list = document.getElementById(\"beatmap-list\");\n    let xhr = new XMLHttpRequest();\n    xhr.responseType = 'text';\n    xhr.open(\"GET\", listurl);\n    xhr.onload = function () {\n        let res = JSON.parse(xhr.response);\n        if (typeof (res.endid) != \"undefined\")\n            window.list_endid = res.endid;\n        else {\n            window.list_endid = 0;\n            return;\n        }\n        let box = [];\n        if (filter && res.data) {\n            res.data = res.data.filter(filter);\n        }\n        if (maxsize && res.data) {\n            res.data = res.data.slice(0, maxsize);\n        }\n        for (let i = 0; i < res.data.length; ++i) {\n            box.push(NSaddBeatmapList.addpreviewbox(res.data[i], list));\n        }\n        for (let i = 0; i < res.data.length; ++i) {\n            box[i].sid = res.data[i].sid;\n            NSaddBeatmapList.requestMoreInfo(box[i]);\n            box[i].onclick = function (e) {\n                createDifficultyList(box[i], e);\n                startdownload(box[i]);\n            }\n        }\n        if (window.beatmaplistLoadedCallback) {\n            window.beatmaplistLoadedCallback();\n            window.beatmaplistLoadedCallback = null;\n        }\n    }\n    xhr.send();\n}", "code_tokens": ["function", "addBeatmapList", "(", "listurl", ",", "list", ",", "filter", ",", "maxsize", ")", "{", "if", "(", "!", "list", ")", "list", "=", "document", ".", "getElementById", "(", "\"beatmap-list\"", ")", ";", "let", "xhr", "=", "new", "XMLHttpRequest", "(", ")", ";", "xhr", ".", "responseType", "=", "'text'", ";", "xhr", ".", "open", "(", "\"GET\"", ",", "listurl", ")", ";", "xhr", ".", "onload", "=", "function", "(", ")", "{", "let", "res", "=", "JSON", ".", "parse", "(", "xhr", ".", "response", ")", ";", "if", "(", "typeof", "(", "res", ".", "endid", ")", "!=", "\"undefined\"", ")", "window", ".", "list_endid", "=", "res", ".", "endid", ";", "else", "{", "window", ".", "list_endid", "=", "0", ";", "return", ";", "}", "let", "box", "=", "[", "]", ";", "if", "(", "filter", "&&", "res", ".", "data", ")", "{", "res", ".", "data", "=", "res", ".", "data", ".", "filter", "(", "filter", ")", ";", "}", "if", "(", "maxsize", "&&", "res", ".", "data", ")", "{", "res", ".", "data", "=", "res", ".", "data", ".", "slice", "(", "0", ",", "maxsize", ")", ";", "}", "for", "(", "let", "i", "=", "0", ";", "i", "<", "res", ".", "data", ".", "length", ";", "++", "i", ")", "{", "box", ".", "push", "(", "NSaddBeatmapList", ".", "addpreviewbox", "(", "res", ".", "data", "[", "i", "]", ",", "list", ")", ")", ";", "}", "for", "(", "let", "i", "=", "0", ";", "i", "<", "res", ".", "data", ".", "length", ";", "++", "i", ")", "{", "box", "[", "i", "]", ".", "sid", "=", "res", ".", "data", "[", "i", "]", ".", "sid", ";", "NSaddBeatmapList", ".", "requestMoreInfo", "(", "box", "[", "i", "]", ")", ";", "box", "[", "i", "]", ".", "onclick", "=", "function", "(", "e", ")", "{", "createDifficultyList", "(", "box", "[", "i", "]", ",", "e", ")", ";", "startdownload", "(", "box", "[", "i", "]", ")", ";", "}", "}", "if", "(", "window", ".", "beatmaplistLoadedCallback", ")", "{", "window", ".", "beatmaplistLoadedCallback", "(", ")", ";", "window", ".", "beatmaplistLoadedCallback", "=", "null", ";", "}", "}", "xhr", ".", "send", "(", ")", ";", "}"], "original_docstring": "// Note that some beatmaps may not contain std mode, so we request more maps than we need", "comment": ["// request beatmap pack list", "// async part 1", "// add widget to webpage as soon as list is fetched", "// async add more info", "// this is effective only when box.data is available", "// to make sure it's called only once"], "docstring_tokens": ["Note", "that", "some", "beatmaps", "may", "not", "contain", "std", "mode", "so", "we", "request", "more", "maps", "than", "we", "need"], "docstring": "Note that some beatmaps may not contain std mode, so we request more maps than we need", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "listurl", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "list", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "filter", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "maxsize", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Note that some beatmaps may not contain std mode, so we request more maps than we need", "short_docstring_tokens": ["Note", "that", "some", "beatmaps", "may", "not", "contain", "std", "mode", "so", "we", "request", "more", "maps", "than", "we", "need"], "original_string": "function addBeatmapList(listurl, list, filter, maxsize) {\n    if (!list) list = document.getElementById(\"beatmap-list\");\n    // request beatmap pack list\n    let xhr = new XMLHttpRequest();\n    xhr.responseType = 'text';\n    xhr.open(\"GET\", listurl);\n    // async part 1\n    xhr.onload = function () {\n        let res = JSON.parse(xhr.response);\n        if (typeof (res.endid) != \"undefined\")\n            window.list_endid = res.endid;\n        else {\n            window.list_endid = 0;\n            return;\n        }\n        let box = [];\n        if (filter && res.data) {\n            res.data = res.data.filter(filter);\n        }\n        if (maxsize && res.data) {\n            res.data = res.data.slice(0, maxsize);\n        }\n        // add widget to webpage as soon as list is fetched\n        for (let i = 0; i < res.data.length; ++i) {\n            box.push(NSaddBeatmapList.addpreviewbox(res.data[i], list));\n        }\n        // async add more info\n        for (let i = 0; i < res.data.length; ++i) {\n            box[i].sid = res.data[i].sid;\n            NSaddBeatmapList.requestMoreInfo(box[i]);\n            box[i].onclick = function (e) {\n                // this is effective only when box.data is available\n                createDifficultyList(box[i], e);\n                startdownload(box[i]);\n            }\n        }\n        if (window.beatmaplistLoadedCallback) {\n            window.beatmaplistLoadedCallback();\n            window.beatmaplistLoadedCallback = null;\n            // to make sure it's called only once\n        }\n    }\n    xhr.send();\n}", "id": "49beaa1e23f12b3e6ee6d78269fc9d5b667770b5067c8a213905d0f764e05133"}
{"identifier": "newTexture", "parameters": {"colors": null, "SliderTrackOverride": null, "SliderBorder": null}, "return_type": "<not_specific>", "repo": "txst54/webosu-1", "path": "public/assets/js/SliderMesh.js", "language": "JavaScript", "stars_count": 18.0, "issues_count": 3.0, "forks_count": 9.0, "license": ["CC0-1.0"], "hexsha": "1fb58de76a5c0f358d510de865e5e70ef42aa737", "ext": "js", "size": 16709, "code": "function newTexture(colors, SliderTrackOverride, SliderBorder) {\n            const borderwidth = 0.128;\n            const innerPortion = 1 - borderwidth;\n            const edgeOpacity = 0.8;\n            const centerOpacity = 0.3;\n            const blurrate = 0.015;\n            const width = 200;\n            let buff = new Uint8Array(colors.length * width * 4);\n            for (let k = 0; k < colors.length; ++k) {\n                let tint = (typeof (SliderTrackOverride) != 'undefined') ? SliderTrackOverride : colors[k];\n                let bordertint = (typeof (SliderBorder) != 'undefined') ? SliderBorder : 0xffffff;\n                let borderR = (bordertint >> 16) / 255;\n                let borderG = ((bordertint >> 8) & 255) / 255;\n                let borderB = (bordertint & 255) / 255;\n                let borderA = 1.0;\n                let innerR = (tint >> 16) / 255;\n                let innerG = ((tint >> 8) & 255) / 255;\n                let innerB = (tint & 255) / 255;\n                let innerA = 1.0;\n                for (let i = 0; i < width; i++) {\n                    let position = i / width;\n                    let R, G, B, A;\n                    if (position >= innerPortion) \n                    {\n                        R = borderR;\n                        G = borderG;\n                        B = borderB;\n                        A = borderA;\n                    } else \n                    {\n                        R = innerR;\n                        G = innerG;\n                        B = innerB;\n                        A = innerA * ((edgeOpacity - centerOpacity) * position / innerPortion + centerOpacity);\n                    }\n                    R *= A;\n                    G *= A;\n                    B *= A;\n                    if (1 - position < blurrate) \n                    {\n                        R *= (1 - position) / blurrate;\n                        G *= (1 - position) / blurrate;\n                        B *= (1 - position) / blurrate;\n                        A *= (1 - position) / blurrate;\n                    }\n                    if (innerPortion - position > 0 && innerPortion - position < blurrate) {\n                        let mu = (innerPortion - position) / blurrate;\n                        R = mu * R + (1 - mu) * borderR * borderA;\n                        G = mu * G + (1 - mu) * borderG * borderA;\n                        B = mu * B + (1 - mu) * borderB * borderA;\n                        A = mu * innerA + (1 - mu) * borderA;\n                    }\n                    buff[(k * width + i) * 4] = R * 255;\n                    buff[(k * width + i) * 4 + 1] = G * 255;\n                    buff[(k * width + i) * 4 + 2] = B * 255;\n                    buff[(k * width + i) * 4 + 3] = A * 255;\n                }\n            }\n            return PIXI.Texture.fromBuffer(buff, width, colors.length);\n        }", "code_tokens": ["function", "newTexture", "(", "colors", ",", "SliderTrackOverride", ",", "SliderBorder", ")", "{", "const", "borderwidth", "=", "0.128", ";", "const", "innerPortion", "=", "1", "-", "borderwidth", ";", "const", "edgeOpacity", "=", "0.8", ";", "const", "centerOpacity", "=", "0.3", ";", "const", "blurrate", "=", "0.015", ";", "const", "width", "=", "200", ";", "let", "buff", "=", "new", "Uint8Array", "(", "colors", ".", "length", "*", "width", "*", "4", ")", ";", "for", "(", "let", "k", "=", "0", ";", "k", "<", "colors", ".", "length", ";", "++", "k", ")", "{", "let", "tint", "=", "(", "typeof", "(", "SliderTrackOverride", ")", "!=", "'undefined'", ")", "?", "SliderTrackOverride", ":", "colors", "[", "k", "]", ";", "let", "bordertint", "=", "(", "typeof", "(", "SliderBorder", ")", "!=", "'undefined'", ")", "?", "SliderBorder", ":", "0xffffff", ";", "let", "borderR", "=", "(", "bordertint", ">>", "16", ")", "/", "255", ";", "let", "borderG", "=", "(", "(", "bordertint", ">>", "8", ")", "&", "255", ")", "/", "255", ";", "let", "borderB", "=", "(", "bordertint", "&", "255", ")", "/", "255", ";", "let", "borderA", "=", "1.0", ";", "let", "innerR", "=", "(", "tint", ">>", "16", ")", "/", "255", ";", "let", "innerG", "=", "(", "(", "tint", ">>", "8", ")", "&", "255", ")", "/", "255", ";", "let", "innerB", "=", "(", "tint", "&", "255", ")", "/", "255", ";", "let", "innerA", "=", "1.0", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "width", ";", "i", "++", ")", "{", "let", "position", "=", "i", "/", "width", ";", "let", "R", ",", "G", ",", "B", ",", "A", ";", "if", "(", "position", ">=", "innerPortion", ")", "{", "R", "=", "borderR", ";", "G", "=", "borderG", ";", "B", "=", "borderB", ";", "A", "=", "borderA", ";", "}", "else", "{", "R", "=", "innerR", ";", "G", "=", "innerG", ";", "B", "=", "innerB", ";", "A", "=", "innerA", "*", "(", "(", "edgeOpacity", "-", "centerOpacity", ")", "*", "position", "/", "innerPortion", "+", "centerOpacity", ")", ";", "}", "R", "*=", "A", ";", "G", "*=", "A", ";", "B", "*=", "A", ";", "if", "(", "1", "-", "position", "<", "blurrate", ")", "{", "R", "*=", "(", "1", "-", "position", ")", "/", "blurrate", ";", "G", "*=", "(", "1", "-", "position", ")", "/", "blurrate", ";", "B", "*=", "(", "1", "-", "position", ")", "/", "blurrate", ";", "A", "*=", "(", "1", "-", "position", ")", "/", "blurrate", ";", "}", "if", "(", "innerPortion", "-", "position", ">", "0", "&&", "innerPortion", "-", "position", "<", "blurrate", ")", "{", "let", "mu", "=", "(", "innerPortion", "-", "position", ")", "/", "blurrate", ";", "R", "=", "mu", "*", "R", "+", "(", "1", "-", "mu", ")", "*", "borderR", "*", "borderA", ";", "G", "=", "mu", "*", "G", "+", "(", "1", "-", "mu", ")", "*", "borderG", "*", "borderA", ";", "B", "=", "mu", "*", "B", "+", "(", "1", "-", "mu", ")", "*", "borderB", "*", "borderA", ";", "A", "=", "mu", "*", "innerA", "+", "(", "1", "-", "mu", ")", "*", "borderA", ";", "}", "buff", "[", "(", "k", "*", "width", "+", "i", ")", "*", "4", "]", "=", "R", "*", "255", ";", "buff", "[", "(", "k", "*", "width", "+", "i", ")", "*", "4", "+", "1", "]", "=", "G", "*", "255", ";", "buff", "[", "(", "k", "*", "width", "+", "i", ")", "*", "4", "+", "2", "]", "=", "B", "*", "255", ";", "buff", "[", "(", "k", "*", "width", "+", "i", ")", "*", "4", "+", "3", "]", "=", "A", "*", "255", ";", "}", "}", "return", "PIXI", ".", "Texture", ".", "fromBuffer", "(", "buff", ",", "width", ",", "colors", ".", "length", ")", ";", "}"], "original_docstring": "// create line texture for slider from tint color", "comment": ["// draw border color", "// draw inner color", "// TODO: tune this to make opacity transition smoother at center", "// pre-multiply alpha", "// blur at edge for \"antialiasing\" without supersampling", "// outer edge"], "docstring_tokens": ["create", "line", "texture", "for", "slider", "from", "tint", "color"], "docstring": "create line texture for slider from tint color", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "colors", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "SliderTrackOverride", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "SliderBorder", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "create line texture for slider from tint color", "short_docstring_tokens": ["create", "line", "texture", "for", "slider", "from", "tint", "color"], "original_string": "function newTexture(colors, SliderTrackOverride, SliderBorder) {\n\n            const borderwidth = 0.128;\n            const innerPortion = 1 - borderwidth;\n            const edgeOpacity = 0.8;\n            const centerOpacity = 0.3;\n            const blurrate = 0.015;\n            const width = 200;\n\n            let buff = new Uint8Array(colors.length * width * 4);\n\n            for (let k = 0; k < colors.length; ++k) {\n                let tint = (typeof (SliderTrackOverride) != 'undefined') ? SliderTrackOverride : colors[k];\n                let bordertint = (typeof (SliderBorder) != 'undefined') ? SliderBorder : 0xffffff;\n                let borderR = (bordertint >> 16) / 255;\n                let borderG = ((bordertint >> 8) & 255) / 255;\n                let borderB = (bordertint & 255) / 255;\n                let borderA = 1.0;\n                let innerR = (tint >> 16) / 255;\n                let innerG = ((tint >> 8) & 255) / 255;\n                let innerB = (tint & 255) / 255;\n                let innerA = 1.0;\n                for (let i = 0; i < width; i++) {\n                    let position = i / width;\n                    let R, G, B, A;\n                    if (position >= innerPortion) // draw border color\n                    {\n                        R = borderR;\n                        G = borderG;\n                        B = borderB;\n                        A = borderA;\n                    } else // draw inner color\n                    {\n                        R = innerR;\n                        G = innerG;\n                        B = innerB;\n                        // TODO: tune this to make opacity transition smoother at center\n                        A = innerA * ((edgeOpacity - centerOpacity) * position / innerPortion + centerOpacity);\n                    }\n                    // pre-multiply alpha\n                    R *= A;\n                    G *= A;\n                    B *= A;\n                    // blur at edge for \"antialiasing\" without supersampling\n                    if (1 - position < blurrate) // outer edge\n                    {\n                        R *= (1 - position) / blurrate;\n                        G *= (1 - position) / blurrate;\n                        B *= (1 - position) / blurrate;\n                        A *= (1 - position) / blurrate;\n                    }\n                    if (innerPortion - position > 0 && innerPortion - position < blurrate) {\n                        let mu = (innerPortion - position) / blurrate;\n                        R = mu * R + (1 - mu) * borderR * borderA;\n                        G = mu * G + (1 - mu) * borderG * borderA;\n                        B = mu * B + (1 - mu) * borderB * borderA;\n                        A = mu * innerA + (1 - mu) * borderA;\n                    }\n                    buff[(k * width + i) * 4] = R * 255;\n                    buff[(k * width + i) * 4 + 1] = G * 255;\n                    buff[(k * width + i) * 4 + 2] = B * 255;\n                    buff[(k * width + i) * 4 + 3] = A * 255;\n                }\n            }\n            return PIXI.Texture.fromBuffer(buff, width, colors.length);\n        }", "id": "28a86ef050a4114e9b50f91be7a8bed55ea2830de991dd750dc74c2cb1e7086b"}
{"identifier": "LinearBeizer", "parameters": {"hit": null, "line": null}, "return_type": null, "repo": "txst54/webosu-1", "path": "public/assets/js/curves/LinearBezier.js", "language": "JavaScript", "stars_count": 18.0, "issues_count": 3.0, "forks_count": 9.0, "license": ["CC0-1.0"], "hexsha": "df0a3c16f353da9e5dfec3c9be533e83db2b7e63", "ext": "js", "size": 1762, "code": "function LinearBeizer(hit, line) {\n            EqualDistanceMultiCurve.call(this, hit);\n            var beziers = [];\n            var controlPoints = hit.keyframes.length + 1;\n            var points = [];\n            var lastPoi = null;\n            for (var i = -1; i < hit.keyframes.length; i++) { \n                var tpoi;\n                if (i !== -1) {\n                    tpoi = hit.keyframes[i];\n                } else {\n                    tpoi = {\n                        x: hit.x,\n                        y: hit.y\n                    };\n                }\n                if (line) {\n                    if (lastPoi !== null) {\n                        points.push(tpoi);\n                        beziers.push(new Bezier2(points));\n                        points.splice(0);\n                    }\n                } else if (lastPoi !== null && tpoi.x == lastPoi.x && tpoi.y == lastPoi.y) {\n                    if (points.length >= 2) {\n                        beziers.push(new Bezier2(points));\n                    }\n                    points.splice(0);\n                }\n                points.push(tpoi);\n                lastPoi = tpoi;\n            }\n            if (line || points.length < 2) {\n            } else {\n                beziers.push(new Bezier2(points));\n                points.splice(0); \n            }\n            this.init(beziers);\n        }", "code_tokens": ["function", "LinearBeizer", "(", "hit", ",", "line", ")", "{", "EqualDistanceMultiCurve", ".", "call", "(", "this", ",", "hit", ")", ";", "var", "beziers", "=", "[", "]", ";", "var", "controlPoints", "=", "hit", ".", "keyframes", ".", "length", "+", "1", ";", "var", "points", "=", "[", "]", ";", "var", "lastPoi", "=", "null", ";", "for", "(", "var", "i", "=", "-", "1", ";", "i", "<", "hit", ".", "keyframes", ".", "length", ";", "i", "++", ")", "{", "var", "tpoi", ";", "if", "(", "i", "!==", "-", "1", ")", "{", "tpoi", "=", "hit", ".", "keyframes", "[", "i", "]", ";", "}", "else", "{", "tpoi", "=", "{", "x", ":", "hit", ".", "x", ",", "y", ":", "hit", ".", "y", "}", ";", "}", "if", "(", "line", ")", "{", "if", "(", "lastPoi", "!==", "null", ")", "{", "points", ".", "push", "(", "tpoi", ")", ";", "beziers", ".", "push", "(", "new", "Bezier2", "(", "points", ")", ")", ";", "points", ".", "splice", "(", "0", ")", ";", "}", "}", "else", "if", "(", "lastPoi", "!==", "null", "&&", "tpoi", ".", "x", "==", "lastPoi", ".", "x", "&&", "tpoi", ".", "y", "==", "lastPoi", ".", "y", ")", "{", "if", "(", "points", ".", "length", ">=", "2", ")", "{", "beziers", ".", "push", "(", "new", "Bezier2", "(", "points", ")", ")", ";", "}", "points", ".", "splice", "(", "0", ")", ";", "}", "points", ".", "push", "(", "tpoi", ")", ";", "lastPoi", "=", "tpoi", ";", "}", "if", "(", "line", "||", "points", ".", "length", "<", "2", ")", "{", "}", "else", "{", "beziers", ".", "push", "(", "new", "Bezier2", "(", "points", ")", ")", ";", "points", ".", "splice", "(", "0", ")", ";", "}", "this", ".", "init", "(", "beziers", ")", ";", "}"], "original_docstring": "// Adapted from LinearBezier.java from github://itdelatrisu/opsu", "comment": ["// NOTE: This was +1 earlier?", "// ignored", "// neccessary?"], "docstring_tokens": ["Adapted", "from", "LinearBezier", ".", "java", "from", "github", ":", "//", "itdelatrisu", "/", "opsu"], "docstring": "Adapted from LinearBezier.java from github://itdelatrisu/opsu", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "hit", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "line", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Adapted from LinearBezier.java from github://itdelatrisu/opsu", "short_docstring_tokens": ["Adapted", "from", "LinearBezier", ".", "java", "from", "github", ":", "//", "itdelatrisu", "/", "opsu"], "original_string": "function LinearBeizer(hit, line) {\n            EqualDistanceMultiCurve.call(this, hit);\n\n            var beziers = [];\n\n            var controlPoints = hit.keyframes.length + 1;\n            var points = [];\n            var lastPoi = null;\n            for (var i = -1; i < hit.keyframes.length; i++) { // NOTE: This was +1 earlier?\n                var tpoi;\n                if (i !== -1) {\n                    tpoi = hit.keyframes[i];\n                } else {\n                    tpoi = {\n                        x: hit.x,\n                        y: hit.y\n                    };\n                }\n                if (line) {\n                    if (lastPoi !== null) {\n                        points.push(tpoi);\n                        beziers.push(new Bezier2(points));\n                        points.splice(0);\n                    }\n                } else if (lastPoi !== null && tpoi.x == lastPoi.x && tpoi.y == lastPoi.y) {\n                    if (points.length >= 2) {\n                        beziers.push(new Bezier2(points));\n                    }\n                    points.splice(0);\n                }\n                points.push(tpoi);\n                lastPoi = tpoi;\n            }\n            if (line || points.length < 2) {\n                // ignored\n            } else {\n                beziers.push(new Bezier2(points));\n                points.splice(0); // neccessary?\n            }\n            this.init(beziers);\n        }", "id": "6d95b23a3631f4550572b7e01d8ecdb6a55c9acd5a8d36927dfa89d1c781ab25"}
{"identifier": "show_img", "parameters": {}, "return_type": "<not_specific>", "repo": "Vectoryx/AzureBitsPHP", "path": "TRM-PHP/docente/img_manager.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "46be8f8dc52972b7b6305b34ae9b1ca40df60b67", "ext": "js", "size": 1922, "code": "function show_img() {\n\tvar img = document.getElementById(\"img_show\");\n\tvar selector = document.getElementById(\"image_selector\");\n\tvar file = selector.files[0];\n\tconst reader = new FileReader();\n\treader.onload = (function (aImg) {\n\t\treturn function (e) {\n\t\t\taImg.src = e.target.result;\n\t\t};\n\t})(img);\n\treader.readAsDataURL(file);\n\timg.style.display = \"block\";\n\tselector.style.display = \"none\";\n}", "code_tokens": ["function", "show_img", "(", ")", "{", "var", "img", "=", "document", ".", "getElementById", "(", "\"img_show\"", ")", ";", "var", "selector", "=", "document", ".", "getElementById", "(", "\"image_selector\"", ")", ";", "var", "file", "=", "selector", ".", "files", "[", "0", "]", ";", "const", "reader", "=", "new", "FileReader", "(", ")", ";", "reader", ".", "onload", "=", "(", "function", "(", "aImg", ")", "{", "return", "function", "(", "e", ")", "{", "aImg", ".", "src", "=", "e", ".", "target", ".", "result", ";", "}", ";", "}", ")", "(", "img", ")", ";", "reader", ".", "readAsDataURL", "(", "file", ")", ";", "img", ".", "style", ".", "display", "=", "\"block\"", ";", "selector", ".", "style", ".", "display", "=", "\"none\"", ";", "}"], "original_docstring": "/**\n * Mostra l'immagina appena inserita\n */", "comment": ["// mostro l'immagine e nascondo l'input"], "docstring_tokens": ["Mostra", "l", "'", "immagina", "appena", "inserita"], "docstring": "Mostra l'immagina appena inserita", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Mostra l'immagina appena inserita", "short_docstring_tokens": ["Mostra", "l", "'", "immagina", "appena", "inserita"], "original_string": "function show_img() {\n\tvar img = document.getElementById(\"img_show\");\n\n\tvar selector = document.getElementById(\"image_selector\");\n\n\tvar file = selector.files[0];\n\n\tconst reader = new FileReader();\n\treader.onload = (function (aImg) {\n\t\treturn function (e) {\n\t\t\taImg.src = e.target.result;\n\t\t};\n\t})(img);\n\treader.readAsDataURL(file);\n\n\t// mostro l'immagine e nascondo l'input\n\timg.style.display = \"block\";\n\tselector.style.display = \"none\";\n}", "id": "161bd5c27dd98c1134ccde810dcbc8797afbc07ba94b5a421a9a63cb27817ff4"}
{"identifier": "dynamiseSubClones", "parameters": {"clone": null}, "return_type": null, "repo": "pacinete/search_tesis", "path": "web/js/jquery-dynamic-form.js", "language": "JavaScript", "stars_count": 134.0, "issues_count": 22.0, "forks_count": 50.0, "license": ["MIT"], "hexsha": "bb08281938f32015fb9b222ecca53c43731bb29b", "ext": "js", "size": 15068, "code": "function dynamiseSubClones(clone){\n\t\t$(subDynamicForm).each(function(){\n\t\t\tvar plus = this.getPlusSelector(), minus = this.getMinusSelector(), options = this.getOptions(), selector = this.selector;\n\t\t\tclone.find(this.selector).each(function(){\n\t\t\t\toptions = $.extend(\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalSubDynamicForm:true, \n\t\t\t\t\t\tinternalContainer:clone, \n\t\t\t\t\t\tisInAClone:true, \n\t\t\t\t\t\touterCloneIndex:clones.length,\n\t\t\t\t\t\tselector:selector\n\t\t\t\t\t}, options);\n\t\t\t\t$(this).dynamicForm(plus, minus, options);\n\t\t\t});\n\t\t});\n\t}", "code_tokens": ["function", "dynamiseSubClones", "(", "clone", ")", "{", "$", "(", "subDynamicForm", ")", ".", "each", "(", "function", "(", ")", "{", "var", "plus", "=", "this", ".", "getPlusSelector", "(", ")", ",", "minus", "=", "this", ".", "getMinusSelector", "(", ")", ",", "options", "=", "this", ".", "getOptions", "(", ")", ",", "selector", "=", "this", ".", "selector", ";", "clone", ".", "find", "(", "this", ".", "selector", ")", ".", "each", "(", "function", "(", ")", "{", "options", "=", "$", ".", "extend", "(", "{", "internalSubDynamicForm", ":", "true", ",", "internalContainer", ":", "clone", ",", "isInAClone", ":", "true", ",", "outerCloneIndex", ":", "clones", ".", "length", ",", "selector", ":", "selector", "}", ",", "options", ")", ";", "$", "(", "this", ")", ".", "dynamicForm", "(", "plus", ",", "minus", ",", "options", ")", ";", "}", ")", ";", "}", ")", ";", "}"], "original_docstring": "/**\n\t * On cloning make the form under the clone dynamic\n\t * @param {Object} clone\n\t */", "comment": [], "docstring_tokens": ["On", "cloning", "make", "the", "form", "under", "the", "clone", "dynamic", "@param", "{", "Object", "}", "clone"], "docstring": "On cloning make the form under the clone dynamic\n@param {Object} clone", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "clone", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "On cloning make the form under the clone dynamic\n @param {Object} clone", "short_docstring_tokens": ["On", "cloning", "make", "the", "form", "under", "the", "clone", "dynamic", "@param", "{", "Object", "}", "clone"], "original_string": "function dynamiseSubClones(clone){\n\t\t$(subDynamicForm).each(function(){\n\t\t\tvar plus = this.getPlusSelector(), minus = this.getMinusSelector(), options = this.getOptions(), selector = this.selector;\n\t\t\tclone.find(this.selector).each(function(){\n\t\t\t\toptions = $.extend(\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalSubDynamicForm:true, \n\t\t\t\t\t\tinternalContainer:clone, \n\t\t\t\t\t\tisInAClone:true, \n\t\t\t\t\t\touterCloneIndex:clones.length,\n\t\t\t\t\t\tselector:selector\n\t\t\t\t\t}, options);\n\t\t\t\t$(this).dynamicForm(plus, minus, options);\n\t\t\t});\n\t\t});\n\t}", "id": "7f8cc7d574da314d6f1ffc98288d92558db2428856d7c4227991553b96570536"}
{"identifier": "innerClickOnPlus", "parameters": {"event": null, "extraParams": null}, "return_type": null, "repo": "pacinete/search_tesis", "path": "web/js/jquery-dynamic-form.js", "language": "JavaScript", "stars_count": 134.0, "issues_count": 22.0, "forks_count": 50.0, "license": ["MIT"], "hexsha": "bb08281938f32015fb9b222ecca53c43731bb29b", "ext": "js", "size": 15068, "code": "function innerClickOnPlus(event, extraParams){\n\t\tvar clone,\n\t\tcurrentClone = clones[clones.length -1] || source;\n\t\tevent.preventDefault();\n\t\tcurrentClone.find(minusSelector).show();\n\t\tcurrentClone.find(plusSelector).hide();\n\t\tif (clones.length === 0) {\n\t\t\tsource.find(minusSelector).hide();\n\t\t}\n\t\tclone = cloneTemplate(extraParams);\n\t\tplus = clone.find(plusSelector);\n\t\tminus = clone.find(minusSelector);\n\t\tminus.get(0).removableClone = clone;\n\t\tminus.click(innerClickOnMinus);\n\t\tif (options.limit && (options.limit - 2) > clones.length) {\n\t\t\tplus.show();\n\t\t\tminus.show();\n\t\t}else{\n\t\t\tplus.hide();\n\t\t\tminus.show();\n\t\t}\n\t\tclones.push(clone);\n\t\tnormalizeClone(clone, clones.length);\n\t\tdynamiseSubClones(clone);\n\t}", "code_tokens": ["function", "innerClickOnPlus", "(", "event", ",", "extraParams", ")", "{", "var", "clone", ",", "currentClone", "=", "clones", "[", "clones", ".", "length", "-", "1", "]", "||", "source", ";", "event", ".", "preventDefault", "(", ")", ";", "currentClone", ".", "find", "(", "minusSelector", ")", ".", "show", "(", ")", ";", "currentClone", ".", "find", "(", "plusSelector", ")", ".", "hide", "(", ")", ";", "if", "(", "clones", ".", "length", "===", "0", ")", "{", "source", ".", "find", "(", "minusSelector", ")", ".", "hide", "(", ")", ";", "}", "clone", "=", "cloneTemplate", "(", "extraParams", ")", ";", "plus", "=", "clone", ".", "find", "(", "plusSelector", ")", ";", "minus", "=", "clone", ".", "find", "(", "minusSelector", ")", ";", "minus", ".", "get", "(", "0", ")", ".", "removableClone", "=", "clone", ";", "minus", ".", "click", "(", "innerClickOnMinus", ")", ";", "if", "(", "options", ".", "limit", "&&", "(", "options", ".", "limit", "-", "2", ")", ">", "clones", ".", "length", ")", "{", "plus", ".", "show", "(", ")", ";", "minus", ".", "show", "(", ")", ";", "}", "else", "{", "plus", ".", "hide", "(", ")", ";", "minus", ".", "show", "(", ")", ";", "}", "clones", ".", "push", "(", "clone", ")", ";", "normalizeClone", "(", "clone", ",", "clones", ".", "length", ")", ";", "dynamiseSubClones", "(", "clone", ")", ";", "}"], "original_docstring": "/**\n\t * Handle click on plus when plus element is inside the template\n\t * @param {Object} event\n\t */", "comment": [], "docstring_tokens": ["Handle", "click", "on", "plus", "when", "plus", "element", "is", "inside", "the", "template", "@param", "{", "Object", "}", "event"], "docstring": "Handle click on plus when plus element is inside the template\n@param {Object} event", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "event", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "extraParams", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Handle click on plus when plus element is inside the template\n @param {Object} event", "short_docstring_tokens": ["Handle", "click", "on", "plus", "when", "plus", "element", "is", "inside", "the", "template", "@param", "{", "Object", "}", "event"], "original_string": "function innerClickOnPlus(event, extraParams){\n\t\tvar clone,\n\t\tcurrentClone = clones[clones.length -1] || source;\n\t\tevent.preventDefault();\n\n\t\tcurrentClone.find(minusSelector).show();\n\t\tcurrentClone.find(plusSelector).hide();\n\n\t\tif (clones.length === 0) {\n\t\t\tsource.find(minusSelector).hide();\n\t\t}\n\t\t\n\t\tclone = cloneTemplate(extraParams);\n\t\t\n\t\tplus = clone.find(plusSelector);\n\t\tminus = clone.find(minusSelector);\n\t\t\n\t\tminus.get(0).removableClone = clone;\n\t\tminus.click(innerClickOnMinus);\n\t\t\n\t\tif (options.limit && (options.limit - 2) > clones.length) {\n\t\t\tplus.show();\n\t\t\tminus.show();\n\t\t}else{\n\t\t\tplus.hide();\n\t\t\tminus.show();\n\t\t}\n\t\t\n\t\tclones.push(clone);\n\t\tnormalizeClone(clone, clones.length);\n\t\t\n\t\tdynamiseSubClones(clone);\n\t}", "id": "097d98619a2f208fc1f47da23a4ec8ca6c8d436ac0e2ca30e339872e058b9c00"}
{"identifier": "outerClickOnPlus", "parameters": {"event": null, "extraParams": null}, "return_type": null, "repo": "pacinete/search_tesis", "path": "web/js/jquery-dynamic-form.js", "language": "JavaScript", "stars_count": 134.0, "issues_count": 22.0, "forks_count": 50.0, "license": ["MIT"], "hexsha": "bb08281938f32015fb9b222ecca53c43731bb29b", "ext": "js", "size": 15068, "code": "function outerClickOnPlus(event, extraParams){\n\t\tvar clone;\n\t\tevent.preventDefault();\n\t\tif (clones.length === 0) {\n\t\t\tminus.show();\n\t\t}\n\t\tclone = cloneTemplate(extraParams);\n\t\tif (options.limit && (options.limit - 3) < clones.length) {\n\t\t\tplus.hide();\n\t\t}\n\t\tclones.push(clone);\n\t\tnormalizeClone(clone, clones.length);\n\t\tdynamiseSubClones(clone);\n\t}", "code_tokens": ["function", "outerClickOnPlus", "(", "event", ",", "extraParams", ")", "{", "var", "clone", ";", "event", ".", "preventDefault", "(", ")", ";", "if", "(", "clones", ".", "length", "===", "0", ")", "{", "minus", ".", "show", "(", ")", ";", "}", "clone", "=", "cloneTemplate", "(", "extraParams", ")", ";", "if", "(", "options", ".", "limit", "&&", "(", "options", ".", "limit", "-", "3", ")", "<", "clones", ".", "length", ")", "{", "plus", ".", "hide", "(", ")", ";", "}", "clones", ".", "push", "(", "clone", ")", ";", "normalizeClone", "(", "clone", ",", "clones", ".", "length", ")", ";", "dynamiseSubClones", "(", "clone", ")", ";", "}"], "original_docstring": "/**\n\t * Handle click on plus when plus element is outside the template\n\t * @param {Object} event\n\t */", "comment": ["/* On first add, normalize source */"], "docstring_tokens": ["Handle", "click", "on", "plus", "when", "plus", "element", "is", "outside", "the", "template", "@param", "{", "Object", "}", "event"], "docstring": "Handle click on plus when plus element is outside the template\n@param {Object} event", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "event", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "extraParams", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Handle click on plus when plus element is outside the template\n @param {Object} event", "short_docstring_tokens": ["Handle", "click", "on", "plus", "when", "plus", "element", "is", "outside", "the", "template", "@param", "{", "Object", "}", "event"], "original_string": "function outerClickOnPlus(event, extraParams){\n\t\tvar clone;\n\t\t\n\t\tevent.preventDefault();\n\t\t\n\t\t/* On first add, normalize source */\n\t\tif (clones.length === 0) {\n\t\t\tminus.show();\n\t\t}\n\t\tclone = cloneTemplate(extraParams);\n\t\t\n\t\tif (options.limit && (options.limit - 3) < clones.length) {\n\t\t\tplus.hide();\n\t\t}\n\t\t\n\t\tclones.push(clone);\n\t\t\n\t\tnormalizeClone(clone, clones.length);\n\t\t\n\t\tdynamiseSubClones(clone);\n\t}", "id": "cca4058911c936086ee4fac8ead3d1edf13c4ef000bb14d64a72dc1017861a3e"}
{"identifier": "innerClickOnMinus", "parameters": {"event": null}, "return_type": null, "repo": "pacinete/search_tesis", "path": "web/js/jquery-dynamic-form.js", "language": "JavaScript", "stars_count": 134.0, "issues_count": 22.0, "forks_count": 50.0, "license": ["MIT"], "hexsha": "bb08281938f32015fb9b222ecca53c43731bb29b", "ext": "js", "size": 15068, "code": "function innerClickOnMinus(event){\n\t\tevent.preventDefault();\n\t\tif (this.removableClone.effect && options.removeColor) {\n\t\t\tthat = this;\n\t\t\tthis.removableClone.effect(\"highlight\", {\n\t\t\t\tcolor: options.removeColor\n\t\t\t}, options.duration, function(){that.removableClone.remove();});\n\t\t} else {\n\t\t\tthis.removableClone.remove();\n\t\t}\n\t\tclones.splice($.inArray(this.removableClone, clones),1);\n\t\tif (clones.length === 0){\n\t\t\tsource.find(plusSelector).show();\n\t\t}else{\n\t\t\tclones[clones.length -1].find(plusSelector).show();\n\t\t}\n\t}", "code_tokens": ["function", "innerClickOnMinus", "(", "event", ")", "{", "event", ".", "preventDefault", "(", ")", ";", "if", "(", "this", ".", "removableClone", ".", "effect", "&&", "options", ".", "removeColor", ")", "{", "that", "=", "this", ";", "this", ".", "removableClone", ".", "effect", "(", "\"highlight\"", ",", "{", "color", ":", "options", ".", "removeColor", "}", ",", "options", ".", "duration", ",", "function", "(", ")", "{", "that", ".", "removableClone", ".", "remove", "(", ")", ";", "}", ")", ";", "}", "else", "{", "this", ".", "removableClone", ".", "remove", "(", ")", ";", "}", "clones", ".", "splice", "(", "$", ".", "inArray", "(", "this", ".", "removableClone", ",", "clones", ")", ",", "1", ")", ";", "if", "(", "clones", ".", "length", "===", "0", ")", "{", "source", ".", "find", "(", "plusSelector", ")", ".", "show", "(", ")", ";", "}", "else", "{", "clones", "[", "clones", ".", "length", "-", "1", "]", ".", "find", "(", "plusSelector", ")", ".", "show", "(", ")", ";", "}", "}"], "original_docstring": "/**\n\t * Handle click on minus when minus element is inside the template\n\t * @param {Object} event\n\t */", "comment": [], "docstring_tokens": ["Handle", "click", "on", "minus", "when", "minus", "element", "is", "inside", "the", "template", "@param", "{", "Object", "}", "event"], "docstring": "Handle click on minus when minus element is inside the template\n@param {Object} event", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "event", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Handle click on minus when minus element is inside the template\n @param {Object} event", "short_docstring_tokens": ["Handle", "click", "on", "minus", "when", "minus", "element", "is", "inside", "the", "template", "@param", "{", "Object", "}", "event"], "original_string": "function innerClickOnMinus(event){\n\t\tevent.preventDefault();\n\t\t\n\t\tif (this.removableClone.effect && options.removeColor) {\n\t\t\tthat = this;\n\t\t\tthis.removableClone.effect(\"highlight\", {\n\t\t\t\tcolor: options.removeColor\n\t\t\t}, options.duration, function(){that.removableClone.remove();});\n\t\t} else {\n\t\t\n\t\t\tthis.removableClone.remove();\n\t\t}\n\t\tclones.splice($.inArray(this.removableClone, clones),1);\n\t\tif (clones.length === 0){\n\t\t\tsource.find(plusSelector).show();\n\t\t}else{\n\t\t\tclones[clones.length -1].find(plusSelector).show();\n\t\t}\n\t}", "id": "25d61205974f6fae8815eed01a0e1ea4f457ed203538d1ca9b02b7ddd6fadef1"}
{"identifier": "outerClickOnMinus", "parameters": {"event": null}, "return_type": null, "repo": "pacinete/search_tesis", "path": "web/js/jquery-dynamic-form.js", "language": "JavaScript", "stars_count": 134.0, "issues_count": 22.0, "forks_count": 50.0, "license": ["MIT"], "hexsha": "bb08281938f32015fb9b222ecca53c43731bb29b", "ext": "js", "size": 15068, "code": "function outerClickOnMinus(event){\n\t\tevent.preventDefault();\n\t\tvar clone = clones.pop();\n\t\tif (clones.length >= 0) {\n\t\t\tif (clone.effect && options.removeColor) {\n\t\t\t\tthat = this;\n\t\t\t\tclone.effect(\"highlight\", {\n\t\t\t\t\tcolor: options.removeColor, mode:\"hide\"\n\t\t\t\t}, options.duration, function(){clone.remove();});\n\t\t\t} else {\n\t\t\t\tclone.remove();\n\t\t\t}\n\t\t}\n\t\tif (clones.length === 0) {\n\t\t\tminus.hide();\n\t\t}\n\t\tplus.show();\n\t}", "code_tokens": ["function", "outerClickOnMinus", "(", "event", ")", "{", "event", ".", "preventDefault", "(", ")", ";", "var", "clone", "=", "clones", ".", "pop", "(", ")", ";", "if", "(", "clones", ".", "length", ">=", "0", ")", "{", "if", "(", "clone", ".", "effect", "&&", "options", ".", "removeColor", ")", "{", "that", "=", "this", ";", "clone", ".", "effect", "(", "\"highlight\"", ",", "{", "color", ":", "options", ".", "removeColor", ",", "mode", ":", "\"hide\"", "}", ",", "options", ".", "duration", ",", "function", "(", ")", "{", "clone", ".", "remove", "(", ")", ";", "}", ")", ";", "}", "else", "{", "clone", ".", "remove", "(", ")", ";", "}", "}", "if", "(", "clones", ".", "length", "===", "0", ")", "{", "minus", ".", "hide", "(", ")", ";", "}", "plus", ".", "show", "(", ")", ";", "}"], "original_docstring": "/**\n\t * Handle click on minus when minus element is outside the template\n\t * @param {Object} event\n\t */", "comment": [], "docstring_tokens": ["Handle", "click", "on", "minus", "when", "minus", "element", "is", "outside", "the", "template", "@param", "{", "Object", "}", "event"], "docstring": "Handle click on minus when minus element is outside the template\n@param {Object} event", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "event", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Handle click on minus when minus element is outside the template\n @param {Object} event", "short_docstring_tokens": ["Handle", "click", "on", "minus", "when", "minus", "element", "is", "outside", "the", "template", "@param", "{", "Object", "}", "event"], "original_string": "function outerClickOnMinus(event){\n\t\tevent.preventDefault();\n\t\tvar clone = clones.pop();\n\t\tif (clones.length >= 0) {\n\t\t\tif (clone.effect && options.removeColor) {\n\t\t\t\tthat = this;\n\t\t\t\tclone.effect(\"highlight\", {\n\t\t\t\t\tcolor: options.removeColor, mode:\"hide\"\n\t\t\t\t}, options.duration, function(){clone.remove();});\n\t\t\t} else {\n\t\t\t\tclone.remove();\n\t\t\t}\n\t\t}\n\t\tif (clones.length === 0) {\n\t\t\tminus.hide();\n\t\t}\n\t\tplus.show();\n\t}", "id": "3ece21e8472ad4c13e0c7c00d15251943359b94a8c7a278684a26569f6a00df8"}
{"identifier": "normalizeSource", "parameters": {"elmnt": null, "prefix": null, "index": null}, "return_type": null, "repo": "pacinete/search_tesis", "path": "web/js/jquery-dynamic-form.js", "language": "JavaScript", "stars_count": 134.0, "issues_count": 22.0, "forks_count": 50.0, "license": ["MIT"], "hexsha": "bb08281938f32015fb9b222ecca53c43731bb29b", "ext": "js", "size": 15068, "code": "function normalizeSource(elmnt, prefix, index){\n\t\telmnt.find(formFields).each(function(){\n\t\t\tvar that = $(this), \n\t\t\tnameAttr = that.attr(\"name\"), \n\t\t\torigNameAttr = that.attr(\"origname\"),\n\t\t\tidAttr = that.attr(\"id\"),\n\t\t\torigId = that.attr(\"origid\");\n\t\t\tif (!nameAttr) {\n\t\t\t}\n\t\t\tif(origNameAttr){\n\t\t\t\tthat.attr(\"name\", prefix+\"[\"+index+\"]\"+\"[\"+origNameAttr+\"]\");\n\t\t\t}else{\n\t\t\t\tthat.attr(\"origname\", nameAttr);\n\t\t\t\tthat.attr(\"name\", prefix+\"[\"+index+\"]\"+\"[\"+nameAttr+\"]\");\n\t\t\t}\n\t\t\tif (idAttr) {\n\t\t\t\tthat.attr(\"origid\", idAttr);\n\t\t\t\t$(\"label[for='\"+idAttr+\"']\").each(function(){\n\t\t\t\t\t$(this).attr(\"origfor\", idAttr);\n\t\t\t\t\t$(this).attr(\"for\", idAttr + index);\n\t\t\t\t});\n\t\t\t\tthat.attr(\"id\", idAttr + index);\n\t\t\t}\n\t\t});\n\t}", "code_tokens": ["function", "normalizeSource", "(", "elmnt", ",", "prefix", ",", "index", ")", "{", "elmnt", ".", "find", "(", "formFields", ")", ".", "each", "(", "function", "(", ")", "{", "var", "that", "=", "$", "(", "this", ")", ",", "nameAttr", "=", "that", ".", "attr", "(", "\"name\"", ")", ",", "origNameAttr", "=", "that", ".", "attr", "(", "\"origname\"", ")", ",", "idAttr", "=", "that", ".", "attr", "(", "\"id\"", ")", ",", "origId", "=", "that", ".", "attr", "(", "\"origid\"", ")", ";", "if", "(", "!", "nameAttr", ")", "{", "}", "if", "(", "origNameAttr", ")", "{", "that", ".", "attr", "(", "\"name\"", ",", "prefix", "+", "\"[\"", "+", "index", "+", "\"]\"", "+", "\"[\"", "+", "origNameAttr", "+", "\"]\"", ")", ";", "}", "else", "{", "that", ".", "attr", "(", "\"origname\"", ",", "nameAttr", ")", ";", "that", ".", "attr", "(", "\"name\"", ",", "prefix", "+", "\"[\"", "+", "index", "+", "\"]\"", "+", "\"[\"", "+", "nameAttr", "+", "\"]\"", ")", ";", "}", "if", "(", "idAttr", ")", "{", "that", ".", "attr", "(", "\"origid\"", ",", "idAttr", ")", ";", "$", "(", "\"label[for='\"", "+", "idAttr", "+", "\"']\"", ")", ".", "each", "(", "function", "(", ")", "{", "$", "(", "this", ")", ".", "attr", "(", "\"origfor\"", ",", "idAttr", ")", ";", "$", "(", "this", ")", ".", "attr", "(", "\"for\"", ",", "idAttr", "+", "index", ")", ";", "}", ")", ";", "that", ".", "attr", "(", "\"id\"", ",", "idAttr", "+", "index", ")", ";", "}", "}", ")", ";", "}"], "original_docstring": "/**\n\t * Normalize ids and name attributes of all children forms fields of an element\n\t * @param {Object} elmnt\n\t */", "comment": ["/* Normalize field name attributes */", "//TODO: that.attr(\"name\", formPrefix+\"form\"+index + \"[\"+index+\"]\");", "//This is a subform (thus prefix is not the same as below)", "//This is the main form", "//This is the main normalization", "/* Normalize field id attributes */", "/* Normalize attached label */"], "docstring_tokens": ["Normalize", "ids", "and", "name", "attributes", "of", "all", "children", "forms", "fields", "of", "an", "element", "@param", "{", "Object", "}", "elmnt"], "docstring": "Normalize ids and name attributes of all children forms fields of an element\n@param {Object} elmnt", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "elmnt", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "prefix", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "index", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Normalize ids and name attributes of all children forms fields of an element\n @param {Object} elmnt", "short_docstring_tokens": ["Normalize", "ids", "and", "name", "attributes", "of", "all", "children", "forms", "fields", "of", "an", "element", "@param", "{", "Object", "}", "elmnt"], "original_string": "function normalizeSource(elmnt, prefix, index){\n\t\telmnt.find(formFields).each(function(){\n\t\t\tvar that = $(this), \n\t\t\tnameAttr = that.attr(\"name\"), \n\t\t\torigNameAttr = that.attr(\"origname\"),\n\t\t\tidAttr = that.attr(\"id\"),\n\t\t\torigId = that.attr(\"origid\");\n\n\t\t\t/* Normalize field name attributes */\n\t\t\tif (!nameAttr) {\n\t\t\t\t//TODO: that.attr(\"name\", formPrefix+\"form\"+index + \"[\"+index+\"]\");\n\t\t\t}\n\t\t\t\n\t\t\tif(origNameAttr){\n\t\t\t\t//This is a subform (thus prefix is not the same as below)\n\t\t\t\tthat.attr(\"name\", prefix+\"[\"+index+\"]\"+\"[\"+origNameAttr+\"]\");\n\t\t\t}else{\n\t\t\t\t//This is the main form\n\t\t\t\tthat.attr(\"origname\", nameAttr);\n\t\t\t\t\n\t\t\t\t//This is the main normalization\n\t\t\t\tthat.attr(\"name\", prefix+\"[\"+index+\"]\"+\"[\"+nameAttr+\"]\");\n\t\t\t}\n\t\t\t\n\t\t\t/* Normalize field id attributes */\n\t\t\tif (idAttr) {\n\t\t\t\t/* Normalize attached label */\n\t\t\t\tthat.attr(\"origid\", idAttr);\n\t\t\t\t$(\"label[for='\"+idAttr+\"']\").each(function(){\n\t\t\t\t\t$(this).attr(\"origfor\", idAttr);\n\t\t\t\t\t$(this).attr(\"for\", idAttr + index);\n\t\t\t\t});\n\t\t\t\tthat.attr(\"id\", idAttr + index);\n\t\t\t}\n\t\t});\n\t}", "id": "714741fcb66ccd76aa1e33085333d319b4bd49671ae20990c63cd430e28a69f1"}
{"identifier": "fillData", "parameters": {"formIndex": null, "formValue": null}, "return_type": null, "repo": "pacinete/search_tesis", "path": "web/js/jquery-dynamic-form.js", "language": "JavaScript", "stars_count": 134.0, "issues_count": 22.0, "forks_count": 50.0, "license": ["MIT"], "hexsha": "bb08281938f32015fb9b222ecca53c43731bb29b", "ext": "js", "size": 15068, "code": "function fillData(formIndex, formValue){\n\t\t\t\tvar mainForm = this;\n\t\t\t\tif(formIndex > 0){\n\t\t\t\t\tmainForm.getSource().getPlus().trigger(\"click\", [\"disableEffect\"]);\n\t\t\t\t}\n\t\t\t\tvar clone = mainForm.get(0).getSource().getClones()[formIndex];\n\t\t\t\t$.each(formValue, function(index, value){\n\t\t\t\t\tif($.isArray(value)){\n\t\t\t\t\t\tmainForm = clone.find(\"#\"+index);\n\t\t\t\t\t\tif(typeof mainForm.get(0).getSource === \"function\"){\n\t\t\t\t\t\t\t$.each(value, $.proxy( fillData, mainForm.get(0).getSource()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tvar formElements = mainForm.getSource().getClones()[formIndex].find(\"[origname='\"+index+\"']\");\n\t\t\t\t\t\tif(formElements){\n\t\t\t\t\t\t\tif(formElements.get(0).tagName.toLowerCase() == \"input\"){\n\t\t\t\t\t\t\t\tif(formElements.attr(\"type\") == \"radio\"){\n\t\t\t\t\t\t\t\t\tformElements.filter(\"[value='\"+value+\"']\").attr(\"checked\", \"checked\");\n\t\t\t\t\t\t\t\t}else if(formElements.attr(\"type\") == \"checkbox\"){\n\t\t\t\t\t\t\t\t\tformElements.attr(\"checked\", \"checked\");\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tformElements.attr(\"value\", value);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}else if(formElements.get(0).tagName.toLowerCase() == \"textarea\"){\n\t\t\t\t\t\t\t\tformElements.text(value);\n\t\t\t\t\t\t\t}else if(formElements.get(0).tagName.toLowerCase() == \"select\"){\n\t\t\t\t\t\t\t\t$(formElements.get(0)).find(\"option\").each(function(){\n\t\t\t\t\t\t\t\t\tif($(this).text() == value || $(this).attr(\"value\") == value){\n\t\t\t\t\t\t\t\t\t\t$(this).attr(\"selected\", \"selected\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}", "code_tokens": ["function", "fillData", "(", "formIndex", ",", "formValue", ")", "{", "var", "mainForm", "=", "this", ";", "if", "(", "formIndex", ">", "0", ")", "{", "mainForm", ".", "getSource", "(", ")", ".", "getPlus", "(", ")", ".", "trigger", "(", "\"click\"", ",", "[", "\"disableEffect\"", "]", ")", ";", "}", "var", "clone", "=", "mainForm", ".", "get", "(", "0", ")", ".", "getSource", "(", ")", ".", "getClones", "(", ")", "[", "formIndex", "]", ";", "$", ".", "each", "(", "formValue", ",", "function", "(", "index", ",", "value", ")", "{", "if", "(", "$", ".", "isArray", "(", "value", ")", ")", "{", "mainForm", "=", "clone", ".", "find", "(", "\"#\"", "+", "index", ")", ";", "if", "(", "typeof", "mainForm", ".", "get", "(", "0", ")", ".", "getSource", "===", "\"function\"", ")", "{", "$", ".", "each", "(", "value", ",", "$", ".", "proxy", "(", "fillData", ",", "mainForm", ".", "get", "(", "0", ")", ".", "getSource", "(", ")", ")", ")", ";", "}", "}", "else", "{", "var", "formElements", "=", "mainForm", ".", "getSource", "(", ")", ".", "getClones", "(", ")", "[", "formIndex", "]", ".", "find", "(", "\"[origname='\"", "+", "index", "+", "\"']\"", ")", ";", "if", "(", "formElements", ")", "{", "if", "(", "formElements", ".", "get", "(", "0", ")", ".", "tagName", ".", "toLowerCase", "(", ")", "==", "\"input\"", ")", "{", "if", "(", "formElements", ".", "attr", "(", "\"type\"", ")", "==", "\"radio\"", ")", "{", "formElements", ".", "filter", "(", "\"[value='\"", "+", "value", "+", "\"']\"", ")", ".", "attr", "(", "\"checked\"", ",", "\"checked\"", ")", ";", "}", "else", "if", "(", "formElements", ".", "attr", "(", "\"type\"", ")", "==", "\"checkbox\"", ")", "{", "formElements", ".", "attr", "(", "\"checked\"", ",", "\"checked\"", ")", ";", "}", "else", "{", "formElements", ".", "attr", "(", "\"value\"", ",", "value", ")", ";", "}", "}", "else", "if", "(", "formElements", ".", "get", "(", "0", ")", ".", "tagName", ".", "toLowerCase", "(", ")", "==", "\"textarea\"", ")", "{", "formElements", ".", "text", "(", "value", ")", ";", "}", "else", "if", "(", "formElements", ".", "get", "(", "0", ")", ".", "tagName", ".", "toLowerCase", "(", ")", "==", "\"select\"", ")", "{", "$", "(", "formElements", ".", "get", "(", "0", ")", ")", ".", "find", "(", "\"option\"", ")", ".", "each", "(", "function", "(", ")", "{", "if", "(", "$", "(", "this", ")", ".", "text", "(", ")", "==", "value", "||", "$", "(", "this", ")", ".", "attr", "(", "\"value\"", ")", "==", "value", ")", "{", "$", "(", "this", ")", ".", "attr", "(", "\"selected\"", ",", "\"selected\"", ")", ";", "}", "}", ")", ";", "}", "}", "}", "}", ")", ";", "}"], "original_docstring": "/**\n\t\t\t * Fill data of each main dynamic form clones\n\t\t\t * @param {Object} formIndex\n\t\t\t * @param {Object} formValue\n\t\t\t */", "comment": ["//Loop over data form array (each item will match a specific clone)", "//Shows required additional dynamic forms", "/* Fill in radio input */", "/* Fill in checkbox input */", "/* Fill in textarea */", "/* Fill in select */"], "docstring_tokens": ["Fill", "data", "of", "each", "main", "dynamic", "form", "clones", "@param", "{", "Object", "}", "formIndex", "@param", "{", "Object", "}", "formValue"], "docstring": "Fill data of each main dynamic form clones\n@param {Object} formIndex\n@param {Object} formValue", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "formIndex", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "formValue", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Fill data of each main dynamic form clones\n @param {Object} formIndex\n @param {Object} formValue", "short_docstring_tokens": ["Fill", "data", "of", "each", "main", "dynamic", "form", "clones", "@param", "{", "Object", "}", "formIndex", "@param", "{", "Object", "}", "formValue"], "original_string": "function fillData(formIndex, formValue){\n\t\t\t\t//Loop over data form array (each item will match a specific clone)\n\t\t\t\tvar mainForm = this;\n\t\t\t\t//Shows required additional dynamic forms\n\t\t\t\tif(formIndex > 0){\n\t\t\t\t\tmainForm.getSource().getPlus().trigger(\"click\", [\"disableEffect\"]);\n\t\t\t\t}\n\t\t\t\tvar clone = mainForm.get(0).getSource().getClones()[formIndex];\n\t\t\t\t\n\t\t\t\t$.each(formValue, function(index, value){\n\t\t\t\t\tif($.isArray(value)){\n\t\t\t\t\t\tmainForm = clone.find(\"#\"+index);\n\t\t\t\t\t\tif(typeof mainForm.get(0).getSource === \"function\"){\n\t\t\t\t\t\t\t$.each(value, $.proxy( fillData, mainForm.get(0).getSource()));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}else{\n\t\t\t\t\t\tvar formElements = mainForm.getSource().getClones()[formIndex].find(\"[origname='\"+index+\"']\");\n\t\t\t\t\t\tif(formElements){\n\t\t\t\t\t\t\tif(formElements.get(0).tagName.toLowerCase() == \"input\"){\n\t\t\t\t\t\t\t\t/* Fill in radio input */\n\t\t\t\t\t\t\t\tif(formElements.attr(\"type\") == \"radio\"){\n\t\t\t\t\t\t\t\t\tformElements.filter(\"[value='\"+value+\"']\").attr(\"checked\", \"checked\");\n\t\t\t\t\t\t\t\t}else if(formElements.attr(\"type\") == \"checkbox\"){/* Fill in checkbox input */\n\t\t\t\t\t\t\t\t\tformElements.attr(\"checked\", \"checked\");\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tformElements.attr(\"value\", value);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}else if(formElements.get(0).tagName.toLowerCase() == \"textarea\"){\n\t\t\t\t\t\t\t\t/* Fill in textarea */\n\t\t\t\t\t\t\t\tformElements.text(value);\n\t\t\t\t\t\t\t}else if(formElements.get(0).tagName.toLowerCase() == \"select\"){\n\t\t\t\t\t\t\t\t/* Fill in select */\n\t\t\t\t\t\t\t\t$(formElements.get(0)).find(\"option\").each(function(){\n\t\t\t\t\t\t\t\t\tif($(this).text() == value || $(this).attr(\"value\") == value){\n\t\t\t\t\t\t\t\t\t\t$(this).attr(\"selected\", \"selected\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}", "id": "57fcfe29a88293a5bb75c85a62d20d0b6ca451ee76a10ab2bdb787e2d608e00c"}
{"identifier": "remove", "parameters": {"logFunc": null}, "return_type": "<not_specific>", "repo": "nebojsaradovanovic/nebojsaradovanovic.github.io", "path": "docs/wizard/scripts/modules/interaction-widget.js", "language": "JavaScript", "stars_count": 10.0, "issues_count": 3.0, "forks_count": 27.0, "license": ["MIT"], "hexsha": "2d2e3087b0a32688ac6ac662816016e0f1aa8ae4", "ext": "js", "size": 5157, "code": "function remove(logFunc){\n    logFunc('Uninstalling Interaction Widgets...');\n    return getExisting()\n    .then(apps => {\n        let del_app = [];\n        if (apps.length > 0){\n            apps.map(entity => entity.id)\n                .forEach(iid => {\n                    del_app.push(integrationsApi.deleteIntegration(iid));\n            });\n        }\n        return Promise.all(del_app);\n    });\n}", "code_tokens": ["function", "remove", "(", "logFunc", ")", "{", "logFunc", "(", "'Uninstalling Interaction Widgets...'", ")", ";", "return", "getExisting", "(", ")", ".", "then", "(", "apps", "=>", "{", "let", "del_app", "=", "[", "]", ";", "if", "(", "apps", ".", "length", ">", "0", ")", "{", "apps", ".", "map", "(", "entity", "=>", "entity", ".", "id", ")", ".", "forEach", "(", "iid", "=>", "{", "del_app", ".", "push", "(", "integrationsApi", ".", "deleteIntegration", "(", "iid", ")", ")", ";", "}", ")", ";", "}", "return", "Promise", ".", "all", "(", "del_app", ")", ";", "}", ")", ";", "}"], "original_docstring": "/**\n * Delete all existing PremiumApp instances\n * @param {Function} logFunc logs any messages\n * @returns {Promise}\n */", "comment": ["// Filter results before deleting"], "docstring_tokens": ["Delete", "all", "existing", "PremiumApp", "instances", "@param", "{", "Function", "}", "logFunc", "logs", "any", "messages", "@returns", "{", "Promise", "}"], "docstring": "Delete all existing PremiumApp instances\n@param {Function} logFunc logs any messages\n@returns {Promise}", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "logFunc", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Delete all existing PremiumApp instances\n @param {Function} logFunc logs any messages\n @returns {Promise}", "short_docstring_tokens": ["Delete", "all", "existing", "PremiumApp", "instances", "@param", "{", "Function", "}", "logFunc", "logs", "any", "messages", "@returns", "{", "Promise", "}"], "original_string": "function remove(logFunc){\n    logFunc('Uninstalling Interaction Widgets...');\n\n    return getExisting()\n    .then(apps => {\n        let del_app = [];\n\n        if (apps.length > 0){\n            // Filter results before deleting\n            apps.map(entity => entity.id)\n                .forEach(iid => {\n                    del_app.push(integrationsApi.deleteIntegration(iid));\n            });\n        }\n\n        return Promise.all(del_app);\n    });\n}", "id": "0c5798a41477691c145e0c63b2490c0c64baa4d073139b456b2b064362157cc6"}
{"identifier": "create", "parameters": {"logFunc": null, "data": null}, "return_type": "<not_specific>", "repo": "nebojsaradovanovic/nebojsaradovanovic.github.io", "path": "docs/wizard/scripts/modules/interaction-widget.js", "language": "JavaScript", "stars_count": 10.0, "issues_count": 3.0, "forks_count": 27.0, "license": ["MIT"], "hexsha": "2d2e3087b0a32688ac6ac662816016e0f1aa8ae4", "ext": "js", "size": 5157, "code": "function create(logFunc, data){\n    let integrationPromises = [];\n    let enableIntegrationPromises = [];\n    let integrationsData = {};\n    data.forEach((instance) => {\n        let integrationBody = {\n            body: {\n                integrationType: {\n                    id: 'embedded-client-app-interaction-widget'\n                }\n            }\n        };\n        integrationPromises.push(\n            integrationsApi.postIntegrations(integrationBody)\n            .then((data) => {\n                logFunc('Created instance: ' + instance.name);\n                integrationsData[instance.name] = data;\n            })\n        );\n    });\n    return Promise.all(integrationPromises)\n    .then(() => integrationsData);\n}", "code_tokens": ["function", "create", "(", "logFunc", ",", "data", ")", "{", "let", "integrationPromises", "=", "[", "]", ";", "let", "enableIntegrationPromises", "=", "[", "]", ";", "let", "integrationsData", "=", "{", "}", ";", "data", ".", "forEach", "(", "(", "instance", ")", "=>", "{", "let", "integrationBody", "=", "{", "body", ":", "{", "integrationType", ":", "{", "id", ":", "'embedded-client-app-interaction-widget'", "}", "}", "}", ";", "integrationPromises", ".", "push", "(", "integrationsApi", ".", "postIntegrations", "(", "integrationBody", ")", ".", "then", "(", "(", "data", ")", "=>", "{", "logFunc", "(", "'Created instance: '", "+", "instance", ".", "name", ")", ";", "integrationsData", "[", "instance", ".", "name", "]", "=", "data", ";", "}", ")", ")", ";", "}", ")", ";", "return", "Promise", ".", "all", "(", "integrationPromises", ")", ".", "then", "(", "(", ")", "=>", "integrationsData", ")", ";", "}"], "original_docstring": "/**\n * Add Genesys Cloud instances based on installation data\n * @param {Function} logFunc logger for messages\n * @param {Object} data the installation data for this type\n * @returns {Promise.<Object>} were key is the unprefixed name and the values\n *                          is the Genesys Cloud object details of that type.\n */", "comment": ["// Rename and add Group Filtering"], "docstring_tokens": ["Add", "Genesys", "Cloud", "instances", "based", "on", "installation", "data", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "data", "the", "installation", "data", "for", "this", "type", "@returns", "{", "Promise", ".", "}", "were", "key", "is", "the", "unprefixed", "name", "and", "the", "values", "is", "the", "Genesys", "Cloud", "object", "details", "of", "that", "type", "."], "docstring": "Add Genesys Cloud instances based on installation data\n@param {Function} logFunc logger for messages\n@param {Object} data the installation data for this type\n@returns {Promise.} were key is the unprefixed name and the values\nis the Genesys Cloud object details of that type.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "logFunc", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "data", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Add Genesys Cloud instances based on installation data\n @param {Function} logFunc logger for messages\n @param {Object} data the installation data for this type\n @returns {Promise.<Object>} were key is the unprefixed name and the values\n                          is the Genesys Cloud object details of that type.", "short_docstring_tokens": ["Add", "Genesys", "Cloud", "instances", "based", "on", "installation", "data", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "data", "the", "installation", "data", "for", "this", "type", "@returns", "{", "Promise", ".", "<Object", ">", "}", "were", "key", "is", "the", "unprefixed", "name", "and", "the", "values", "is", "the", "Genesys", "Cloud", "object", "details", "of", "that", "type", "."], "original_string": "function create(logFunc, data){\n    let integrationPromises = [];\n    let enableIntegrationPromises = [];\n    let integrationsData = {};\n\n    data.forEach((instance) => {\n        let integrationBody = {\n            body: {\n                integrationType: {\n                    id: 'embedded-client-app-interaction-widget'\n                }\n            }\n        };\n\n        // Rename and add Group Filtering\n        integrationPromises.push(\n            integrationsApi.postIntegrations(integrationBody)\n            .then((data) => {\n                logFunc('Created instance: ' + instance.name);\n                integrationsData[instance.name] = data;\n            })\n        );\n    });\n\n    return Promise.all(integrationPromises)\n    .then(() => integrationsData);\n}", "id": "56834414a6a66f5c7cff08edfcb0436d8420e95af1f34f395b955f3260e89f58"}
{"identifier": "configure", "parameters": {"logFunc": null, "installedData": null, "userId": null}, "return_type": "<not_specific>", "repo": "nebojsaradovanovic/nebojsaradovanovic.github.io", "path": "docs/wizard/scripts/modules/interaction-widget.js", "language": "JavaScript", "stars_count": 10.0, "issues_count": 3.0, "forks_count": 27.0, "license": ["MIT"], "hexsha": "2d2e3087b0a32688ac6ac662816016e0f1aa8ae4", "ext": "js", "size": 5157, "code": "function configure(logFunc, installedData, userId){\n    let instanceInstallationData = config.provisioningInfo['interaction-widget'];\n    let appInstancesData = installedData['interaction-widget'];\n    let promisesArr = [];\n    Object.keys(appInstancesData).forEach((instanceKey) => {\n        let appInstance = appInstancesData[instanceKey];\n        let appInstanceInstall =  instanceInstallationData\n                                            .find((a) => a.name == instanceKey);\n        let integrationConfig = {\n            body: {\n                name: config.prefix + instanceKey,\n                version: 1, \n                properties: {\n                    url: appInstanceInstall.url,\n                    sandbox: appInstanceInstall.sandbox || 'allow-forms,allow-modals,allow-popups,allow-presentation,allow-same-origin,allow-scripts',\n                    queueIdFilterList: [],\n                    communicationTypeFilter: appInstanceInstall\n                            .communicationTypeFilter ? \n                                    appInstanceInstall.communicationTypeFilter :\n                                    '',\n                    groups: appInstanceInstall\n                                    .groups.map((groupName) => \n                                        installedData.group[groupName].id)\n                                    .filter(g => g != undefined)\n                },\n                advanced: appInstanceInstall.advanced || {},\n                notes: appInstanceInstall.notes || `Provisioned by ${config.appName} integration`,\n                credentials: {}\n            }\n        };\n        promisesArr.push(\n            integrationsApi.putIntegrationConfigCurrent(\n                appInstance.id, \n                integrationConfig\n            )\n            .then((data) => {\n                logFunc('Configured instance: ' + appInstance.name);   \n                let opts = {\n                    body: {\n                        intendedState: 'ENABLED'\n                    }\n                };\n                return integrationsApi.patchIntegration(appInstance.id, opts)\n            })\n            .then((data) => logFunc('Enabled instance: ' + data.name))\n            .catch((err) => console.error(err))\n        );\n    });\n    return Promise.all(promisesArr);\n}", "code_tokens": ["function", "configure", "(", "logFunc", ",", "installedData", ",", "userId", ")", "{", "let", "instanceInstallationData", "=", "config", ".", "provisioningInfo", "[", "'interaction-widget'", "]", ";", "let", "appInstancesData", "=", "installedData", "[", "'interaction-widget'", "]", ";", "let", "promisesArr", "=", "[", "]", ";", "Object", ".", "keys", "(", "appInstancesData", ")", ".", "forEach", "(", "(", "instanceKey", ")", "=>", "{", "let", "appInstance", "=", "appInstancesData", "[", "instanceKey", "]", ";", "let", "appInstanceInstall", "=", "instanceInstallationData", ".", "find", "(", "(", "a", ")", "=>", "a", ".", "name", "==", "instanceKey", ")", ";", "let", "integrationConfig", "=", "{", "body", ":", "{", "name", ":", "config", ".", "prefix", "+", "instanceKey", ",", "version", ":", "1", ",", "properties", ":", "{", "url", ":", "appInstanceInstall", ".", "url", ",", "sandbox", ":", "appInstanceInstall", ".", "sandbox", "||", "'allow-forms,allow-modals,allow-popups,allow-presentation,allow-same-origin,allow-scripts'", ",", "queueIdFilterList", ":", "[", "]", ",", "communicationTypeFilter", ":", "appInstanceInstall", ".", "communicationTypeFilter", "?", "appInstanceInstall", ".", "communicationTypeFilter", ":", "''", ",", "groups", ":", "appInstanceInstall", ".", "groups", ".", "map", "(", "(", "groupName", ")", "=>", "installedData", ".", "group", "[", "groupName", "]", ".", "id", ")", ".", "filter", "(", "g", "=>", "g", "!=", "undefined", ")", "}", ",", "advanced", ":", "appInstanceInstall", ".", "advanced", "||", "{", "}", ",", "notes", ":", "appInstanceInstall", ".", "notes", "||", "`", "${", "config", ".", "appName", "}", "`", ",", "credentials", ":", "{", "}", "}", "}", ";", "promisesArr", ".", "push", "(", "integrationsApi", ".", "putIntegrationConfigCurrent", "(", "appInstance", ".", "id", ",", "integrationConfig", ")", ".", "then", "(", "(", "data", ")", "=>", "{", "logFunc", "(", "'Configured instance: '", "+", "appInstance", ".", "name", ")", ";", "let", "opts", "=", "{", "body", ":", "{", "intendedState", ":", "'ENABLED'", "}", "}", ";", "return", "integrationsApi", ".", "patchIntegration", "(", "appInstance", ".", "id", ",", "opts", ")", "}", ")", ".", "then", "(", "(", "data", ")", "=>", "logFunc", "(", "'Enabled instance: '", "+", "data", ".", "name", ")", ")", ".", "catch", "(", "(", "err", ")", "=>", "console", ".", "error", "(", "err", ")", ")", ")", ";", "}", ")", ";", "return", "Promise", ".", "all", "(", "promisesArr", ")", ";", "}"], "original_docstring": "/**\n * Further configuration needed by this object\n * Called after eveything has already been installed\n * @param {Function} logFunc logger for messages\n * @param {Object} installedData contains everything that was installed by the wizard\n * @param {String} userId User id if needed\n */", "comment": [], "docstring_tokens": ["Further", "configuration", "needed", "by", "this", "object", "Called", "after", "eveything", "has", "already", "been", "installed", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "installedData", "contains", "everything", "that", "was", "installed", "by", "the", "wizard", "@param", "{", "String", "}", "userId", "User", "id", "if", "needed"], "docstring": "Further configuration needed by this object\nCalled after eveything has already been installed\n@param {Function} logFunc logger for messages\n@param {Object} installedData contains everything that was installed by the wizard\n@param {String} userId User id if needed", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "logFunc", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "installedData", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "userId", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Further configuration needed by this object\n Called after eveything has already been installed\n @param {Function} logFunc logger for messages\n @param {Object} installedData contains everything that was installed by the wizard\n @param {String} userId User id if needed", "short_docstring_tokens": ["Further", "configuration", "needed", "by", "this", "object", "Called", "after", "eveything", "has", "already", "been", "installed", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "installedData", "contains", "everything", "that", "was", "installed", "by", "the", "wizard", "@param", "{", "String", "}", "userId", "User", "id", "if", "needed"], "original_string": "function configure(logFunc, installedData, userId){\n    let instanceInstallationData = config.provisioningInfo['interaction-widget'];\n    let appInstancesData = installedData['interaction-widget'];\n\n    let promisesArr = [];\n\n    Object.keys(appInstancesData).forEach((instanceKey) => {\n        let appInstance = appInstancesData[instanceKey];\n        let appInstanceInstall =  instanceInstallationData\n                                            .find((a) => a.name == instanceKey);\n\n        let integrationConfig = {\n            body: {\n                name: config.prefix + instanceKey,\n                version: 1, \n                properties: {\n                    url: appInstanceInstall.url,\n                    sandbox: appInstanceInstall.sandbox || 'allow-forms,allow-modals,allow-popups,allow-presentation,allow-same-origin,allow-scripts',\n                    queueIdFilterList: [],\n                    communicationTypeFilter: appInstanceInstall\n                            .communicationTypeFilter ? \n                                    appInstanceInstall.communicationTypeFilter :\n                                    '',\n                    groups: appInstanceInstall\n                                    .groups.map((groupName) => \n                                        installedData.group[groupName].id)\n                                    .filter(g => g != undefined)\n                },\n                advanced: appInstanceInstall.advanced || {},\n                notes: appInstanceInstall.notes || `Provisioned by ${config.appName} integration`,\n                credentials: {}\n            }\n        };\n       \n        promisesArr.push(\n            integrationsApi.putIntegrationConfigCurrent(\n                appInstance.id, \n                integrationConfig\n            )\n            .then((data) => {\n                logFunc('Configured instance: ' + appInstance.name);   \n\n                let opts = {\n                    body: {\n                        intendedState: 'ENABLED'\n                    }\n                };\n\n                return integrationsApi.patchIntegration(appInstance.id, opts)\n            })\n            .then((data) => logFunc('Enabled instance: ' + data.name))\n            .catch((err) => console.error(err))\n        );\n    });\n\n    return Promise.all(promisesArr);\n}", "id": "4db0b5aacdd72dac242367b93f9eedd56e3b05b75a561c28f9872c6ea9a9edc6"}
{"identifier": "remove", "parameters": {"logFunc": null}, "return_type": "<not_specific>", "repo": "nebojsaradovanovic/nebojsaradovanovic.github.io", "path": "docs/wizard/scripts/modules/oauth-client.js", "language": "JavaScript", "stars_count": 10.0, "issues_count": 3.0, "forks_count": 27.0, "license": ["MIT"], "hexsha": "f3cf2e1e4ebcde6befa22db33522dbeb12b1d8b1", "ext": "js", "size": 5423, "code": "function remove(logFunc){\n    logFunc('Uninstalling OAuth Clients...');\n    return getExisting()\n    .then((instances) => {\n        let del_clients = [];\n        if (instances.length > 0){\n            instances.map(entity => entity.id)\n                .forEach(cid => {\n                    del_clients.push(oAuthApi.deleteOauthClient(cid));\n            });\n        }\n        return Promise.all(del_clients);\n    });\n}", "code_tokens": ["function", "remove", "(", "logFunc", ")", "{", "logFunc", "(", "'Uninstalling OAuth Clients...'", ")", ";", "return", "getExisting", "(", ")", ".", "then", "(", "(", "instances", ")", "=>", "{", "let", "del_clients", "=", "[", "]", ";", "if", "(", "instances", ".", "length", ">", "0", ")", "{", "instances", ".", "map", "(", "entity", "=>", "entity", ".", "id", ")", ".", "forEach", "(", "cid", "=>", "{", "del_clients", ".", "push", "(", "oAuthApi", ".", "deleteOauthClient", "(", "cid", ")", ")", ";", "}", ")", ";", "}", "return", "Promise", ".", "all", "(", "del_clients", ")", ";", "}", ")", ";", "}"], "original_docstring": "/**\n * Delete all existing PremiumApp instances\n * @param {Function} logFunc logs any messages\n * @returns {Promise}\n */", "comment": ["// Filter results before deleting"], "docstring_tokens": ["Delete", "all", "existing", "PremiumApp", "instances", "@param", "{", "Function", "}", "logFunc", "logs", "any", "messages", "@returns", "{", "Promise", "}"], "docstring": "Delete all existing PremiumApp instances\n@param {Function} logFunc logs any messages\n@returns {Promise}", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "logFunc", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Delete all existing PremiumApp instances\n @param {Function} logFunc logs any messages\n @returns {Promise}", "short_docstring_tokens": ["Delete", "all", "existing", "PremiumApp", "instances", "@param", "{", "Function", "}", "logFunc", "logs", "any", "messages", "@returns", "{", "Promise", "}"], "original_string": "function remove(logFunc){\n    logFunc('Uninstalling OAuth Clients...');\n\n    return getExisting()\n    .then((instances) => {\n        let del_clients = [];\n\n        if (instances.length > 0){\n            // Filter results before deleting\n            instances.map(entity => entity.id)\n                .forEach(cid => {\n                    del_clients.push(oAuthApi.deleteOauthClient(cid));\n            });\n        }\n\n        return Promise.all(del_clients);\n    });\n}", "id": "d0bbae1e699a6cbf9dc5a9206d7f634d9ec6ba9c159e971eab1e338d2c9caf1d"}
{"identifier": "create", "parameters": {"logFunc": null, "data": null}, "return_type": "<not_specific>", "repo": "nebojsaradovanovic/nebojsaradovanovic.github.io", "path": "docs/wizard/scripts/modules/oauth-client.js", "language": "JavaScript", "stars_count": 10.0, "issues_count": 3.0, "forks_count": 27.0, "license": ["MIT"], "hexsha": "f3cf2e1e4ebcde6befa22db33522dbeb12b1d8b1", "ext": "js", "size": 5423, "code": "function create(logFunc, data){\n    let authData = {};\n    return authorizationApi.getAuthorizationRoles({\n        name: 'employee'\n    })\n    .then((result) => {\n        let employeeRole = result.entities[0];\n        let authPromises = [];\n        data.forEach((oauth) => {\n            let oauthClient = {\n                name: config.prefix + oauth.name,\n                description: oauth.description,\n                authorizedGrantType: oauth.authorizedGrantType,\n                roleIds: [employeeRole.id]\n            };\n            authPromises.push(\n                oAuthApi.postOauthClients(oauthClient)\n                .then((data) => {\n                    authData[oauth.name] = data;\n                    logFunc('Created ' + data.name + ' auth client');\n                })\n                .catch((err) => console.log(err))\n            );\n        })\n        return Promise.all(authPromises);\n    })\n    .then(() => authData);\n}", "code_tokens": ["function", "create", "(", "logFunc", ",", "data", ")", "{", "let", "authData", "=", "{", "}", ";", "return", "authorizationApi", ".", "getAuthorizationRoles", "(", "{", "name", ":", "'employee'", "}", ")", ".", "then", "(", "(", "result", ")", "=>", "{", "let", "employeeRole", "=", "result", ".", "entities", "[", "0", "]", ";", "let", "authPromises", "=", "[", "]", ";", "data", ".", "forEach", "(", "(", "oauth", ")", "=>", "{", "let", "oauthClient", "=", "{", "name", ":", "config", ".", "prefix", "+", "oauth", ".", "name", ",", "description", ":", "oauth", ".", "description", ",", "authorizedGrantType", ":", "oauth", ".", "authorizedGrantType", ",", "roleIds", ":", "[", "employeeRole", ".", "id", "]", "}", ";", "authPromises", ".", "push", "(", "oAuthApi", ".", "postOauthClients", "(", "oauthClient", ")", ".", "then", "(", "(", "data", ")", "=>", "{", "authData", "[", "oauth", ".", "name", "]", "=", "data", ";", "logFunc", "(", "'Created '", "+", "data", ".", "name", "+", "' auth client'", ")", ";", "}", ")", ".", "catch", "(", "(", "err", ")", "=>", "console", ".", "log", "(", "err", ")", ")", ")", ";", "}", ")", "return", "Promise", ".", "all", "(", "authPromises", ")", ";", "}", ")", ".", "then", "(", "(", ")", "=>", "authData", ")", ";", "}"], "original_docstring": "/**\n * Add Genesys Cloud instances based on installation data\n * @param {Function} logFunc logger for messages\n * @param {Object} data the installation data for this type\n * @returns {Promise.<Object>} were key is the unprefixed name and the values\n *                          is the Genesys Cloud object details of that type.\n */", "comment": ["// Assign employee role to the oauth client because required", "// to have a role id on creation"], "docstring_tokens": ["Add", "Genesys", "Cloud", "instances", "based", "on", "installation", "data", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "data", "the", "installation", "data", "for", "this", "type", "@returns", "{", "Promise", ".", "}", "were", "key", "is", "the", "unprefixed", "name", "and", "the", "values", "is", "the", "Genesys", "Cloud", "object", "details", "of", "that", "type", "."], "docstring": "Add Genesys Cloud instances based on installation data\n@param {Function} logFunc logger for messages\n@param {Object} data the installation data for this type\n@returns {Promise.} were key is the unprefixed name and the values\nis the Genesys Cloud object details of that type.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "logFunc", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "data", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Add Genesys Cloud instances based on installation data\n @param {Function} logFunc logger for messages\n @param {Object} data the installation data for this type\n @returns {Promise.<Object>} were key is the unprefixed name and the values\n                          is the Genesys Cloud object details of that type.", "short_docstring_tokens": ["Add", "Genesys", "Cloud", "instances", "based", "on", "installation", "data", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "data", "the", "installation", "data", "for", "this", "type", "@returns", "{", "Promise", ".", "<Object", ">", "}", "were", "key", "is", "the", "unprefixed", "name", "and", "the", "values", "is", "the", "Genesys", "Cloud", "object", "details", "of", "that", "type", "."], "original_string": "function create(logFunc, data){\n    let authData = {};\n\n    // Assign employee role to the oauth client because required\n    // to have a role id on creation\n    return authorizationApi.getAuthorizationRoles({\n        name: 'employee'\n    })\n    .then((result) => {\n        let employeeRole = result.entities[0];\n\n        let authPromises = [];\n        \n        data.forEach((oauth) => {\n            let oauthClient = {\n                name: config.prefix + oauth.name,\n                description: oauth.description,\n                authorizedGrantType: oauth.authorizedGrantType,\n                roleIds: [employeeRole.id]\n            };\n\n            authPromises.push(\n                oAuthApi.postOauthClients(oauthClient)\n                .then((data) => {\n                    authData[oauth.name] = data;\n\n                    logFunc('Created ' + data.name + ' auth client');\n                })\n                .catch((err) => console.log(err))\n            );\n\n            \n        })\n\n        return Promise.all(authPromises);\n    })\n    .then(() => authData);\n}", "id": "4cd8e82a2e90fb45fba074b0cfb070ffd3a9025b9fb46d9652690270f940b84b"}
{"identifier": "configure", "parameters": {"logFunc": null, "installedData": null, "userId": null}, "return_type": "<not_specific>", "repo": "nebojsaradovanovic/nebojsaradovanovic.github.io", "path": "docs/wizard/scripts/modules/oauth-client.js", "language": "JavaScript", "stars_count": 10.0, "issues_count": 3.0, "forks_count": 27.0, "license": ["MIT"], "hexsha": "f3cf2e1e4ebcde6befa22db33522dbeb12b1d8b1", "ext": "js", "size": 5423, "code": "function configure(logFunc, installedData, userId){\n    let promiseArr = [];\n    let oauthData = installedData['oauth-client'];\n    Object.keys(oauthData).forEach((oauthKey) => {\n        let promise = new Promise((resolve, reject) => {\n            let oauth = oauthData[oauthKey];\n            let oauthInstall = config.provisioningInfo['oauth-client']\n                                .find((info) => info.name == oauthKey);\n            let timer = setInterval(() => {\n                usersApi.getUsersMe({\n                    expand: ['authorization']\n                })\n                .then((result) => {\n                    console.log(result);\n                    let userRoleIds = result.authorization.roles.map(u => u.id);\n                    let userAssigned = true;\n                    oauthInstall.roles.forEach((r) => {\n                        if(!userRoleIds.includes(installedData.role[r].id)){\n                            userAssigned = false;\n                        }\n                    });\n                    if(userAssigned){\n                        clearInterval(timer);\n                        oAuthApi.putOauthClient(\n                            oauthData[oauthKey].id,\n                            {\n                                name: oauth.name,\n                                authorizedGrantType: oauth.authorizedGrantType,\n                                roleIds: oauthInstall.roles.map(\n                                        (roleName) => installedData.role[roleName].id)\n                                    .filter(g => g != undefined)\n                            }\n                        )\n                        .then(() => {\n                            resolve();\n                        })\n                        .catch((e) => reject(e));\n                    }\n                })\n                .catch(e => {\n                    clearInterval(timer);\n                    console.error(e);\n                });\n            }, 3000);\n        });\n        promiseArr.push(promise);\n    });\n    return Promise.all(promiseArr);\n}", "code_tokens": ["function", "configure", "(", "logFunc", ",", "installedData", ",", "userId", ")", "{", "let", "promiseArr", "=", "[", "]", ";", "let", "oauthData", "=", "installedData", "[", "'oauth-client'", "]", ";", "Object", ".", "keys", "(", "oauthData", ")", ".", "forEach", "(", "(", "oauthKey", ")", "=>", "{", "let", "promise", "=", "new", "Promise", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "let", "oauth", "=", "oauthData", "[", "oauthKey", "]", ";", "let", "oauthInstall", "=", "config", ".", "provisioningInfo", "[", "'oauth-client'", "]", ".", "find", "(", "(", "info", ")", "=>", "info", ".", "name", "==", "oauthKey", ")", ";", "let", "timer", "=", "setInterval", "(", "(", ")", "=>", "{", "usersApi", ".", "getUsersMe", "(", "{", "expand", ":", "[", "'authorization'", "]", "}", ")", ".", "then", "(", "(", "result", ")", "=>", "{", "console", ".", "log", "(", "result", ")", ";", "let", "userRoleIds", "=", "result", ".", "authorization", ".", "roles", ".", "map", "(", "u", "=>", "u", ".", "id", ")", ";", "let", "userAssigned", "=", "true", ";", "oauthInstall", ".", "roles", ".", "forEach", "(", "(", "r", ")", "=>", "{", "if", "(", "!", "userRoleIds", ".", "includes", "(", "installedData", ".", "role", "[", "r", "]", ".", "id", ")", ")", "{", "userAssigned", "=", "false", ";", "}", "}", ")", ";", "if", "(", "userAssigned", ")", "{", "clearInterval", "(", "timer", ")", ";", "oAuthApi", ".", "putOauthClient", "(", "oauthData", "[", "oauthKey", "]", ".", "id", ",", "{", "name", ":", "oauth", ".", "name", ",", "authorizedGrantType", ":", "oauth", ".", "authorizedGrantType", ",", "roleIds", ":", "oauthInstall", ".", "roles", ".", "map", "(", "(", "roleName", ")", "=>", "installedData", ".", "role", "[", "roleName", "]", ".", "id", ")", ".", "filter", "(", "g", "=>", "g", "!=", "undefined", ")", "}", ")", ".", "then", "(", "(", ")", "=>", "{", "resolve", "(", ")", ";", "}", ")", ".", "catch", "(", "(", "e", ")", "=>", "reject", "(", "e", ")", ")", ";", "}", "}", ")", ".", "catch", "(", "e", "=>", "{", "clearInterval", "(", "timer", ")", ";", "console", ".", "error", "(", "e", ")", ";", "}", ")", ";", "}", ",", "3000", ")", ";", "}", ")", ";", "promiseArr", ".", "push", "(", "promise", ")", ";", "}", ")", ";", "return", "Promise", ".", "all", "(", "promiseArr", ")", ";", "}"], "original_docstring": "/**\n * Further configuration needed by this object\n * Called after eveything has already been installed\n * @param {Function} logFunc logger for messages\n * @param {Object} installedData contains everything that was installed by the wizard\n * @param {String} userId User id if needed\n */", "comment": ["// Check if all roles for these client is already assigned", "// to the user"], "docstring_tokens": ["Further", "configuration", "needed", "by", "this", "object", "Called", "after", "eveything", "has", "already", "been", "installed", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "installedData", "contains", "everything", "that", "was", "installed", "by", "the", "wizard", "@param", "{", "String", "}", "userId", "User", "id", "if", "needed"], "docstring": "Further configuration needed by this object\nCalled after eveything has already been installed\n@param {Function} logFunc logger for messages\n@param {Object} installedData contains everything that was installed by the wizard\n@param {String} userId User id if needed", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "logFunc", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "installedData", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "userId", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Further configuration needed by this object\n Called after eveything has already been installed\n @param {Function} logFunc logger for messages\n @param {Object} installedData contains everything that was installed by the wizard\n @param {String} userId User id if needed", "short_docstring_tokens": ["Further", "configuration", "needed", "by", "this", "object", "Called", "after", "eveything", "has", "already", "been", "installed", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "installedData", "contains", "everything", "that", "was", "installed", "by", "the", "wizard", "@param", "{", "String", "}", "userId", "User", "id", "if", "needed"], "original_string": "function configure(logFunc, installedData, userId){\n    let promiseArr = [];\n    let oauthData = installedData['oauth-client'];\n\n    Object.keys(oauthData).forEach((oauthKey) => {\n        let promise = new Promise((resolve, reject) => {\n            let oauth = oauthData[oauthKey];\n            let oauthInstall = config.provisioningInfo['oauth-client']\n                                .find((info) => info.name == oauthKey);\n\n            let timer = setInterval(() => {\n                usersApi.getUsersMe({\n                    expand: ['authorization']\n                })\n                .then((result) => {\n                    console.log(result);\n                    let userRoleIds = result.authorization.roles.map(u => u.id);\n                    let userAssigned = true;\n\n                    // Check if all roles for these client is already assigned\n                    // to the user\n                    oauthInstall.roles.forEach((r) => {\n                        if(!userRoleIds.includes(installedData.role[r].id)){\n                            userAssigned = false;\n                        }\n                    });\n\n                    if(userAssigned){\n                        clearInterval(timer);\n\n                        oAuthApi.putOauthClient(\n                            oauthData[oauthKey].id,\n                            {\n                                name: oauth.name,\n                                authorizedGrantType: oauth.authorizedGrantType,\n                                roleIds: oauthInstall.roles.map(\n                                        (roleName) => installedData.role[roleName].id)\n                                    .filter(g => g != undefined)\n                            }\n                        )\n                        .then(() => {\n                            resolve();\n                        })\n                        .catch((e) => reject(e));\n                    }\n                })\n                .catch(e => {\n                    clearInterval(timer);\n\n                    console.error(e);\n                });\n            }, 3000);\n        });\n\n        promiseArr.push(promise);\n    });\n\n    return Promise.all(promiseArr);\n}", "id": "2b0847a00930544e5c15969b5688b7353426b0973e1db779edaaae62dc1fc0ad"}
{"identifier": "remove", "parameters": {"logFunc": null}, "return_type": "<not_specific>", "repo": "nebojsaradovanovic/nebojsaradovanovic.github.io", "path": "docs/wizard/scripts/modules/data-table.js", "language": "JavaScript", "stars_count": 10.0, "issues_count": 3.0, "forks_count": 27.0, "license": ["MIT"], "hexsha": "b51d10015fbdca946a1a5e9c199ab447177922af", "ext": "js", "size": 3787, "code": "function remove(logFunc){\n    logFunc('Uninstalling Data Tables...');\n    return getExisting()\n        .then(dts => {\n            let del_dataTable = [];\n            if(dts.length > 0){\n                dts.map(dt => dt.id).forEach(dt_id => {\n                    del_dataTable.push(\n                        architectApi.deleteFlowsDatatable(dt_id,{\n                            'force': true\n                        }));\n                });\n            }\n            return Promise.all(del_dataTable);\n        });\n}", "code_tokens": ["function", "remove", "(", "logFunc", ")", "{", "logFunc", "(", "'Uninstalling Data Tables...'", ")", ";", "return", "getExisting", "(", ")", ".", "then", "(", "dts", "=>", "{", "let", "del_dataTable", "=", "[", "]", ";", "if", "(", "dts", ".", "length", ">", "0", ")", "{", "dts", ".", "map", "(", "dt", "=>", "dt", ".", "id", ")", ".", "forEach", "(", "dt_id", "=>", "{", "del_dataTable", ".", "push", "(", "architectApi", ".", "deleteFlowsDatatable", "(", "dt_id", ",", "{", "'force'", ":", "true", "}", ")", ")", ";", "}", ")", ";", "}", "return", "Promise", ".", "all", "(", "del_dataTable", ")", ";", "}", ")", ";", "}"], "original_docstring": "/**\n * Delete all existing data tables\n * @param {Function} logFunc logs any messages\n * @returns {Promise}\n */", "comment": [], "docstring_tokens": ["Delete", "all", "existing", "data", "tables", "@param", "{", "Function", "}", "logFunc", "logs", "any", "messages", "@returns", "{", "Promise", "}"], "docstring": "Delete all existing data tables\n@param {Function} logFunc logs any messages\n@returns {Promise}", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "logFunc", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Delete all existing data tables\n @param {Function} logFunc logs any messages\n @returns {Promise}", "short_docstring_tokens": ["Delete", "all", "existing", "data", "tables", "@param", "{", "Function", "}", "logFunc", "logs", "any", "messages", "@returns", "{", "Promise", "}"], "original_string": "function remove(logFunc){\n    logFunc('Uninstalling Data Tables...');\n\n    return getExisting()\n        .then(dts => {\n            let del_dataTable = [];\n\n            if(dts.length > 0){\n                dts.map(dt => dt.id).forEach(dt_id => {\n                    del_dataTable.push(\n                        architectApi.deleteFlowsDatatable(dt_id,{\n                            'force': true\n                        }));\n                });\n            }\n            \n            return Promise.all(del_dataTable);\n        });\n}", "id": "6dee1e011f9d6c5701595bf6b8aa355bf6a408d4146fd3970e210db6a4a7675f"}
{"identifier": "create", "parameters": {"logFunc": null, "data": null}, "return_type": "<not_specific>", "repo": "nebojsaradovanovic/nebojsaradovanovic.github.io", "path": "docs/wizard/scripts/modules/data-table.js", "language": "JavaScript", "stars_count": 10.0, "issues_count": 3.0, "forks_count": 27.0, "license": ["MIT"], "hexsha": "b51d10015fbdca946a1a5e9c199ab447177922af", "ext": "js", "size": 3787, "code": "function create(logFunc, data){\n    let dataTablePromises = [];\n    let dataTableData = {};\n    data.forEach((dt) => {\n        let dataTableBody = {\n            '$schema': 'http://json-schema.org/draft-04/schema#',\n            'additionalProperties': false,\n            'name': config.prefix + dt.name,\n            'type': 'object',\n            'schema': {\n                '$schema': 'http://json-schema.org/draft-04/schema#',\n                'type': 'object',\n                'additionalProperties': false,\n                'required': ['key']\n            },\n            'description': dt.description\n        };\n        let properties = {\n            'key': {\n                'title': dt.referenceKey,\n                'type': 'string',\n                '$id': '/properties/key',\n                'displayOrder': 0\n            }\n        }\n        dt.customFields.forEach((field, i) => {\n            let tempSchema = {\n                'title': field.name,\n                'type': field.type,\n                '$id': '/properties/' + field.name,\n                'displayOrder': i + 1\n            }\n            if(field.default) tempSchema.default = field.default;\n            properties[field.name] = tempSchema;\n        })\n        dataTableBody.schema['properties'] = properties;\n        dataTablePromises.push(\n            architectApi.postFlowsDatatables(dataTableBody)\n            .then((resdtult) => {\n                logFunc('Created Data Table: ' + dt.name);\n                dataTableData[dt.name] = dt.id;\n            })\n        );\n    });\n    return Promise.all(dataTablePromises)\n    .then(() => dataTableData);\n}", "code_tokens": ["function", "create", "(", "logFunc", ",", "data", ")", "{", "let", "dataTablePromises", "=", "[", "]", ";", "let", "dataTableData", "=", "{", "}", ";", "data", ".", "forEach", "(", "(", "dt", ")", "=>", "{", "let", "dataTableBody", "=", "{", "'$schema'", ":", "'http://json-schema.org/draft-04/schema#'", ",", "'additionalProperties'", ":", "false", ",", "'name'", ":", "config", ".", "prefix", "+", "dt", ".", "name", ",", "'type'", ":", "'object'", ",", "'schema'", ":", "{", "'$schema'", ":", "'http://json-schema.org/draft-04/schema#'", ",", "'type'", ":", "'object'", ",", "'additionalProperties'", ":", "false", ",", "'required'", ":", "[", "'key'", "]", "}", ",", "'description'", ":", "dt", ".", "description", "}", ";", "let", "properties", "=", "{", "'key'", ":", "{", "'title'", ":", "dt", ".", "referenceKey", ",", "'type'", ":", "'string'", ",", "'$id'", ":", "'/properties/key'", ",", "'displayOrder'", ":", "0", "}", "}", "dt", ".", "customFields", ".", "forEach", "(", "(", "field", ",", "i", ")", "=>", "{", "let", "tempSchema", "=", "{", "'title'", ":", "field", ".", "name", ",", "'type'", ":", "field", ".", "type", ",", "'$id'", ":", "'/properties/'", "+", "field", ".", "name", ",", "'displayOrder'", ":", "i", "+", "1", "}", "if", "(", "field", ".", "default", ")", "tempSchema", ".", "default", "=", "field", ".", "default", ";", "properties", "[", "field", ".", "name", "]", "=", "tempSchema", ";", "}", ")", "dataTableBody", ".", "schema", "[", "'properties'", "]", "=", "properties", ";", "dataTablePromises", ".", "push", "(", "architectApi", ".", "postFlowsDatatables", "(", "dataTableBody", ")", ".", "then", "(", "(", "resdtult", ")", "=>", "{", "logFunc", "(", "'Created Data Table: '", "+", "dt", ".", "name", ")", ";", "dataTableData", "[", "dt", ".", "name", "]", "=", "dt", ".", "id", ";", "}", ")", ")", ";", "}", ")", ";", "return", "Promise", ".", "all", "(", "dataTablePromises", ")", ".", "then", "(", "(", ")", "=>", "dataTableData", ")", ";", "}"], "original_docstring": "/**\n * Add Genesys Cloud instances based on installation data\n * @param {Function} logFunc logger for messages\n * @param {Object} data the installation data for this type\n * @returns {Promise.<Object>} were key is the unprefixed name and the values\n *                          is the Genesys Cloud object details of that type.\n */", "comment": ["// Create the data tables", "// Create properties object with reference key", "// Build the custom fields", "// Add default if specified"], "docstring_tokens": ["Add", "Genesys", "Cloud", "instances", "based", "on", "installation", "data", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "data", "the", "installation", "data", "for", "this", "type", "@returns", "{", "Promise", ".", "}", "were", "key", "is", "the", "unprefixed", "name", "and", "the", "values", "is", "the", "Genesys", "Cloud", "object", "details", "of", "that", "type", "."], "docstring": "Add Genesys Cloud instances based on installation data\n@param {Function} logFunc logger for messages\n@param {Object} data the installation data for this type\n@returns {Promise.} were key is the unprefixed name and the values\nis the Genesys Cloud object details of that type.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "logFunc", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "data", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Add Genesys Cloud instances based on installation data\n @param {Function} logFunc logger for messages\n @param {Object} data the installation data for this type\n @returns {Promise.<Object>} were key is the unprefixed name and the values\n                          is the Genesys Cloud object details of that type.", "short_docstring_tokens": ["Add", "Genesys", "Cloud", "instances", "based", "on", "installation", "data", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "data", "the", "installation", "data", "for", "this", "type", "@returns", "{", "Promise", ".", "<Object", ">", "}", "were", "key", "is", "the", "unprefixed", "name", "and", "the", "values", "is", "the", "Genesys", "Cloud", "object", "details", "of", "that", "type", "."], "original_string": "function create(logFunc, data){\n    let dataTablePromises = [];\n    let dataTableData = {};\n\n    // Create the data tables\n    data.forEach((dt) => {\n        let dataTableBody = {\n            '$schema': 'http://json-schema.org/draft-04/schema#',\n            'additionalProperties': false,\n            'name': config.prefix + dt.name,\n            'type': 'object',\n            'schema': {\n                '$schema': 'http://json-schema.org/draft-04/schema#',\n                'type': 'object',\n                'additionalProperties': false,\n                'required': ['key']\n            },\n            'description': dt.description\n        };\n\n        // Create properties object with reference key\n        let properties = {\n            'key': {\n                'title': dt.referenceKey,\n                'type': 'string',\n                '$id': '/properties/key',\n                'displayOrder': 0\n            }\n        }\n\n        // Build the custom fields\n        dt.customFields.forEach((field, i) => {\n            let tempSchema = {\n                'title': field.name,\n                'type': field.type,\n                '$id': '/properties/' + field.name,\n                'displayOrder': i + 1\n            }\n            // Add default if specified\n            if(field.default) tempSchema.default = field.default;\n\n            properties[field.name] = tempSchema;\n        })\n        dataTableBody.schema['properties'] = properties;\n\n        dataTablePromises.push(\n            architectApi.postFlowsDatatables(dataTableBody)\n            .then((resdtult) => {\n                logFunc('Created Data Table: ' + dt.name);\n                dataTableData[dt.name] = dt.id;\n            })\n        );\n    });\n\n    return Promise.all(dataTablePromises)\n    .then(() => dataTableData);\n}", "id": "b9dc02d482792f7c01722b0d2009446d7de7b777174b22e28f139a3f53c199d0"}
{"identifier": "remove", "parameters": {"logFunc": null}, "return_type": "<not_specific>", "repo": "nebojsaradovanovic/nebojsaradovanovic.github.io", "path": "docs/wizard/scripts/modules/role.js", "language": "JavaScript", "stars_count": 10.0, "issues_count": 3.0, "forks_count": 27.0, "license": ["MIT"], "hexsha": "95092dee8741bd9decf986da34df6aa3c75b979f", "ext": "js", "size": 3147, "code": "function remove(logFunc){\n    logFunc('Uninstalling Roles...');\n    return getExisting()\n    .then(roles => {\n        let del_role = [];\n        if(roles.total > 0){\n            roles.entities.map(r => r.id).forEach(rid => {\n                del_role.push(authorizationApi.deleteAuthorizationRole(rid));\n            });\n        }\n        return Promise.all(del_role);\n    });\n}", "code_tokens": ["function", "remove", "(", "logFunc", ")", "{", "logFunc", "(", "'Uninstalling Roles...'", ")", ";", "return", "getExisting", "(", ")", ".", "then", "(", "roles", "=>", "{", "let", "del_role", "=", "[", "]", ";", "if", "(", "roles", ".", "total", ">", "0", ")", "{", "roles", ".", "entities", ".", "map", "(", "r", "=>", "r", ".", "id", ")", ".", "forEach", "(", "rid", "=>", "{", "del_role", ".", "push", "(", "authorizationApi", ".", "deleteAuthorizationRole", "(", "rid", ")", ")", ";", "}", ")", ";", "}", "return", "Promise", ".", "all", "(", "del_role", ")", ";", "}", ")", ";", "}"], "original_docstring": "/**\n * Delete existing roles from Genesys Cloud\n * @param {Function} logFunc logs any messages\n * @returns {Promise}\n */", "comment": [], "docstring_tokens": ["Delete", "existing", "roles", "from", "Genesys", "Cloud", "@param", "{", "Function", "}", "logFunc", "logs", "any", "messages", "@returns", "{", "Promise", "}"], "docstring": "Delete existing roles from Genesys Cloud\n@param {Function} logFunc logs any messages\n@returns {Promise}", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "logFunc", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Delete existing roles from Genesys Cloud\n @param {Function} logFunc logs any messages\n @returns {Promise}", "short_docstring_tokens": ["Delete", "existing", "roles", "from", "Genesys", "Cloud", "@param", "{", "Function", "}", "logFunc", "logs", "any", "messages", "@returns", "{", "Promise", "}"], "original_string": "function remove(logFunc){\n    logFunc('Uninstalling Roles...');\n\n    return getExisting()\n    .then(roles => {\n        let del_role = [];\n\n        if(roles.total > 0){\n            roles.entities.map(r => r.id).forEach(rid => {\n                del_role.push(authorizationApi.deleteAuthorizationRole(rid));\n            });\n        }\n        \n        return Promise.all(del_role);\n    });\n}", "id": "46898019917ab936f76b0b451b0a2a05f48920b0829909c33cdba19cfccb4527"}
{"identifier": "create", "parameters": {"logFunc": null, "data": null}, "return_type": "<not_specific>", "repo": "nebojsaradovanovic/nebojsaradovanovic.github.io", "path": "docs/wizard/scripts/modules/role.js", "language": "JavaScript", "stars_count": 10.0, "issues_count": 3.0, "forks_count": 27.0, "license": ["MIT"], "hexsha": "95092dee8741bd9decf986da34df6aa3c75b979f", "ext": "js", "size": 3147, "code": "function create(logFunc, data){\n    let rolePromises = [];\n    let roleData = {}; \n    data.forEach((role) => {\n        let roleBody = {\n            name: config.prefix + role.name,\n            description: '',\n            permissionPolicies: role.permissionPolicies\n        };\n        let roleId = null;\n        rolePromises.push(\n            authorizationApi.postAuthorizationRoles(roleBody)\n            .then((data) => {\n                logFunc('Created role: ' + role.name);\n                roleData[role.name] = data;\n            })\n            .catch((err) => console.log(err))\n        );\n    });\n    return Promise.all(rolePromises)\n    .then(() => roleData);\n}", "code_tokens": ["function", "create", "(", "logFunc", ",", "data", ")", "{", "let", "rolePromises", "=", "[", "]", ";", "let", "roleData", "=", "{", "}", ";", "data", ".", "forEach", "(", "(", "role", ")", "=>", "{", "let", "roleBody", "=", "{", "name", ":", "config", ".", "prefix", "+", "role", ".", "name", ",", "description", ":", "''", ",", "permissionPolicies", ":", "role", ".", "permissionPolicies", "}", ";", "let", "roleId", "=", "null", ";", "rolePromises", ".", "push", "(", "authorizationApi", ".", "postAuthorizationRoles", "(", "roleBody", ")", ".", "then", "(", "(", "data", ")", "=>", "{", "logFunc", "(", "'Created role: '", "+", "role", ".", "name", ")", ";", "roleData", "[", "role", ".", "name", "]", "=", "data", ";", "}", ")", ".", "catch", "(", "(", "err", ")", "=>", "console", ".", "log", "(", "err", ")", ")", ")", ";", "}", ")", ";", "return", "Promise", ".", "all", "(", "rolePromises", ")", ".", "then", "(", "(", ")", "=>", "roleData", ")", ";", "}"], "original_docstring": "/**\n * Add Genesys Cloud roles based on installation data\n * @param {Function} logFunc logger for messages\n * @param {Object} data the installation data for this type\n * @returns {Promise.<Object>} were key is the unprefixed name and the values\n *                          is the Genesys Cloud object details of that type.\n */", "comment": ["// Object of \"rolename\": (Role Object)", "// Create the roles", "// Assign role to user"], "docstring_tokens": ["Add", "Genesys", "Cloud", "roles", "based", "on", "installation", "data", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "data", "the", "installation", "data", "for", "this", "type", "@returns", "{", "Promise", ".", "}", "were", "key", "is", "the", "unprefixed", "name", "and", "the", "values", "is", "the", "Genesys", "Cloud", "object", "details", "of", "that", "type", "."], "docstring": "Add Genesys Cloud roles based on installation data\n@param {Function} logFunc logger for messages\n@param {Object} data the installation data for this type\n@returns {Promise.} were key is the unprefixed name and the values\nis the Genesys Cloud object details of that type.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "logFunc", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "data", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Add Genesys Cloud roles based on installation data\n @param {Function} logFunc logger for messages\n @param {Object} data the installation data for this type\n @returns {Promise.<Object>} were key is the unprefixed name and the values\n                          is the Genesys Cloud object details of that type.", "short_docstring_tokens": ["Add", "Genesys", "Cloud", "roles", "based", "on", "installation", "data", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "data", "the", "installation", "data", "for", "this", "type", "@returns", "{", "Promise", ".", "<Object", ">", "}", "were", "key", "is", "the", "unprefixed", "name", "and", "the", "values", "is", "the", "Genesys", "Cloud", "object", "details", "of", "that", "type", "."], "original_string": "function create(logFunc, data){\n    let rolePromises = [];\n    let roleData = {}; // Object of \"rolename\": (Role Object)\n\n    // Create the roles\n    data.forEach((role) => {\n        let roleBody = {\n            name: config.prefix + role.name,\n            description: '',\n            permissionPolicies: role.permissionPolicies\n        };\n\n        // Assign role to user\n        let roleId = null;\n        rolePromises.push(\n            authorizationApi.postAuthorizationRoles(roleBody)\n            .then((data) => {\n                logFunc('Created role: ' + role.name);\n\n                roleData[role.name] = data;\n            })\n            .catch((err) => console.log(err))\n        );\n    });\n\n    return Promise.all(rolePromises)\n    .then(() => roleData);\n}", "id": "2b9deddd4108b23f033de84e284f60ec39e1ccaeb7e332c07949d945172bb091"}
{"identifier": "configure", "parameters": {"logFunc": null, "installedData": null, "userId": null}, "return_type": "<not_specific>", "repo": "nebojsaradovanovic/nebojsaradovanovic.github.io", "path": "docs/wizard/scripts/modules/role.js", "language": "JavaScript", "stars_count": 10.0, "issues_count": 3.0, "forks_count": 27.0, "license": ["MIT"], "hexsha": "95092dee8741bd9decf986da34df6aa3c75b979f", "ext": "js", "size": 3147, "code": "function configure(logFunc, installedData, userId){\n    let promiseArr = [];\n    let roleData = installedData.role;\n    Object.keys(roleData).forEach((roleKey) => {\n        promiseArr.push(\n            authorizationApi.putAuthorizationRoleUsersAdd(\n                roleData[roleKey].id, \n                [userId]\n            )\n            .then((data) => {\n                logFunc('Assigned ' + roleData[roleKey].name + ' to user');\n            })\n        );\n    });\n    return Promise.all(promiseArr);\n}", "code_tokens": ["function", "configure", "(", "logFunc", ",", "installedData", ",", "userId", ")", "{", "let", "promiseArr", "=", "[", "]", ";", "let", "roleData", "=", "installedData", ".", "role", ";", "Object", ".", "keys", "(", "roleData", ")", ".", "forEach", "(", "(", "roleKey", ")", "=>", "{", "promiseArr", ".", "push", "(", "authorizationApi", ".", "putAuthorizationRoleUsersAdd", "(", "roleData", "[", "roleKey", "]", ".", "id", ",", "[", "userId", "]", ")", ".", "then", "(", "(", "data", ")", "=>", "{", "logFunc", "(", "'Assigned '", "+", "roleData", "[", "roleKey", "]", ".", "name", "+", "' to user'", ")", ";", "}", ")", ")", ";", "}", ")", ";", "return", "Promise", ".", "all", "(", "promiseArr", ")", ";", "}"], "original_docstring": "/**\n * Further configuration needed by this object\n * Called after eveything has already been installed\n * @param {Function} logFunc logger for messages\n * @param {Object} installedData contains everything that was installed by the wizard\n * @param {String} userId User id if needed\n */", "comment": ["// Assign the role to the user", "// Required before you can assign the role to an Auth Client."], "docstring_tokens": ["Further", "configuration", "needed", "by", "this", "object", "Called", "after", "eveything", "has", "already", "been", "installed", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "installedData", "contains", "everything", "that", "was", "installed", "by", "the", "wizard", "@param", "{", "String", "}", "userId", "User", "id", "if", "needed"], "docstring": "Further configuration needed by this object\nCalled after eveything has already been installed\n@param {Function} logFunc logger for messages\n@param {Object} installedData contains everything that was installed by the wizard\n@param {String} userId User id if needed", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "logFunc", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "installedData", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "userId", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Further configuration needed by this object\n Called after eveything has already been installed\n @param {Function} logFunc logger for messages\n @param {Object} installedData contains everything that was installed by the wizard\n @param {String} userId User id if needed", "short_docstring_tokens": ["Further", "configuration", "needed", "by", "this", "object", "Called", "after", "eveything", "has", "already", "been", "installed", "@param", "{", "Function", "}", "logFunc", "logger", "for", "messages", "@param", "{", "Object", "}", "installedData", "contains", "everything", "that", "was", "installed", "by", "the", "wizard", "@param", "{", "String", "}", "userId", "User", "id", "if", "needed"], "original_string": "function configure(logFunc, installedData, userId){\n    // Assign the role to the user\n    // Required before you can assign the role to an Auth Client.\n    let promiseArr = [];\n    let roleData = installedData.role;\n\n    Object.keys(roleData).forEach((roleKey) => {\n        promiseArr.push(\n            authorizationApi.putAuthorizationRoleUsersAdd(\n                roleData[roleKey].id, \n                [userId]\n            )\n            .then((data) => {\n                logFunc('Assigned ' + roleData[roleKey].name + ' to user');\n            })\n        );\n    });\n    \n    return Promise.all(promiseArr);\n}", "id": "d2a973611b6cde62974f5d72ac5d7d10b77483bfd102d7cc0526473e55d53b9c"}
{"identifier": "strip_gpioCtl", "parameters": {"doors": null}, "return_type": "<not_specific>", "repo": "ctrezevant/doorMan", "path": "Server/server.js", "language": "JavaScript", "stars_count": 2.0, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "33fb9b38071402e24fae7776ab114cfb6370e963", "ext": "js", "size": 9568, "code": "function strip_gpioCtl(doors) {\n    var strippedList = [];\n    for (var i = 0; i < doors.length; i++) {\n        var newDoor = JSON.parse(JSON.stringify(doors[i]));\n        delete newDoor.lift_ctl;\n        delete newDoor.sensor_ctl;\n        strippedList[i] = newDoor;\n    }\n    return strippedList;\n}", "code_tokens": ["function", "strip_gpioCtl", "(", "doors", ")", "{", "var", "strippedList", "=", "[", "]", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "doors", ".", "length", ";", "i", "++", ")", "{", "var", "newDoor", "=", "JSON", ".", "parse", "(", "JSON", ".", "stringify", "(", "doors", "[", "i", "]", ")", ")", ";", "delete", "newDoor", ".", "lift_ctl", ";", "delete", "newDoor", ".", "sensor_ctl", ";", "strippedList", "[", "i", "]", "=", "newDoor", ";", "}", "return", "strippedList", ";", "}"], "original_docstring": "// Creates a copy of the door configuration and strips the GPIO control methods from it, as we do not want to include them in the JSON response.", "comment": [], "docstring_tokens": ["Creates", "a", "copy", "of", "the", "door", "configuration", "and", "strips", "the", "GPIO", "control", "methods", "from", "it", "as", "we", "do", "not", "want", "to", "include", "them", "in", "the", "JSON", "response", "."], "docstring": "Creates a copy of the door configuration and strips the GPIO control methods from it, as we do not want to include them in the JSON response.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "doors", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Creates a copy of the door configuration and strips the GPIO control methods from it, as we do not want to include them in the JSON response.", "short_docstring_tokens": ["Creates", "a", "copy", "of", "the", "door", "configuration", "and", "strips", "the", "GPIO", "control", "methods", "from", "it", "as", "we", "do", "not", "want", "to", "include", "them", "in", "the", "JSON", "response", "."], "original_string": "function strip_gpioCtl(doors) {\n    var strippedList = [];\n    for (var i = 0; i < doors.length; i++) {\n        var newDoor = JSON.parse(JSON.stringify(doors[i]));\n        delete newDoor.lift_ctl;\n        delete newDoor.sensor_ctl;\n        strippedList[i] = newDoor;\n    }\n    return strippedList;\n}", "id": "695bdcc64ccf11813e5e8de4de5ef74de80c7f0d61f2bdbe311d5cd3fce09112"}
{"identifier": "tripCircuit", "parameters": {"id": null, "initialState": null, "bypass": null}, "return_type": "<not_specific>", "repo": "ctrezevant/doorMan", "path": "Server/server.js", "language": "JavaScript", "stars_count": 2.0, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "33fb9b38071402e24fae7776ab114cfb6370e963", "ext": "js", "size": 9568, "code": "function tripCircuit(id, initialState, bypass) {\n    if (CONFIG.DOORS[id].lockout === true)\n        return;\n    if (bypass === true || CONFIG.DOORS[id].sensor_ctl.read() == initialState) {\n        CONFIG.DOORS[id].lift_ctl.write(1); \n        CONFIG.DOORS[id].lift_ctl.write(0); \n        setTimeout(function() {\n            CONFIG.DOORS[id].lift_ctl.write(1);\n        }, CONFIG.RELAY_TRIP_TIME); \n    }\n}", "code_tokens": ["function", "tripCircuit", "(", "id", ",", "initialState", ",", "bypass", ")", "{", "if", "(", "CONFIG", ".", "DOORS", "[", "id", "]", ".", "lockout", "===", "true", ")", "return", ";", "if", "(", "bypass", "===", "true", "||", "CONFIG", ".", "DOORS", "[", "id", "]", ".", "sensor_ctl", ".", "read", "(", ")", "==", "initialState", ")", "{", "CONFIG", ".", "DOORS", "[", "id", "]", ".", "lift_ctl", ".", "write", "(", "1", ")", ";", "CONFIG", ".", "DOORS", "[", "id", "]", ".", "lift_ctl", ".", "write", "(", "0", ")", ";", "setTimeout", "(", "function", "(", ")", "{", "CONFIG", ".", "DOORS", "[", "id", "]", ".", "lift_ctl", ".", "write", "(", "1", ")", ";", "}", ",", "CONFIG", ".", "RELAY_TRIP_TIME", ")", ";", "}", "}"], "original_docstring": "// \tbypass - bypass state check (optional)", "comment": ["// Never trip circuit on lockout ", "// Ensure that power is OFF initially.", "// power ON ", "// power OFF again after CONFIG.RELAY_TRIP_TIME"], "docstring_tokens": ["bypass", "state", "check", "(", "optional", ")"], "docstring": "bypass state check (optional)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "id", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "initialState", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "bypass", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "bypass - bypass state check (optional)", "short_docstring_tokens": ["bypass", "-", "bypass", "state", "check", "(", "optional", ")"], "original_string": "function tripCircuit(id, initialState, bypass) {\n\n    // Never trip circuit on lockout \n    if (CONFIG.DOORS[id].lockout === true)\n        return;\n\n    if (bypass === true || CONFIG.DOORS[id].sensor_ctl.read() == initialState) {\n\n        CONFIG.DOORS[id].lift_ctl.write(1); // Ensure that power is OFF initially.\n\n        CONFIG.DOORS[id].lift_ctl.write(0); // power ON \n\n        setTimeout(function() {\n            CONFIG.DOORS[id].lift_ctl.write(1);\n        }, CONFIG.RELAY_TRIP_TIME); // power OFF again after CONFIG.RELAY_TRIP_TIME\n    }\n}", "id": "cc51a0f15976c443891ba6b10b52882d565a08b599918f8ee4ef6d11d7e2fb60"}
{"identifier": "burgers", "parameters": {"callBack": null}, "return_type": null, "repo": "MelindaHasselbring/boilerPlate", "path": "models/burger.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "91f0dc523e014edbe935230753af551e506dfe08", "ext": "js", "size": 1415, "code": "function burgers(callBack) {\n    var object = {};\n    uneatenBurgers(function(data) {\n        object.uneaten = data;\n        eatenBurgers(function(data) {\n            object.eaten = data;\n            callBack(object);\n        });\n    });\n}", "code_tokens": ["function", "burgers", "(", "callBack", ")", "{", "var", "object", "=", "{", "}", ";", "uneatenBurgers", "(", "function", "(", "data", ")", "{", "object", ".", "uneaten", "=", "data", ";", "eatenBurgers", "(", "function", "(", "data", ")", "{", "object", ".", "eaten", "=", "data", ";", "callBack", "(", "object", ")", ";", "}", ")", ";", "}", ")", ";", "}"], "original_docstring": "// get all the burgers -- an object is returned with uneaten and eaten burgers", "comment": [], "docstring_tokens": ["get", "all", "the", "burgers", "--", "an", "object", "is", "returned", "with", "uneaten", "and", "eaten", "burgers"], "docstring": "get all the burgers -- an object is returned with uneaten and eaten burgers", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "callBack", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "get all the burgers -- an object is returned with uneaten and eaten burgers", "short_docstring_tokens": ["get", "all", "the", "burgers", "--", "an", "object", "is", "returned", "with", "uneaten", "and", "eaten", "burgers"], "original_string": "function burgers(callBack) {\n    var object = {};\n    uneatenBurgers(function(data) {\n        object.uneaten = data;\n        eatenBurgers(function(data) {\n            object.eaten = data;\n            callBack(object);\n        });\n    });\n}", "id": "78988d2cb6106f8efed44f769734d456e52502d074c6c74719bbea9fc5b5f57c"}
{"identifier": "uneatenBurgers", "parameters": {"callBack": null}, "return_type": null, "repo": "MelindaHasselbring/boilerPlate", "path": "models/burger.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "91f0dc523e014edbe935230753af551e506dfe08", "ext": "js", "size": 1415, "code": "function uneatenBurgers(callBack) {\n    orm.selectScoped('burgers', 'devoured', 'false', function(data) {\n        callBack(data);\n    });\n}", "code_tokens": ["function", "uneatenBurgers", "(", "callBack", ")", "{", "orm", ".", "selectScoped", "(", "'burgers'", ",", "'devoured'", ",", "'false'", ",", "function", "(", "data", ")", "{", "callBack", "(", "data", ")", ";", "}", ")", ";", "}"], "original_docstring": "// query the database for uneaten burgers", "comment": [], "docstring_tokens": ["query", "the", "database", "for", "uneaten", "burgers"], "docstring": "query the database for uneaten burgers", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "callBack", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "query the database for uneaten burgers", "short_docstring_tokens": ["query", "the", "database", "for", "uneaten", "burgers"], "original_string": "function uneatenBurgers(callBack) {\n    orm.selectScoped('burgers', 'devoured', 'false', function(data) {\n        callBack(data);\n    });\n}", "id": "e4161e9600218c2c7ed67e0bedbe8e7b6225020447f47018710783eade9d3556"}
{"identifier": "eatenBurgers", "parameters": {"callBack": null}, "return_type": null, "repo": "MelindaHasselbring/boilerPlate", "path": "models/burger.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "91f0dc523e014edbe935230753af551e506dfe08", "ext": "js", "size": 1415, "code": "function eatenBurgers(callBack) {\n    orm.selectScoped('burgers', 'devoured', 'true', function(data) {\n        callBack(data);\n    });\n}", "code_tokens": ["function", "eatenBurgers", "(", "callBack", ")", "{", "orm", ".", "selectScoped", "(", "'burgers'", ",", "'devoured'", ",", "'true'", ",", "function", "(", "data", ")", "{", "callBack", "(", "data", ")", ";", "}", ")", ";", "}"], "original_docstring": "// query the database for eaten burgers", "comment": [], "docstring_tokens": ["query", "the", "database", "for", "eaten", "burgers"], "docstring": "query the database for eaten burgers", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "callBack", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "query the database for eaten burgers", "short_docstring_tokens": ["query", "the", "database", "for", "eaten", "burgers"], "original_string": "function eatenBurgers(callBack) {\n    orm.selectScoped('burgers', 'devoured', 'true', function(data) {\n        callBack(data);\n    });\n}", "id": "dd653b8d05f2f1a6dbe958808170533a7e0f82994a88fa123c5b240ee03f32fa"}
{"identifier": "singleBurger", "parameters": {"burger": null, "callBack": null}, "return_type": null, "repo": "MelindaHasselbring/boilerPlate", "path": "models/burger.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "91f0dc523e014edbe935230753af551e506dfe08", "ext": "js", "size": 1415, "code": "function singleBurger(burger, callBack) {\n    orm.selectOne('burgers', burger, function(data) {\n        callBack(data);\n    });\n}", "code_tokens": ["function", "singleBurger", "(", "burger", ",", "callBack", ")", "{", "orm", ".", "selectOne", "(", "'burgers'", ",", "burger", ",", "function", "(", "data", ")", "{", "callBack", "(", "data", ")", ";", "}", ")", ";", "}"], "original_docstring": "// query the database for single burger", "comment": [], "docstring_tokens": ["query", "the", "database", "for", "single", "burger"], "docstring": "query the database for single burger", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "burger", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "callBack", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "query the database for single burger", "short_docstring_tokens": ["query", "the", "database", "for", "single", "burger"], "original_string": "function singleBurger(burger, callBack) {\n    orm.selectOne('burgers', burger, function(data) {\n        callBack(data);\n    });\n}", "id": "0708bfec4c33cd84a2ded49814605a8c7c21eac01940551bbe053720bd162709"}
{"identifier": "create", "parameters": {"burger": null, "callBack": null}, "return_type": null, "repo": "MelindaHasselbring/boilerPlate", "path": "models/burger.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "91f0dc523e014edbe935230753af551e506dfe08", "ext": "js", "size": 1415, "code": "function create(burger, callBack) {\n    orm.insertOne('burgers', 'burger_name', burger, function() {\n        callBack();\n    });\n}", "code_tokens": ["function", "create", "(", "burger", ",", "callBack", ")", "{", "orm", ".", "insertOne", "(", "'burgers'", ",", "'burger_name'", ",", "burger", ",", "function", "(", ")", "{", "callBack", "(", ")", ";", "}", ")", ";", "}"], "original_docstring": "// query the database to create a burger", "comment": [], "docstring_tokens": ["query", "the", "database", "to", "create", "a", "burger"], "docstring": "query the database to create a burger", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "burger", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "callBack", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "query the database to create a burger", "short_docstring_tokens": ["query", "the", "database", "to", "create", "a", "burger"], "original_string": "function create(burger, callBack) {\n    orm.insertOne('burgers', 'burger_name', burger, function() {\n        callBack();\n    });\n}", "id": "99d10bad5efc730294f5dfebb95c7b2b3f375166e54c62299f43fb41c84e63dc"}
{"identifier": "update", "parameters": {"burger": null, "callBack": null}, "return_type": null, "repo": "MelindaHasselbring/boilerPlate", "path": "models/burger.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "91f0dc523e014edbe935230753af551e506dfe08", "ext": "js", "size": 1415, "code": "function update(burger, callBack) {\n    orm.updateOne('burgers', 'devoured', true, burger, function() {\n        callBack();\n    });\n}", "code_tokens": ["function", "update", "(", "burger", ",", "callBack", ")", "{", "orm", ".", "updateOne", "(", "'burgers'", ",", "'devoured'", ",", "true", ",", "burger", ",", "function", "(", ")", "{", "callBack", "(", ")", ";", "}", ")", ";", "}"], "original_docstring": "// query the database to update a burger", "comment": [], "docstring_tokens": ["query", "the", "database", "to", "update", "a", "burger"], "docstring": "query the database to update a burger", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "burger", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "callBack", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "query the database to update a burger", "short_docstring_tokens": ["query", "the", "database", "to", "update", "a", "burger"], "original_string": "function update(burger, callBack) {\n    orm.updateOne('burgers', 'devoured', true, burger, function() {\n        callBack();\n    });\n}", "id": "40250679b7a3fa661d764c4984ef17832e77f8599cab035bf807ebac7222110b"}
{"identifier": "sumArgs", "parameters": {"x": null, "y": null}, "return_type": null, "repo": "RakeshVenkat/Javascript", "path": "MasterJavascript/main1.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "427b4c54b17bb9bfc87eabf4d37a8ba62ad173dc", "ext": "js", "size": 9754, "code": "function sumArgs(x, y) {\n\tconsole.log(arguments);\n\tconst args = [ ...arguments ];\n\tconsole.log(args);\n\tconsole.log(arguments[0]); \n\tconsole.log(x, y); \n}", "code_tokens": ["function", "sumArgs", "(", "x", ",", "y", ")", "{", "console", ".", "log", "(", "arguments", ")", ";", "const", "args", "=", "[", "...", "arguments", "]", ";", "console", ".", "log", "(", "args", ")", ";", "console", ".", "log", "(", "arguments", "[", "0", "]", ")", ";", "console", ".", "log", "(", "x", ",", "y", ")", ";", "}"], "original_docstring": "// Note: When you pass other arguments as well, the arguments array will also contain those params", "comment": ["// return arguments.array.forEach(element => { });", "// Uncaught TypeError: Cannot read property 'forEach' of undefined", "// Its an array l;ike object", "// [2, 3, 4, 5, 6, 67] // x=2, y=3, rest are argumants", "// 2 // is also 2", "// 2,3"], "docstring_tokens": ["When", "you", "pass", "other", "arguments", "as", "well", "the", "arguments", "array", "will", "also", "contain", "those", "params"], "docstring": "When you pass other arguments as well, the arguments array will also contain those params", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "x", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "y", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Note: When you pass other arguments as well, the arguments array will also contain those params", "short_docstring_tokens": ["Note", ":", "When", "you", "pass", "other", "arguments", "as", "well", "the", "arguments", "array", "will", "also", "contain", "those", "params"], "original_string": "function sumArgs(x, y) {\n\tconsole.log(arguments);\n\t// return arguments.array.forEach(element => { });\n\t// Uncaught TypeError: Cannot read property 'forEach' of undefined\n\t// Its an array l;ike object\n\tconst args = [ ...arguments ];\n\tconsole.log(args);\n\t// [2, 3, 4, 5, 6, 67] // x=2, y=3, rest are argumants\n\tconsole.log(arguments[0]); // 2 // is also 2\n\tconsole.log(x, y); // 2,3\n}", "id": "86866db520f348824b473322162e4272a06d812f6b1bd6b9789bc9f4c63eb6c4"}
{"identifier": "addNewProp", "parameters": {"obj": null, "k": null, "v": null}, "return_type": "<not_specific>", "repo": "RakeshVenkat/Javascript", "path": "MasterJavascript/main1.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "427b4c54b17bb9bfc87eabf4d37a8ba62ad173dc", "ext": "js", "size": 9754, "code": "function addNewProp(obj, k, v) {\n\tlet copy = { ...obj };\n\tcopy[k] = v;\n\treturn copy;\n}", "code_tokens": ["function", "addNewProp", "(", "obj", ",", "k", ",", "v", ")", "{", "let", "copy", "=", "{", "...", "obj", "}", ";", "copy", "[", "k", "]", "=", "v", ";", "return", "copy", ";", "}"], "original_docstring": "// Create a new object with a new prop being added", "comment": [], "docstring_tokens": ["Create", "a", "new", "object", "with", "a", "new", "prop", "being", "added"], "docstring": "Create a new object with a new prop being added", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "obj", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "k", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "v", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Create a new object with a new prop being added", "short_docstring_tokens": ["Create", "a", "new", "object", "with", "a", "new", "prop", "being", "added"], "original_string": "function addNewProp(obj, k, v) {\n\tlet copy = { ...obj };\n\tcopy[k] = v;\n\treturn copy;\n}", "id": "3134cfc7d071e177b0b6ba6cc610026a2ab89246c1979ad36f6817286c90c56b"}
{"identifier": "multiplyBy", "parameters": {"num": null}, "return_type": "<not_specific>", "repo": "RakeshVenkat/Javascript", "path": "MasterJavascript/main.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "47454a9b78eb20429de5395104081a57d2124323", "ext": "js", "size": 29728, "code": "function multiplyBy(num) {\n\treturn function(x) {\n\t\treturn x * num;\n\t};\n}", "code_tokens": ["function", "multiplyBy", "(", "num", ")", "{", "return", "function", "(", "x", ")", "{", "return", "x", "*", "num", ";", "}", ";", "}"], "original_docstring": "// Creates a function : Factory for fucntion creation", "comment": [], "docstring_tokens": ["Creates", "a", "function", ":", "Factory", "for", "fucntion", "creation"], "docstring": "Creates a function : Factory for fucntion creation", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "num", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Creates a function : Factory for fucntion creation", "short_docstring_tokens": ["Creates", "a", "function", ":", "Factory", "for", "fucntion", "creation"], "original_string": "function multiplyBy(num) {\n\treturn function(x) {\n\t\treturn x * num;\n\t};\n}", "id": "b16889a76667858faa9a2b97e48bf8b1968bbfdd43c386841e159e1701de7ffe"}
{"identifier": "mainOnObject", "parameters": {}, "return_type": null, "repo": "kundan-pratap-singh/adapter-change_management", "path": "lab04.main.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "dd621f40b887d767ae2436a485d30a7a6ee81ab0", "ext": "js", "size": 1095, "code": "function mainOnObject() {\n  const connector = new ServiceNowConnector(options);\n  connector.get(callback);\n  connector.post(callback);\n}", "code_tokens": ["function", "mainOnObject", "(", ")", "{", "const", "connector", "=", "new", "ServiceNowConnector", "(", "options", ")", ";", "connector", ".", "get", "(", "callback", ")", ";", "connector", ".", "post", "(", "callback", ")", ";", "}"], "original_docstring": "/**\r\n * @function mainOnObject\r\n * @description Instantiates an object from the imported ServiceNowConnector class\r\n *   and tests the object's get and post methods.\r\n */", "comment": ["// Instantiate an object from class ServiceNowConnector.\r", "// Test the object's get and post methods.\r", "// You must write the arguments for get and post.\r"], "docstring_tokens": ["@function", "mainOnObject", "@description", "Instantiates", "an", "object", "from", "the", "imported", "ServiceNowConnector", "class", "and", "tests", "the", "object", "'", "s", "get", "and", "post", "methods", "."], "docstring": "@function mainOnObject\n@description Instantiates an object from the imported ServiceNowConnector class\nand tests the object's get and post methods.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "@function mainOnObject\n @description Instantiates an object from the imported ServiceNowConnector class\n   and tests the object's get and post methods.", "short_docstring_tokens": ["@function", "mainOnObject", "@description", "Instantiates", "an", "object", "from", "the", "imported", "ServiceNowConnector", "class", "and", "tests", "the", "object", "'", "s", "get", "and", "post", "methods", "."], "original_string": "function mainOnObject() {\r\n  // Instantiate an object from class ServiceNowConnector.\r\n  const connector = new ServiceNowConnector(options);\r\n  // Test the object's get and post methods.\r\n  // You must write the arguments for get and post.\r\n  connector.get(callback);\r\n  connector.post(callback);\r\n\r\n}", "id": "1d98107a820f32a99c254079e750133becf13e70f832054c9e7adcad5435875d"}
{"identifier": "updateElemntLists", "parameters": {"shapesList": null, "lightsList": null}, "return_type": null, "repo": "jkmosa01/TSA-Software-2018", "path": "helperScripts/UI_helper_scripts/UI_controller.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "f9a17b7eaafc44a90c4947f6ee9eaf072e7aed1d", "ext": "js", "size": 2032, "code": "function updateElemntLists(shapesList, lightsList){\n    var shapesMasterList; \n    var lightsMasterList; \n    if(shapesList.length !== 0){\n        for(var i = 0; i < shapesList.length; i++){\n        }\n    }\n    if(lightsList.length !== 0){\n        for(var i =0; i<lightsList.length; i++){\n        }\n    }\n}", "code_tokens": ["function", "updateElemntLists", "(", "shapesList", ",", "lightsList", ")", "{", "var", "shapesMasterList", ";", "var", "lightsMasterList", ";", "if", "(", "shapesList", ".", "length", "!==", "0", ")", "{", "for", "(", "var", "i", "=", "0", ";", "i", "<", "shapesList", ".", "length", ";", "i", "++", ")", "{", "}", "}", "if", "(", "lightsList", ".", "length", "!==", "0", ")", "{", "for", "(", "var", "i", "=", "0", ";", "i", "<", "lightsList", ".", "length", ";", "i", "++", ")", "{", "}", "}", "}"], "original_docstring": "/**\n * When the user adds an element show that element on the UI\n * @param shapesList array of shapes that are being displayed\n * @param lightsList array of lights that are being displayed\n */", "comment": ["//the list that the user interacts with for shapes", "//the list of lights that the user interacts with", "//update the list of elements", "//update the list of elements"], "docstring_tokens": ["When", "the", "user", "adds", "an", "element", "show", "that", "element", "on", "the", "UI", "@param", "shapesList", "array", "of", "shapes", "that", "are", "being", "displayed", "@param", "lightsList", "array", "of", "lights", "that", "are", "being", "displayed"], "docstring": "When the user adds an element show that element on the UI\n@param shapesList array of shapes that are being displayed\n@param lightsList array of lights that are being displayed", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "shapesList", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "lightsList", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "When the user adds an element show that element on the UI\n @param shapesList array of shapes that are being displayed\n @param lightsList array of lights that are being displayed", "short_docstring_tokens": ["When", "the", "user", "adds", "an", "element", "show", "that", "element", "on", "the", "UI", "@param", "shapesList", "array", "of", "shapes", "that", "are", "being", "displayed", "@param", "lightsList", "array", "of", "lights", "that", "are", "being", "displayed"], "original_string": "function updateElemntLists(shapesList, lightsList){\n    var shapesMasterList; //the list that the user interacts with for shapes\n    var lightsMasterList; //the list of lights that the user interacts with\n    if(shapesList.length !== 0){\n        for(var i = 0; i < shapesList.length; i++){\n            //update the list of elements\n        }\n    }\n    if(lightsList.length !== 0){\n        for(var i =0; i<lightsList.length; i++){\n            //update the list of elements\n        }\n    }\n}", "id": "d2434460390d0c0bcd5f52bc0593d64091a6afa52d6fa610cb85ae367ebb4ded"}
{"identifier": "initMainUI", "parameters": {}, "return_type": null, "repo": "jkmosa01/TSA-Software-2018", "path": "helperScripts/UI_helper_scripts/newStyle.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "5d122cc576f76f11263dcfc44657e56e7b451ab5", "ext": "js", "size": 13965, "code": "async function initMainUI(){\n    if(!document.querySelector(\"body\").requestFullscreen()){\n    }\n    document.getElementById(\"std_ws_container\").classList.add(\"ws_hide\");\n    document.getElementById(\"ws_body\").classList.add(\"ws_hide\");\n    UISpacer();\n    await new Promise(resolve => setTimeout(resolve, 2250));\n    for (let el of document.querySelectorAll('#std_ws_container')) el.hidden = true;\n    for (let el of document.querySelectorAll('#ws_body')) el.hidden = true;\n}", "code_tokens": ["async", "function", "initMainUI", "(", ")", "{", "if", "(", "!", "document", ".", "querySelector", "(", "\"body\"", ")", ".", "requestFullscreen", "(", ")", ")", "{", "}", "document", ".", "getElementById", "(", "\"std_ws_container\"", ")", ".", "classList", ".", "add", "(", "\"ws_hide\"", ")", ";", "document", ".", "getElementById", "(", "\"ws_body\"", ")", ".", "classList", ".", "add", "(", "\"ws_hide\"", ")", ";", "UISpacer", "(", ")", ";", "await", "new", "Promise", "(", "resolve", "=>", "setTimeout", "(", "resolve", ",", "2250", ")", ")", ";", "for", "(", "let", "el", "of", "document", ".", "querySelectorAll", "(", "'#std_ws_container'", ")", ")", "el", ".", "hidden", "=", "true", ";", "for", "(", "let", "el", "of", "document", ".", "querySelectorAll", "(", "'#ws_body'", ")", ")", "el", ".", "hidden", "=", "true", ";", "}"], "original_docstring": "/*\n* Adds class to hide the welcome screen in a cool animation\n* After it does that is starts all of the needed functions for the program.\n* */", "comment": ["//do something if we are unable to enter full screen mode", "/*document.querySelector(\"body\").requestFullscreen();*/"], "docstring_tokens": ["Adds", "class", "to", "hide", "the", "welcome", "screen", "in", "a", "cool", "animation", "After", "it", "does", "that", "is", "starts", "all", "of", "the", "needed", "functions", "for", "the", "program", "."], "docstring": "Adds class to hide the welcome screen in a cool animation\nAfter it does that is starts all of the needed functions for the program.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Adds class to hide the welcome screen in a cool animation\nAfter it does that is starts all of the needed functions for the program.", "short_docstring_tokens": ["Adds", "class", "to", "hide", "the", "welcome", "screen", "in", "a", "cool", "animation", "After", "it", "does", "that", "is", "starts", "all", "of", "the", "needed", "functions", "for", "the", "program", "."], "original_string": "async function initMainUI(){\n    if(!document.querySelector(\"body\").requestFullscreen()){\n        //do something if we are unable to enter full screen mode\n        /*document.querySelector(\"body\").requestFullscreen();*/\n    }\n    document.getElementById(\"std_ws_container\").classList.add(\"ws_hide\");\n    document.getElementById(\"ws_body\").classList.add(\"ws_hide\");\n    UISpacer();\n    await new Promise(resolve => setTimeout(resolve, 2250));\n    for (let el of document.querySelectorAll('#std_ws_container')) el.hidden = true;\n    for (let el of document.querySelectorAll('#ws_body')) el.hidden = true;\n}", "id": "a2cb00ff8b4f0c92ccafc108c005289f8d6caf5c235ad1df044429a3d4688f68"}
{"identifier": "loadSaveNames", "parameters": {}, "return_type": null, "repo": "jkmosa01/TSA-Software-2018", "path": "helperScripts/UI_helper_scripts/newStyle.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "5d122cc576f76f11263dcfc44657e56e7b451ab5", "ext": "js", "size": 13965, "code": "function loadSaveNames() {\n    var loadSelector = document.getElementById(\"ws_loadMenu\");\n    var options = [\"3\",\"32\", \"fdghjkl\", \"fghytfvbnm\", \"BULL\"];\n    var opt;\n    for (var i = 0; i < options.length; i++) {\n        opt = options[i];\n        loadSelector.innerHTML += \" <option onclick=\\'saveSubSystem.setSaveToLoad = (\\\" \" + opt + \" \\\"); initMainUI();\\' > \" + opt + \"</option>\";\n    }\n}", "code_tokens": ["function", "loadSaveNames", "(", ")", "{", "var", "loadSelector", "=", "document", ".", "getElementById", "(", "\"ws_loadMenu\"", ")", ";", "var", "options", "=", "[", "\"3\"", ",", "\"32\"", ",", "\"fdghjkl\"", ",", "\"fghytfvbnm\"", ",", "\"BULL\"", "]", ";", "var", "opt", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "options", ".", "length", ";", "i", "++", ")", "{", "opt", "=", "options", "[", "i", "]", ";", "loadSelector", ".", "innerHTML", "+=", "\" <option onclick=\\'saveSubSystem.setSaveToLoad = (\\\" \"", "+", "opt", "+", "\" \\\"); initMainUI();\\' > \"", "+", "opt", "+", "\"</option>\"", ";", "}", "}"], "original_docstring": "/*\n* Pseudo function for populating list with save names\n* Need to tie in with saveSubSystem\n* */", "comment": ["// Populate list with options"], "docstring_tokens": ["Pseudo", "function", "for", "populating", "list", "with", "save", "names", "Need", "to", "tie", "in", "with", "saveSubSystem"], "docstring": "Pseudo function for populating list with save names\nNeed to tie in with saveSubSystem", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Pseudo function for populating list with save names\nNeed to tie in with saveSubSystem", "short_docstring_tokens": ["Pseudo", "function", "for", "populating", "list", "with", "save", "names", "Need", "to", "tie", "in", "with", "saveSubSystem"], "original_string": "function loadSaveNames() {\n    var loadSelector = document.getElementById(\"ws_loadMenu\");\n    var options = [\"3\",\"32\", \"fdghjkl\", \"fghytfvbnm\", \"BULL\"];\n// Populate list with options\n    var opt;\n    for (var i = 0; i < options.length; i++) {\n        opt = options[i];\n        loadSelector.innerHTML += \" <option onclick=\\'saveSubSystem.setSaveToLoad = (\\\" \" + opt + \" \\\"); initMainUI();\\' > \" + opt + \"</option>\";\n    }\n}", "id": "271a549fc1fffa2d9e303c38df3ccb9163144f5e329fa7c4914d03dc6a19da4c"}
{"identifier": "loop", "parameters": {}, "return_type": null, "repo": "jkmosa01/TSA-Software-2018", "path": "old/keyframes.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "fa8d929645107ceeee3312f0246db9937eacd4b6", "ext": "js", "size": 25610, "code": "function loop(){\n    if(animationRunning){\n        loopAnimation = false;\n    }\n    else{\n        loopAnimation = true;\n        playAnimation(0);\n    }\n}", "code_tokens": ["function", "loop", "(", ")", "{", "if", "(", "animationRunning", ")", "{", "loopAnimation", "=", "false", ";", "}", "else", "{", "loopAnimation", "=", "true", ";", "playAnimation", "(", "0", ")", ";", "}", "}"], "original_docstring": "//determines whether ot not to repeat the animation", "comment": [], "docstring_tokens": ["determines", "whether", "ot", "not", "to", "repeat", "the", "animation"], "docstring": "determines whether ot not to repeat the animation", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "determines whether ot not to repeat the animation", "short_docstring_tokens": ["determines", "whether", "ot", "not", "to", "repeat", "the", "animation"], "original_string": "function loop(){\n    if(animationRunning){\n        loopAnimation = false;\n    }\n    else{\n        loopAnimation = true;\n        playAnimation(0);\n    }\n}", "id": "f497e9f3a04884a0780a84487180d02bfa1aedd9828ad097bf450f6e4bc6c2c0"}
{"identifier": "loadKeyList", "parameters": {}, "return_type": null, "repo": "jkmosa01/TSA-Software-2018", "path": "old/keyframes.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "fa8d929645107ceeee3312f0246db9937eacd4b6", "ext": "js", "size": 25610, "code": "function loadKeyList(){\n    document.getElementById('keyList').innerHTML = \"\";\n    for(var i=0; i<keyFrames.length-1; i++){\n        var add = \"\";\n        if(i!==0){\n            add = `<button class=\"material-icons\" onclick=\"moveUp(`+i+`)\">arrow_upward</button>`\n        }\n        document.getElementById('keyList').innerHTML+=`<input type=\"text\" value=\"`+keyFrames[i].name+`\" onkeyup=\"keyName(this.value,`+i+`)\" onchange=\"keyName(this.value,`+i+`)\">\n<button class='material-icons' onclick='removeFrame(`+i+`)'>close</button>\n`+add+`\n<button class=\"material-icons\" onclick=\"moveDown(`+i+`)\">arrow_downward</button>\n<br>\n<input type='number' value='`+keyFrames[i].duration+`' onchange='setSpeed(`+i+`,Number(this.value))' onkeyup='setSpeed(`+i+`,Number(this.value))' style='width: 50px;'>milliseconds\n<br>`;\n    }\n    if (keyFrames.length!==0){\n        var add = \"\";\n        if(keyFrames.length!==1){\n            add = `<button class=\"material-icons\" onclick=\"moveUp(`+(keyFrames.length - 1)+`)\">arrow_upward</button>`\n        }\n        document.getElementById('keyList').innerHTML += `<input type=\"text\" value=\"`+keyFrames[i].name+`\" onkeyup=\"keyName(this.value,`+(keyFrames.length - 1)+`)\" onchange=\"keyName(this.value,`+(keyFrames.length - 1)+`)\"><button class='material-icons' onclick='removeFrame(` + (keyFrames.length - 1) + `)'>close</button>\n`+add+`<br>`;\n    }\n}", "code_tokens": ["function", "loadKeyList", "(", ")", "{", "document", ".", "getElementById", "(", "'keyList'", ")", ".", "innerHTML", "=", "\"\"", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "keyFrames", ".", "length", "-", "1", ";", "i", "++", ")", "{", "var", "add", "=", "\"\"", ";", "if", "(", "i", "!==", "0", ")", "{", "add", "=", "`", "`", "+", "i", "+", "`", "`", "}", "document", ".", "getElementById", "(", "'keyList'", ")", ".", "innerHTML", "+=", "`", "`", "+", "keyFrames", "[", "i", "]", ".", "name", "+", "`", "`", "+", "i", "+", "`", "`", "+", "i", "+", "`", "`", "+", "i", "+", "`", "`", "+", "add", "+", "`", "`", "+", "i", "+", "`", "`", "+", "keyFrames", "[", "i", "]", ".", "duration", "+", "`", "`", "+", "i", "+", "`", "`", "+", "i", "+", "`", "`", ";", "}", "if", "(", "keyFrames", ".", "length", "!==", "0", ")", "{", "var", "add", "=", "\"\"", ";", "if", "(", "keyFrames", ".", "length", "!==", "1", ")", "{", "add", "=", "`", "`", "+", "(", "keyFrames", ".", "length", "-", "1", ")", "+", "`", "`", "}", "document", ".", "getElementById", "(", "'keyList'", ")", ".", "innerHTML", "+=", "`", "`", "+", "keyFrames", "[", "i", "]", ".", "name", "+", "`", "`", "+", "(", "keyFrames", ".", "length", "-", "1", ")", "+", "`", "`", "+", "(", "keyFrames", ".", "length", "-", "1", ")", "+", "`", "`", "+", "(", "keyFrames", ".", "length", "-", "1", ")", "+", "`", "`", "+", "add", "+", "`", "`", ";", "}", "}"], "original_docstring": "//creates all of the buttons that will set the keyframes. create or remove keyframe, move them, set the speed, etc:", "comment": ["//creates the add keyframe button when a new keyframe is added"], "docstring_tokens": ["creates", "all", "of", "the", "buttons", "that", "will", "set", "the", "keyframes", ".", "create", "or", "remove", "keyframe", "move", "them", "set", "the", "speed", "etc", "."], "docstring": "creates all of the buttons that will set the keyframes. create or remove keyframe, move them, set the speed, etc.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "creates all of the buttons that will set the keyframes.", "short_docstring_tokens": ["creates", "all", "of", "the", "buttons", "that", "will", "set", "the", "keyframes", "."], "original_string": "function loadKeyList(){\n    document.getElementById('keyList').innerHTML = \"\";\n    for(var i=0; i<keyFrames.length-1; i++){\n        var add = \"\";\n        if(i!==0){\n            add = `<button class=\"material-icons\" onclick=\"moveUp(`+i+`)\">arrow_upward</button>`\n        }\n        document.getElementById('keyList').innerHTML+=`<input type=\"text\" value=\"`+keyFrames[i].name+`\" onkeyup=\"keyName(this.value,`+i+`)\" onchange=\"keyName(this.value,`+i+`)\">\n<button class='material-icons' onclick='removeFrame(`+i+`)'>close</button>\n`+add+`\n<button class=\"material-icons\" onclick=\"moveDown(`+i+`)\">arrow_downward</button>\n<br>\n<input type='number' value='`+keyFrames[i].duration+`' onchange='setSpeed(`+i+`,Number(this.value))' onkeyup='setSpeed(`+i+`,Number(this.value))' style='width: 50px;'>milliseconds\n<br>`;\n    }\n//creates the add keyframe button when a new keyframe is added\n    if (keyFrames.length!==0){\n        var add = \"\";\n        if(keyFrames.length!==1){\n            add = `<button class=\"material-icons\" onclick=\"moveUp(`+(keyFrames.length - 1)+`)\">arrow_upward</button>`\n        }\n        document.getElementById('keyList').innerHTML += `<input type=\"text\" value=\"`+keyFrames[i].name+`\" onkeyup=\"keyName(this.value,`+(keyFrames.length - 1)+`)\" onchange=\"keyName(this.value,`+(keyFrames.length - 1)+`)\"><button class='material-icons' onclick='removeFrame(` + (keyFrames.length - 1) + `)'>close</button>\n`+add+`<br>`;\n    }\n}", "id": "5d40d0353676522c10bbe197ad732c1becfa5932dcd63b21ba1ca1b216a7e51e"}
{"identifier": "playAnimation", "parameters": {"frameValue": null}, "return_type": null, "repo": "jkmosa01/TSA-Software-2018", "path": "old/keyframes.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "fa8d929645107ceeee3312f0246db9937eacd4b6", "ext": "js", "size": 25610, "code": "function playAnimation(frameValue) {\n    if(!animationRunning) {\n        console.log('starting');\n        animationRunning=true;\n        if (frameValue >= 0) {\n            var frames = 0;\n            var a;\n            var timingCounter;\n            var prevDuration=0;\n            for (var i = 0; i < keyFrames.length - 1; i++) {\n                if (frameValue >= frames && frameValue < frames + keyFrames[i].duration) {\n                    a = i;\n                    break;\n                } else {\n                    frames += keyFrames[i].duration;\n                    prevDuration+=keyFrames[i].duration;\n                }\n            }\n            if (a != null) {\n                timingCounter = frameValue - frames;\n                animationTimer = setInterval(function () {\n                    document.getElementById(\"playhead\").style.left = (11+(timingCounter+prevDuration)/timelineScale)+\"px\";\n                    if (timingCounter < keyFrames[a].duration) {\n                        timingCounter += 10;\n                        updateAnimation(timingCounter,a);\n                    }\n                    else {\n                        if (a < keyFrames.length - 2) {\n                            prevDuration+=keyFrames[a].duration;\n                            a++;\n                            timingCounter = 0;\n                        }\n                        else if (loopAnimation){\n                            a = 0;\n                            timingCounter = 0;\n                        }\n                        else {\n                            clearInterval(animationTimer);\n                            console.log('done');\n                            animationRunning = false;\n                            if(recording){\n                                recording = false;\n                                capturer.stop();\n                                capturer.save();\n                            }\n                        }\n                    }\n                }, 10);\n            }\n        }\n    }\n}", "code_tokens": ["function", "playAnimation", "(", "frameValue", ")", "{", "if", "(", "!", "animationRunning", ")", "{", "console", ".", "log", "(", "'starting'", ")", ";", "animationRunning", "=", "true", ";", "if", "(", "frameValue", ">=", "0", ")", "{", "var", "frames", "=", "0", ";", "var", "a", ";", "var", "timingCounter", ";", "var", "prevDuration", "=", "0", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "keyFrames", ".", "length", "-", "1", ";", "i", "++", ")", "{", "if", "(", "frameValue", ">=", "frames", "&&", "frameValue", "<", "frames", "+", "keyFrames", "[", "i", "]", ".", "duration", ")", "{", "a", "=", "i", ";", "break", ";", "}", "else", "{", "frames", "+=", "keyFrames", "[", "i", "]", ".", "duration", ";", "prevDuration", "+=", "keyFrames", "[", "i", "]", ".", "duration", ";", "}", "}", "if", "(", "a", "!=", "null", ")", "{", "timingCounter", "=", "frameValue", "-", "frames", ";", "animationTimer", "=", "setInterval", "(", "function", "(", ")", "{", "document", ".", "getElementById", "(", "\"playhead\"", ")", ".", "style", ".", "left", "=", "(", "11", "+", "(", "timingCounter", "+", "prevDuration", ")", "/", "timelineScale", ")", "+", "\"px\"", ";", "if", "(", "timingCounter", "<", "keyFrames", "[", "a", "]", ".", "duration", ")", "{", "timingCounter", "+=", "10", ";", "updateAnimation", "(", "timingCounter", ",", "a", ")", ";", "}", "else", "{", "if", "(", "a", "<", "keyFrames", ".", "length", "-", "2", ")", "{", "prevDuration", "+=", "keyFrames", "[", "a", "]", ".", "duration", ";", "a", "++", ";", "timingCounter", "=", "0", ";", "}", "else", "if", "(", "loopAnimation", ")", "{", "a", "=", "0", ";", "timingCounter", "=", "0", ";", "}", "else", "{", "clearInterval", "(", "animationTimer", ")", ";", "console", ".", "log", "(", "'done'", ")", ";", "animationRunning", "=", "false", ";", "if", "(", "recording", ")", "{", "recording", "=", "false", ";", "capturer", ".", "stop", "(", ")", ";", "capturer", ".", "save", "(", ")", ";", "}", "}", "}", "}", ",", "10", ")", ";", "}", "}", "}", "}"], "original_docstring": "//takes all of the properties of the things taken above and sets them to the current viewport. All of the properties for each time is found in each iteration of the array. this takes the values in each keyframe and makes the attributes shift from the original values to the ones in the new frame", "comment": [], "docstring_tokens": ["takes", "all", "of", "the", "properties", "of", "the", "things", "taken", "above", "and", "sets", "them", "to", "the", "current", "viewport", ".", "All", "of", "the", "properties", "for", "each", "time", "is", "found", "in", "each", "iteration", "of", "the", "array", ".", "this", "takes", "the", "values", "in", "each", "keyframe", "and", "makes", "the", "attributes", "shift", "from", "the", "original", "values", "to", "the", "ones", "in", "the", "new", "frame"], "docstring": "takes all of the properties of the things taken above and sets them to the current viewport. All of the properties for each time is found in each iteration of the array. this takes the values in each keyframe and makes the attributes shift from the original values to the ones in the new frame", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "frameValue", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "takes all of the properties of the things taken above and sets them to the current viewport.", "short_docstring_tokens": ["takes", "all", "of", "the", "properties", "of", "the", "things", "taken", "above", "and", "sets", "them", "to", "the", "current", "viewport", "."], "original_string": "function playAnimation(frameValue) {\n    if(!animationRunning) {\n        console.log('starting');\n        animationRunning=true;\n        if (frameValue >= 0) {\n            var frames = 0;\n            var a;\n            var timingCounter;\n            var prevDuration=0;\n            for (var i = 0; i < keyFrames.length - 1; i++) {\n                if (frameValue >= frames && frameValue < frames + keyFrames[i].duration) {\n                    a = i;\n                    break;\n                } else {\n                    frames += keyFrames[i].duration;\n                    prevDuration+=keyFrames[i].duration;\n                }\n            }\n            if (a != null) {\n                timingCounter = frameValue - frames;\n                animationTimer = setInterval(function () {\n                    document.getElementById(\"playhead\").style.left = (11+(timingCounter+prevDuration)/timelineScale)+\"px\";\n                    if (timingCounter < keyFrames[a].duration) {\n                        timingCounter += 10;\n                        updateAnimation(timingCounter,a);\n                    }\n                    else {\n                        if (a < keyFrames.length - 2) {\n                            prevDuration+=keyFrames[a].duration;\n                            a++;\n                            timingCounter = 0;\n                        }\n                        else if (loopAnimation){\n                            a = 0;\n                            timingCounter = 0;\n                        }\n                        else {\n                            clearInterval(animationTimer);\n                            console.log('done');\n                            animationRunning = false;\n                            if(recording){\n                                recording = false;\n                                capturer.stop();\n                                capturer.save();\n                            }\n                        }\n                    }\n                }, 10);\n            }\n        }\n    }\n}", "id": "a8c4f2514cfd7401ac1868a7de11a45a1bb03d2cdda09c9a2191fccc97d6dda7"}
{"identifier": "launchTutorial", "parameters": {}, "return_type": null, "repo": "jkmosa01/TSA-Software-2018", "path": "tutorial.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "52cb9938e67296a4287ae04dc8f4e82559c1de4b", "ext": "js", "size": 1293, "code": "function launchTutorial(){\n    document.getElementById(\"welcomeScreen\").style.display = \"none\"; \n    document.getElementById('tutorialArrow').style.display = \"inherit\"; \n    setTimeout(function(){\n        if(confirm(\"To create a shape, click on the button with the cube\")){\n            animateArrow(-60,15,106,120); \n            usingTutorial = true; \n        }\n    }, 10);\n}", "code_tokens": ["function", "launchTutorial", "(", ")", "{", "document", ".", "getElementById", "(", "\"welcomeScreen\"", ")", ".", "style", ".", "display", "=", "\"none\"", ";", "document", ".", "getElementById", "(", "'tutorialArrow'", ")", ".", "style", ".", "display", "=", "\"inherit\"", ";", "setTimeout", "(", "function", "(", ")", "{", "if", "(", "confirm", "(", "\"To create a shape, click on the button with the cube\"", ")", ")", "{", "animateArrow", "(", "-", "60", ",", "15", ",", "106", ",", "120", ")", ";", "usingTutorial", "=", "true", ";", "}", "}", ",", "10", ")", ";", "}"], "original_docstring": "//Tutorial will load on the call of this function", "comment": ["//removes welcome screen", "//launches tutorial arrow in the current scene", "//brings arrow to the position"], "docstring_tokens": ["Tutorial", "will", "load", "on", "the", "call", "of", "this", "function"], "docstring": "Tutorial will load on the call of this function", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Tutorial will load on the call of this function", "short_docstring_tokens": ["Tutorial", "will", "load", "on", "the", "call", "of", "this", "function"], "original_string": "function launchTutorial(){\n    document.getElementById(\"welcomeScreen\").style.display = \"none\"; //removes welcome screen\n    document.getElementById('tutorialArrow').style.display = \"inherit\"; //launches tutorial arrow in the current scene\n    setTimeout(function(){\n        if(confirm(\"To create a shape, click on the button with the cube\")){\n            animateArrow(-60,15,106,120); //brings arrow to the position\n            usingTutorial = true; \n        }\n    }, 10);\n\n}", "id": "d18cb041f49cdf0e753948bfc94933b1b7ccfc973e6d5227bdf1793e90fc1f29"}
{"identifier": "insertWebProperty", "parameters": {}, "return_type": "<not_specific>", "repo": "atript/gamanip", "path": "src/gaApi.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "68177e4585a9352ee9588f6360235f9b7fe563ce", "ext": "js", "size": 46125, "code": "function insertWebProperty({ to, webProperty }) {\n  const { oauth2Client: auth, accountId } = to;\n  return analytics.management.webproperties\n    .insert({ auth, accountId, resource: webProperty })\n    .then(({ data }) => ({ to, webProperty: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "code_tokens": ["function", "insertWebProperty", "(", "{", "to", ",", "webProperty", "}", ")", "{", "const", "{", "oauth2Client", ":", "auth", ",", "accountId", "}", "=", "to", ";", "return", "analytics", ".", "management", ".", "webproperties", ".", "insert", "(", "{", "auth", ",", "accountId", ",", "resource", ":", "webProperty", "}", ")", ".", "then", "(", "(", "{", "data", "}", ")", "=>", "(", "{", "to", ",", "webProperty", ":", "data", "}", ")", ")", ".", "catch", "(", "(", "err", ")", "=>", "Promise", ".", "reject", "(", "new", "GoogleAnalyticsError", "(", "err", ")", ")", ")", ";", "}"], "original_docstring": "/**\n * Get web property data.\n * Returns an array of web properties.\n * @param query\n * @param query.to { FromWebProperty }\n * @param query.to.oauth2Client { object } authenticated client\n * @param query.to.accountId { string } the id of account in GA\n * @param query.webProperty { object } the id of web  in GA\n * @returns {Promise}\n * @fulfil {{ from: FromWebProperty, webProperty: Object }} - pass down webProperty along with the origin\n */", "comment": [], "docstring_tokens": ["Get", "web", "property", "data", ".", "Returns", "an", "array", "of", "web", "properties", "."], "docstring": "Get web property data.\nReturns an array of web properties.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Get web property data.", "short_docstring_tokens": ["Get", "web", "property", "data", "."], "original_string": "function insertWebProperty({ to, webProperty }) {\n  const { oauth2Client: auth, accountId } = to;\n  return analytics.management.webproperties\n    .insert({ auth, accountId, resource: webProperty })\n    .then(({ data }) => ({ to, webProperty: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "id": "992e734ca117cfdbd29dbf85e8de36249d533433728fe32cdaf0ecf857f7e6a7"}
{"identifier": "patchWebProperty", "parameters": {}, "return_type": "<not_specific>", "repo": "atript/gamanip", "path": "src/gaApi.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "68177e4585a9352ee9588f6360235f9b7fe563ce", "ext": "js", "size": 46125, "code": "function patchWebProperty({ to, webProperty }) {\n  const { oauth2Client: auth, accountId, webPropertyId } = to;\n  return analytics.management.webproperties\n    .patch({ auth, accountId, webPropertyId, resource: webProperty })\n    .then(({ data }) => ({ to, webProperty: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "code_tokens": ["function", "patchWebProperty", "(", "{", "to", ",", "webProperty", "}", ")", "{", "const", "{", "oauth2Client", ":", "auth", ",", "accountId", ",", "webPropertyId", "}", "=", "to", ";", "return", "analytics", ".", "management", ".", "webproperties", ".", "patch", "(", "{", "auth", ",", "accountId", ",", "webPropertyId", ",", "resource", ":", "webProperty", "}", ")", ".", "then", "(", "(", "{", "data", "}", ")", "=>", "(", "{", "to", ",", "webProperty", ":", "data", "}", ")", ")", ".", "catch", "(", "(", "err", ")", "=>", "Promise", ".", "reject", "(", "new", "GoogleAnalyticsError", "(", "err", ")", ")", ")", ";", "}"], "original_docstring": "/**\n * Patch web property data.\n * Returns an array of web properties.\n * @param query\n * @param query.to { FromWebProperty }\n * @param query.to.oauth2Client { object } authenticated client\n * @param query.to.accountId { string } the id of account in GA\n * @param query.from.webPropertyId { string } the id of web  in GA\n * @param query.webProperty { object } the id of web  in GA\n * @returns {Promise}\n * @fulfil {{ from: FromWebProperty, webProperty: Object }} - pass down webProperty along with the origin\n */", "comment": [], "docstring_tokens": ["Patch", "web", "property", "data", ".", "Returns", "an", "array", "of", "web", "properties", "."], "docstring": "Patch web property data.\nReturns an array of web properties.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Patch web property data.", "short_docstring_tokens": ["Patch", "web", "property", "data", "."], "original_string": "function patchWebProperty({ to, webProperty }) {\n  const { oauth2Client: auth, accountId, webPropertyId } = to;\n  return analytics.management.webproperties\n    .patch({ auth, accountId, webPropertyId, resource: webProperty })\n    .then(({ data }) => ({ to, webProperty: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "id": "8d6564e24b4a9816f49369b1a0fdf414dd1dba18b53bf6dd90d0473717bda704"}
{"identifier": "insertDimensions", "parameters": {}, "return_type": "<not_specific>", "repo": "atript/gamanip", "path": "src/gaApi.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "68177e4585a9352ee9588f6360235f9b7fe563ce", "ext": "js", "size": 46125, "code": "function insertDimensions({ to, dimension }) {\n  const { oauth2Client: auth, accountId, webPropertyId } = to;\n  return analytics.management.customDimensions\n    .insert({\n      auth,\n      accountId,\n      webPropertyId,\n      resource: dimension\n    })\n    .then(({ data }) => ({ to, dimension: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "code_tokens": ["function", "insertDimensions", "(", "{", "to", ",", "dimension", "}", ")", "{", "const", "{", "oauth2Client", ":", "auth", ",", "accountId", ",", "webPropertyId", "}", "=", "to", ";", "return", "analytics", ".", "management", ".", "customDimensions", ".", "insert", "(", "{", "auth", ",", "accountId", ",", "webPropertyId", ",", "resource", ":", "dimension", "}", ")", ".", "then", "(", "(", "{", "data", "}", ")", "=>", "(", "{", "to", ",", "dimension", ":", "data", "}", ")", ")", ".", "catch", "(", "(", "err", ")", "=>", "Promise", ".", "reject", "(", "new", "GoogleAnalyticsError", "(", "err", ")", ")", ")", ";", "}"], "original_docstring": "/**\n * Insert dimension to a view.\n * Returns a created dimension.\n * @param query\n * @param query.from { FromProfile }\n * @param query.from.oauth2Client { object } authenticated client\n * @param query.from.accountId { string } the id of account in GA\n * @param query.from.webPropertyId { string } the id of webProperty in GA\n * @param query.dimension { object } the dimension\n * @returns {Promise}\n * @fulfil {{ from: FromProfile, dimension: Object }} - pass down dimension along with the origin\n */", "comment": [], "docstring_tokens": ["Insert", "dimension", "to", "a", "view", ".", "Returns", "a", "created", "dimension", "."], "docstring": "Insert dimension to a view.\nReturns a created dimension.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Insert dimension to a view.", "short_docstring_tokens": ["Insert", "dimension", "to", "a", "view", "."], "original_string": "function insertDimensions({ to, dimension }) {\n  const { oauth2Client: auth, accountId, webPropertyId } = to;\n  return analytics.management.customDimensions\n    .insert({\n      auth,\n      accountId,\n      webPropertyId,\n      resource: dimension\n    })\n    .then(({ data }) => ({ to, dimension: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "id": "26a007ada8e706dea29db9fe1d6a994ed3af75491cd8a607f5dd3b567494634a"}
{"identifier": "patchDimensions", "parameters": {}, "return_type": "<not_specific>", "repo": "atript/gamanip", "path": "src/gaApi.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "68177e4585a9352ee9588f6360235f9b7fe563ce", "ext": "js", "size": 46125, "code": "function patchDimensions({ to, dimension }) {\n  const { oauth2Client: auth, accountId, webPropertyId, profileId } = to;\n  const { id: customDimensionId } = dimension;\n  return analytics.management.customDimensions\n    .patch({\n      auth,\n      accountId,\n      webPropertyId,\n      customDimensionId,\n      resource: dimension\n    })\n    .then(({ data }) => ({ to, dimension: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "code_tokens": ["function", "patchDimensions", "(", "{", "to", ",", "dimension", "}", ")", "{", "const", "{", "oauth2Client", ":", "auth", ",", "accountId", ",", "webPropertyId", ",", "profileId", "}", "=", "to", ";", "const", "{", "id", ":", "customDimensionId", "}", "=", "dimension", ";", "return", "analytics", ".", "management", ".", "customDimensions", ".", "patch", "(", "{", "auth", ",", "accountId", ",", "webPropertyId", ",", "customDimensionId", ",", "resource", ":", "dimension", "}", ")", ".", "then", "(", "(", "{", "data", "}", ")", "=>", "(", "{", "to", ",", "dimension", ":", "data", "}", ")", ")", ".", "catch", "(", "(", "err", ")", "=>", "Promise", ".", "reject", "(", "new", "GoogleAnalyticsError", "(", "err", ")", ")", ")", ";", "}"], "original_docstring": "/**\n * Patch dimension to a view.\n * Returns a created dimension.\n * @param query\n * @param query.from { FromProfile }\n * @param query.from.oauth2Client { object } authenticated client\n * @param query.from.accountId { string } the id of account in GA\n * @param query.from.webPropertyId { string } the id of webProperty in GA\n * @param query.dimension { object } the dimension\n * @returns {Promise}\n * @fulfil {{ from: FromProfile, dimension: Object }} - pass down dimension along with the origin\n */", "comment": [], "docstring_tokens": ["Patch", "dimension", "to", "a", "view", ".", "Returns", "a", "created", "dimension", "."], "docstring": "Patch dimension to a view.\nReturns a created dimension.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Patch dimension to a view.", "short_docstring_tokens": ["Patch", "dimension", "to", "a", "view", "."], "original_string": "function patchDimensions({ to, dimension }) {\n  const { oauth2Client: auth, accountId, webPropertyId, profileId } = to;\n  const { id: customDimensionId } = dimension;\n  return analytics.management.customDimensions\n    .patch({\n      auth,\n      accountId,\n      webPropertyId,\n      customDimensionId,\n      resource: dimension\n    })\n    .then(({ data }) => ({ to, dimension: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "id": "f31b7ebf1c25e05f38582208167a0c50ffba185a064d44e316cc8355f1bf8941"}
{"identifier": "insertMetrics", "parameters": {}, "return_type": "<not_specific>", "repo": "atript/gamanip", "path": "src/gaApi.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "68177e4585a9352ee9588f6360235f9b7fe563ce", "ext": "js", "size": 46125, "code": "function insertMetrics({ to, metric }) {\n  const { oauth2Client: auth, accountId, webPropertyId } = to;\n  return analytics.management.customMetrics\n    .insert({\n      auth,\n      accountId,\n      webPropertyId,\n      resource: metric\n    })\n    .then(({ data }) => ({ to, metric: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "code_tokens": ["function", "insertMetrics", "(", "{", "to", ",", "metric", "}", ")", "{", "const", "{", "oauth2Client", ":", "auth", ",", "accountId", ",", "webPropertyId", "}", "=", "to", ";", "return", "analytics", ".", "management", ".", "customMetrics", ".", "insert", "(", "{", "auth", ",", "accountId", ",", "webPropertyId", ",", "resource", ":", "metric", "}", ")", ".", "then", "(", "(", "{", "data", "}", ")", "=>", "(", "{", "to", ",", "metric", ":", "data", "}", ")", ")", ".", "catch", "(", "(", "err", ")", "=>", "Promise", ".", "reject", "(", "new", "GoogleAnalyticsError", "(", "err", ")", ")", ")", ";", "}"], "original_docstring": "/**\n * Insert metric to a view.\n * Returns a created metric.\n * @param query\n * @param query.from { FromProfile }\n * @param query.from.oauth2Client { object } authenticated client\n * @param query.from.accountId { string } the id of account in GA\n * @param query.from.webPropertyId { string } the id of webProperty in GA\n * @returns {Promise}\n * @fulfil {{ from: FromProfile, metric: Object }} - pass down metric along with the origin\n */", "comment": [], "docstring_tokens": ["Insert", "metric", "to", "a", "view", ".", "Returns", "a", "created", "metric", "."], "docstring": "Insert metric to a view.\nReturns a created metric.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Insert metric to a view.", "short_docstring_tokens": ["Insert", "metric", "to", "a", "view", "."], "original_string": "function insertMetrics({ to, metric }) {\n  const { oauth2Client: auth, accountId, webPropertyId } = to;\n  return analytics.management.customMetrics\n    .insert({\n      auth,\n      accountId,\n      webPropertyId,\n      resource: metric\n    })\n    .then(({ data }) => ({ to, metric: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "id": "36658040aee66144b4964f3e2d77115173cc26e343cccc90083d26c8cbd1b42a"}
{"identifier": "patchMetrics", "parameters": {}, "return_type": "<not_specific>", "repo": "atript/gamanip", "path": "src/gaApi.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "68177e4585a9352ee9588f6360235f9b7fe563ce", "ext": "js", "size": 46125, "code": "function patchMetrics({ to, metric }) {\n  const { oauth2Client: auth, accountId, webPropertyId } = to;\n  const { id: customMetricId } = metric;\n  return analytics.management.customMetrics\n    .patch({\n      auth,\n      accountId,\n      webPropertyId,\n      customMetricId,\n      resource: metric\n    })\n    .then(({ data }) => ({ to, metric: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "code_tokens": ["function", "patchMetrics", "(", "{", "to", ",", "metric", "}", ")", "{", "const", "{", "oauth2Client", ":", "auth", ",", "accountId", ",", "webPropertyId", "}", "=", "to", ";", "const", "{", "id", ":", "customMetricId", "}", "=", "metric", ";", "return", "analytics", ".", "management", ".", "customMetrics", ".", "patch", "(", "{", "auth", ",", "accountId", ",", "webPropertyId", ",", "customMetricId", ",", "resource", ":", "metric", "}", ")", ".", "then", "(", "(", "{", "data", "}", ")", "=>", "(", "{", "to", ",", "metric", ":", "data", "}", ")", ")", ".", "catch", "(", "(", "err", ")", "=>", "Promise", ".", "reject", "(", "new", "GoogleAnalyticsError", "(", "err", ")", ")", ")", ";", "}"], "original_docstring": "/**\n * Patch metric to a view.\n * Returns a created metric.\n * @param query\n * @param query.from { FromProfile }\n * @param query.from.oauth2Client { object } authenticated client\n * @param query.from.accountId { string } the id of account in GA\n * @param query.from.webPropertyId { string } the id of webProperty in GA\n * @returns {Promise}\n * @fulfil {{ from: FromProfile, metric: Object }} - pass down metric along with the origin\n */", "comment": [], "docstring_tokens": ["Patch", "metric", "to", "a", "view", ".", "Returns", "a", "created", "metric", "."], "docstring": "Patch metric to a view.\nReturns a created metric.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Patch metric to a view.", "short_docstring_tokens": ["Patch", "metric", "to", "a", "view", "."], "original_string": "function patchMetrics({ to, metric }) {\n  const { oauth2Client: auth, accountId, webPropertyId } = to;\n  const { id: customMetricId } = metric;\n  return analytics.management.customMetrics\n    .patch({\n      auth,\n      accountId,\n      webPropertyId,\n      customMetricId,\n      resource: metric\n    })\n    .then(({ data }) => ({ to, metric: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "id": "2bf0379cef0cd50f088fef1618e69ac3b3be4b1dc322602ab9ab87d50aa9291e"}
{"identifier": "insertView", "parameters": {}, "return_type": "<not_specific>", "repo": "atript/gamanip", "path": "src/gaApi.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "68177e4585a9352ee9588f6360235f9b7fe563ce", "ext": "js", "size": 46125, "code": "function insertView({ to, view }) {\n  const { oauth2Client: auth, accountId, webPropertyId, quotaUser } = to;\n  return analytics.management.profiles\n    .insert({\n      auth,\n      accountId,\n      webPropertyId,\n      resource: view\n    })\n    .then(({ data }) => ({ to, view: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "code_tokens": ["function", "insertView", "(", "{", "to", ",", "view", "}", ")", "{", "const", "{", "oauth2Client", ":", "auth", ",", "accountId", ",", "webPropertyId", ",", "quotaUser", "}", "=", "to", ";", "return", "analytics", ".", "management", ".", "profiles", ".", "insert", "(", "{", "auth", ",", "accountId", ",", "webPropertyId", ",", "resource", ":", "view", "}", ")", ".", "then", "(", "(", "{", "data", "}", ")", "=>", "(", "{", "to", ",", "view", ":", "data", "}", ")", ")", ".", "catch", "(", "(", "err", ")", "=>", "Promise", ".", "reject", "(", "new", "GoogleAnalyticsError", "(", "err", ")", ")", ")", ";", "}"], "original_docstring": "/**\n * Insert view to web property.\n * Returns an array of views.\n * @param query\n * @param query.from { FromProfile }\n * @param query.from.oauth2Client { object } authenticated client\n * @param query.from.accountId { string } the id of account in GA\n * @param query.from.webPropertyId { string } the id of webProperty in GA\n * @param query.view { object } the view\n * @returns {Promise}\n * @fulfil {{ from: FromProfile, view: Object }} - pass down views along with the origin\n */", "comment": [], "docstring_tokens": ["Insert", "view", "to", "web", "property", ".", "Returns", "an", "array", "of", "views", "."], "docstring": "Insert view to web property.\nReturns an array of views.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Insert view to web property.", "short_docstring_tokens": ["Insert", "view", "to", "web", "property", "."], "original_string": "function insertView({ to, view }) {\n  const { oauth2Client: auth, accountId, webPropertyId, quotaUser } = to;\n  return analytics.management.profiles\n    .insert({\n      auth,\n      accountId,\n      webPropertyId,\n      resource: view\n    })\n    .then(({ data }) => ({ to, view: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "id": "cb77a4a9220d311836d08973f60dd7124c5c238329ba2da9ce505c20b3de27d9"}
{"identifier": "patchView", "parameters": {}, "return_type": "<not_specific>", "repo": "atript/gamanip", "path": "src/gaApi.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "68177e4585a9352ee9588f6360235f9b7fe563ce", "ext": "js", "size": 46125, "code": "function patchView({ to, view }) {\n  const { oauth2Client: auth, accountId, webPropertyId, profileId, quotaUser } = to;\n  return analytics.management.profiles\n    .patch({\n      auth,\n      accountId,\n      webPropertyId,\n      profileId,\n      resource: view\n    })\n    .then(({ data }) => ({ to, view: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "code_tokens": ["function", "patchView", "(", "{", "to", ",", "view", "}", ")", "{", "const", "{", "oauth2Client", ":", "auth", ",", "accountId", ",", "webPropertyId", ",", "profileId", ",", "quotaUser", "}", "=", "to", ";", "return", "analytics", ".", "management", ".", "profiles", ".", "patch", "(", "{", "auth", ",", "accountId", ",", "webPropertyId", ",", "profileId", ",", "resource", ":", "view", "}", ")", ".", "then", "(", "(", "{", "data", "}", ")", "=>", "(", "{", "to", ",", "view", ":", "data", "}", ")", ")", ".", "catch", "(", "(", "err", ")", "=>", "Promise", ".", "reject", "(", "new", "GoogleAnalyticsError", "(", "err", ")", ")", ")", ";", "}"], "original_docstring": "/**\n * Patch view to web property.\n * Returns an array of views.\n * @param query\n * @param query.from { FromProfile }\n * @param query.from.oauth2Client { object } authenticated client\n * @param query.from.accountId { string } the id of account in GA\n * @param query.from.webPropertyId { string } the id of webProperty in GA\n * @param query.from.profileId { string } the id of profileId in GA\n * @param query.view { object } the view\n * @returns {Promise}\n * @fulfil {{ from: FromProfile, view: Object }} - pass down views along with the origin\n */", "comment": [], "docstring_tokens": ["Patch", "view", "to", "web", "property", ".", "Returns", "an", "array", "of", "views", "."], "docstring": "Patch view to web property.\nReturns an array of views.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Patch view to web property.", "short_docstring_tokens": ["Patch", "view", "to", "web", "property", "."], "original_string": "function patchView({ to, view }) {\n  const { oauth2Client: auth, accountId, webPropertyId, profileId, quotaUser } = to;\n  return analytics.management.profiles\n    .patch({\n      auth,\n      accountId,\n      webPropertyId,\n      profileId,\n      resource: view\n    })\n    .then(({ data }) => ({ to, view: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "id": "a659bde1b01bd1653b12c164135bc81c8bfc364385a7bc6653db6e33e6dc486c"}
{"identifier": "insertGoal", "parameters": {}, "return_type": "<not_specific>", "repo": "atript/gamanip", "path": "src/gaApi.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "68177e4585a9352ee9588f6360235f9b7fe563ce", "ext": "js", "size": 46125, "code": "function insertGoal({ to, goal }) {\n  const { oauth2Client: auth, accountId, webPropertyId, profileId } = to;\n  return analytics.management.goals\n    .insert({\n      auth,\n      accountId,\n      webPropertyId,\n      profileId,\n      resource: goal\n    })\n    .then(({ data }) => ({ to, goal: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "code_tokens": ["function", "insertGoal", "(", "{", "to", ",", "goal", "}", ")", "{", "const", "{", "oauth2Client", ":", "auth", ",", "accountId", ",", "webPropertyId", ",", "profileId", "}", "=", "to", ";", "return", "analytics", ".", "management", ".", "goals", ".", "insert", "(", "{", "auth", ",", "accountId", ",", "webPropertyId", ",", "profileId", ",", "resource", ":", "goal", "}", ")", ".", "then", "(", "(", "{", "data", "}", ")", "=>", "(", "{", "to", ",", "goal", ":", "data", "}", ")", ")", ".", "catch", "(", "(", "err", ")", "=>", "Promise", ".", "reject", "(", "new", "GoogleAnalyticsError", "(", "err", ")", ")", ")", ";", "}"], "original_docstring": "/**\n * Insert goal to a view.\n * Returns a created goal.\n * @param query\n * @param query.from { FromProfile }\n * @param query.from.oauth2Client { object } authenticated client\n * @param query.from.accountId { string } the id of account in GA\n * @param query.from.webPropertyId { string } the id of webProperty in GA\n * @param query.from.profileId { string } the id of view in GA\n * @returns {Promise}\n * @fulfil {{ from: FromProfile, goal: Object }} - pass down goal along with the origin\n */", "comment": [], "docstring_tokens": ["Insert", "goal", "to", "a", "view", ".", "Returns", "a", "created", "goal", "."], "docstring": "Insert goal to a view.\nReturns a created goal.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Insert goal to a view.", "short_docstring_tokens": ["Insert", "goal", "to", "a", "view", "."], "original_string": "function insertGoal({ to, goal }) {\n  const { oauth2Client: auth, accountId, webPropertyId, profileId } = to;\n  return analytics.management.goals\n    .insert({\n      auth,\n      accountId,\n      webPropertyId,\n      profileId,\n      resource: goal\n    })\n    .then(({ data }) => ({ to, goal: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "id": "3b149185ba431168f3b09c1507a39ae650578b526285836eaf19496d018cafa3"}
{"identifier": "patchGoal", "parameters": {}, "return_type": "<not_specific>", "repo": "atript/gamanip", "path": "src/gaApi.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "68177e4585a9352ee9588f6360235f9b7fe563ce", "ext": "js", "size": 46125, "code": "function patchGoal({ to, goal }) {\n  const { oauth2Client: auth, accountId, webPropertyId, profileId, goalId } = to;\n  return analytics.management.goals\n    .patch({\n      auth,\n      accountId,\n      webPropertyId,\n      profileId,\n      goalId,\n      resource: goal\n    })\n    .then(({ data }) => ({ to, goal: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "code_tokens": ["function", "patchGoal", "(", "{", "to", ",", "goal", "}", ")", "{", "const", "{", "oauth2Client", ":", "auth", ",", "accountId", ",", "webPropertyId", ",", "profileId", ",", "goalId", "}", "=", "to", ";", "return", "analytics", ".", "management", ".", "goals", ".", "patch", "(", "{", "auth", ",", "accountId", ",", "webPropertyId", ",", "profileId", ",", "goalId", ",", "resource", ":", "goal", "}", ")", ".", "then", "(", "(", "{", "data", "}", ")", "=>", "(", "{", "to", ",", "goal", ":", "data", "}", ")", ")", ".", "catch", "(", "(", "err", ")", "=>", "Promise", ".", "reject", "(", "new", "GoogleAnalyticsError", "(", "err", ")", ")", ")", ";", "}"], "original_docstring": "/**\n * Patch goal to a view.\n * Returns a created goal.\n * @param query\n * @param query.from { FromProfile }\n * @param query.from.oauth2Client { object } authenticated client\n * @param query.from.accountId { string } the id of account in GA\n * @param query.from.webPropertyId { string } the id of webProperty in GA\n * @param query.from.profileId { string } the id of view in GA\n * @returns {Promise}\n * @fulfil {{ from: FromProfile, goal: Object }} - pass down goal along with the origin\n */", "comment": [], "docstring_tokens": ["Patch", "goal", "to", "a", "view", ".", "Returns", "a", "created", "goal", "."], "docstring": "Patch goal to a view.\nReturns a created goal.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Patch goal to a view.", "short_docstring_tokens": ["Patch", "goal", "to", "a", "view", "."], "original_string": "function patchGoal({ to, goal }) {\n  const { oauth2Client: auth, accountId, webPropertyId, profileId, goalId } = to;\n  return analytics.management.goals\n    .patch({\n      auth,\n      accountId,\n      webPropertyId,\n      profileId,\n      goalId,\n      resource: goal\n    })\n    .then(({ data }) => ({ to, goal: data }))\n    .catch((err) => Promise.reject(new GoogleAnalyticsError(err)));\n}", "id": "e94571a37f1deb6caff110b66bf6d7c82b8ad5aebe4f9c78d5b2b1169d5ba9db"}
{"identifier": "ArrowFunctionExpression", "parameters": {"node": null}, "return_type": "<not_specific>", "repo": "Sawtaytoes/ghadyani-eslint", "path": "packages/arrow-body-parens/lib/rules/parens.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 4.0, "forks_count": NaN, "license": ["MIT"], "hexsha": "d8bb8ecef99f28a78d177dd0e900fb18f25ef31d", "ext": "js", "size": 8351, "code": "function ArrowFunctionExpression(node) {\n      const arrowBody = node.body;\n      if (\n        rule.__ignoredBodyTypes.some(type => type === arrowBody.type) ||\n        astUtils.isTokenOnSameLine(node, node)\n      ) {\n        return;\n      }\n      const tokenBefore = sourceCode.getTokenBefore(arrowBody);\n      const tokenAfter = sourceCode.getTokenAfter(arrowBody);\n      const arrowToken = astUtils.isArrowToken(tokenBefore) ?\n        tokenBefore :\n        sourceCode.getTokenBefore(tokenBefore);\n      if (\n        !astUtils.isOpeningParenToken(tokenBefore) ||\n        !astUtils.isClosingParenToken(tokenAfter)\n      ) {\n        if (astUtils.isFunction(arrowBody)) {\n          return;\n        }\n        const isClosingParenToken = astUtils.isClosingParenToken(tokenAfter);\n        context.report({\n          node,\n          loc: tokenBefore.loc.start,\n          message: rule.__errors.noParensFound,\n          fix(fixer) {\n            const fixes = [];\n            if (!astUtils.isOpeningParenToken(tokenBefore)) {\n              fixes.push(fixer.insertTextAfter(tokenBefore, ' ('));\n            }\n            if (!isClosingParenToken) {\n              fixes.push(fixer.insertTextAfter(arrowBody, '\\n)'));\n            }\n            return fixes;\n          },\n        });\n        return;\n      }\n      const openingParens = tokenBefore;\n      const closingParens = tokenAfter;\n      if (\n        astUtils.isArrowToken(arrowToken) &&\n        arrowToken.loc.start.line !== openingParens.loc.start.line ||\n        astUtils.isTokenOnSameLine(openingParens, arrowBody) ||\n        (arrowBody.loc.start.line - openingParens.loc.end.line) > 1 ||\n        astUtils.isTokenOnSameLine(arrowBody, closingParens) ||\n        (closingParens.loc.start.line - arrowBody.loc.end.line) > 1\n      ) {\n        context.report({\n          node,\n          loc: arrowToken.loc.start,\n          message: rule.__errors.parensOnWrongLine,\n          fix(fixer) {\n            const fixes = [];\n            if (arrowToken.loc.start.line !== openingParens.loc.start.line) {\n              fixes.push(\n                fixer.replaceTextRange(\n                  [\n                    arrowToken.range[1],\n                    openingParens.range[1],\n                  ],\n                  ' (',\n                )\n              );\n            }\n            if (astUtils.isTokenOnSameLine(openingParens, arrowBody)) {\n              fixes.push(\n                fixer.replaceTextRange(\n                  [\n                    openingParens.range[1],\n                    arrowBody.range[0],\n                  ],\n                  '\\n',\n                )\n              );\n            }\n            if ((arrowBody.loc.start.line - openingParens.loc.end.line) > 1) {\n              fixes.push(\n                fixer.removeRange(\n                  [\n                    openingParens.range[1],\n                    arrowBody.range[0],\n                  ],\n                )\n              );\n            }\n            if (astUtils.isTokenOnSameLine(arrowBody, closingParens)) {\n              fixes.push(\n                fixer.replaceTextRange(closingParens.range, '\\n)')\n              );\n            }\n            if ((closingParens.loc.start.line - arrowBody.loc.end.line) > 1) {\n              fixes.push(\n                fixer.removeRange(\n                  [\n                    arrowBody.range[1],\n                    closingParens.range[0],\n                  ],\n                )\n              );\n            }\n            return fixes;\n          },\n        });\n        return;\n      }\n    }", "code_tokens": ["function", "ArrowFunctionExpression", "(", "node", ")", "{", "const", "arrowBody", "=", "node", ".", "body", ";", "if", "(", "rule", ".", "__ignoredBodyTypes", ".", "some", "(", "type", "=>", "type", "===", "arrowBody", ".", "type", ")", "||", "astUtils", ".", "isTokenOnSameLine", "(", "node", ",", "node", ")", ")", "{", "return", ";", "}", "const", "tokenBefore", "=", "sourceCode", ".", "getTokenBefore", "(", "arrowBody", ")", ";", "const", "tokenAfter", "=", "sourceCode", ".", "getTokenAfter", "(", "arrowBody", ")", ";", "const", "arrowToken", "=", "astUtils", ".", "isArrowToken", "(", "tokenBefore", ")", "?", "tokenBefore", ":", "sourceCode", ".", "getTokenBefore", "(", "tokenBefore", ")", ";", "if", "(", "!", "astUtils", ".", "isOpeningParenToken", "(", "tokenBefore", ")", "||", "!", "astUtils", ".", "isClosingParenToken", "(", "tokenAfter", ")", ")", "{", "if", "(", "astUtils", ".", "isFunction", "(", "arrowBody", ")", ")", "{", "return", ";", "}", "const", "isClosingParenToken", "=", "astUtils", ".", "isClosingParenToken", "(", "tokenAfter", ")", ";", "context", ".", "report", "(", "{", "node", ",", "loc", ":", "tokenBefore", ".", "loc", ".", "start", ",", "message", ":", "rule", ".", "__errors", ".", "noParensFound", ",", "fix", "(", "fixer", ")", "{", "const", "fixes", "=", "[", "]", ";", "if", "(", "!", "astUtils", ".", "isOpeningParenToken", "(", "tokenBefore", ")", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "insertTextAfter", "(", "tokenBefore", ",", "' ('", ")", ")", ";", "}", "if", "(", "!", "isClosingParenToken", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "insertTextAfter", "(", "arrowBody", ",", "'\\n)'", ")", ")", ";", "}", "return", "fixes", ";", "}", ",", "}", ")", ";", "return", ";", "}", "const", "openingParens", "=", "tokenBefore", ";", "const", "closingParens", "=", "tokenAfter", ";", "if", "(", "astUtils", ".", "isArrowToken", "(", "arrowToken", ")", "&&", "arrowToken", ".", "loc", ".", "start", ".", "line", "!==", "openingParens", ".", "loc", ".", "start", ".", "line", "||", "astUtils", ".", "isTokenOnSameLine", "(", "openingParens", ",", "arrowBody", ")", "||", "(", "arrowBody", ".", "loc", ".", "start", ".", "line", "-", "openingParens", ".", "loc", ".", "end", ".", "line", ")", ">", "1", "||", "astUtils", ".", "isTokenOnSameLine", "(", "arrowBody", ",", "closingParens", ")", "||", "(", "closingParens", ".", "loc", ".", "start", ".", "line", "-", "arrowBody", ".", "loc", ".", "end", ".", "line", ")", ">", "1", ")", "{", "context", ".", "report", "(", "{", "node", ",", "loc", ":", "arrowToken", ".", "loc", ".", "start", ",", "message", ":", "rule", ".", "__errors", ".", "parensOnWrongLine", ",", "fix", "(", "fixer", ")", "{", "const", "fixes", "=", "[", "]", ";", "if", "(", "arrowToken", ".", "loc", ".", "start", ".", "line", "!==", "openingParens", ".", "loc", ".", "start", ".", "line", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "replaceTextRange", "(", "[", "arrowToken", ".", "range", "[", "1", "]", ",", "openingParens", ".", "range", "[", "1", "]", ",", "]", ",", "' ('", ",", ")", ")", ";", "}", "if", "(", "astUtils", ".", "isTokenOnSameLine", "(", "openingParens", ",", "arrowBody", ")", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "replaceTextRange", "(", "[", "openingParens", ".", "range", "[", "1", "]", ",", "arrowBody", ".", "range", "[", "0", "]", ",", "]", ",", "'\\n'", ",", ")", ")", ";", "}", "if", "(", "(", "arrowBody", ".", "loc", ".", "start", ".", "line", "-", "openingParens", ".", "loc", ".", "end", ".", "line", ")", ">", "1", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "removeRange", "(", "[", "openingParens", ".", "range", "[", "1", "]", ",", "arrowBody", ".", "range", "[", "0", "]", ",", "]", ",", ")", ")", ";", "}", "if", "(", "astUtils", ".", "isTokenOnSameLine", "(", "arrowBody", ",", "closingParens", ")", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "replaceTextRange", "(", "closingParens", ".", "range", ",", "'\\n)'", ")", ")", ";", "}", "if", "(", "(", "closingParens", ".", "loc", ".", "start", ".", "line", "-", "arrowBody", ".", "loc", ".", "end", ".", "line", ")", ">", "1", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "removeRange", "(", "[", "arrowBody", ".", "range", "[", "1", "]", ",", "closingParens", ".", "range", "[", "0", "]", ",", "]", ",", ")", ")", ";", "}", "return", "fixes", ";", "}", ",", "}", ")", ";", "return", ";", "}", "}"], "original_docstring": "/**\n    * Determines whether a arrow function body needs parens\n    * @param {ASTNode} node The arrow function node.\n    * @returns {void}\n    */", "comment": ["// ignore block statements", "// ignore single line arrow functions"], "docstring_tokens": ["Determines", "whether", "a", "arrow", "function", "body", "needs", "parens", "@param", "{", "ASTNode", "}", "node", "The", "arrow", "function", "node", ".", "@returns", "{", "void", "}"], "docstring": "Determines whether a arrow function body needs parens\n@param {ASTNode} node The arrow function node.\n@returns {void}", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "node", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Determines whether a arrow function body needs parens\n @param {ASTNode} node The arrow function node.", "short_docstring_tokens": ["Determines", "whether", "a", "arrow", "function", "body", "needs", "parens", "@param", "{", "ASTNode", "}", "node", "The", "arrow", "function", "node", "."], "original_string": "function ArrowFunctionExpression(node) {\n      const arrowBody = node.body;\n\n      if (\n        // ignore block statements\n        rule.__ignoredBodyTypes.some(type => type === arrowBody.type) ||\n        // ignore single line arrow functions\n        astUtils.isTokenOnSameLine(node, node)\n      ) {\n        return;\n      }\n\n      const tokenBefore = sourceCode.getTokenBefore(arrowBody);\n      const tokenAfter = sourceCode.getTokenAfter(arrowBody);\n      const arrowToken = astUtils.isArrowToken(tokenBefore) ?\n        tokenBefore :\n        sourceCode.getTokenBefore(tokenBefore);\n\n      if (\n        !astUtils.isOpeningParenToken(tokenBefore) ||\n        !astUtils.isClosingParenToken(tokenAfter)\n      ) {\n        if (astUtils.isFunction(arrowBody)) {\n          return;\n        }\n\n        const isClosingParenToken = astUtils.isClosingParenToken(tokenAfter);\n\n        context.report({\n          node,\n          loc: tokenBefore.loc.start,\n          message: rule.__errors.noParensFound,\n          fix(fixer) {\n            const fixes = [];\n\n            if (!astUtils.isOpeningParenToken(tokenBefore)) {\n              fixes.push(fixer.insertTextAfter(tokenBefore, ' ('));\n            }\n\n            if (!isClosingParenToken) {\n              fixes.push(fixer.insertTextAfter(arrowBody, '\\n)'));\n            }\n\n            return fixes;\n          },\n        });\n        return;\n      }\n\n      const openingParens = tokenBefore;\n      const closingParens = tokenAfter;\n\n      if (\n        astUtils.isArrowToken(arrowToken) &&\n        arrowToken.loc.start.line !== openingParens.loc.start.line ||\n        astUtils.isTokenOnSameLine(openingParens, arrowBody) ||\n        (arrowBody.loc.start.line - openingParens.loc.end.line) > 1 ||\n        astUtils.isTokenOnSameLine(arrowBody, closingParens) ||\n        (closingParens.loc.start.line - arrowBody.loc.end.line) > 1\n      ) {\n        context.report({\n          node,\n          loc: arrowToken.loc.start,\n          message: rule.__errors.parensOnWrongLine,\n          fix(fixer) {\n            const fixes = [];\n\n            if (arrowToken.loc.start.line !== openingParens.loc.start.line) {\n              fixes.push(\n                fixer.replaceTextRange(\n                  [\n                    arrowToken.range[1],\n                    openingParens.range[1],\n                  ],\n                  ' (',\n                )\n              );\n            }\n\n            if (astUtils.isTokenOnSameLine(openingParens, arrowBody)) {\n              fixes.push(\n                fixer.replaceTextRange(\n                  [\n                    openingParens.range[1],\n                    arrowBody.range[0],\n                  ],\n                  '\\n',\n                )\n              );\n            }\n\n            if ((arrowBody.loc.start.line - openingParens.loc.end.line) > 1) {\n              fixes.push(\n                fixer.removeRange(\n                  [\n                    openingParens.range[1],\n                    arrowBody.range[0],\n                  ],\n                )\n              );\n            }\n\n            if (astUtils.isTokenOnSameLine(arrowBody, closingParens)) {\n              fixes.push(\n                fixer.replaceTextRange(closingParens.range, '\\n)')\n              );\n            }\n\n            if ((closingParens.loc.start.line - arrowBody.loc.end.line) > 1) {\n              fixes.push(\n                fixer.removeRange(\n                  [\n                    arrowBody.range[1],\n                    closingParens.range[0],\n                  ],\n                )\n              );\n            }\n\n            return fixes;\n          },\n        });\n\n        return;\n      }\n    }", "id": "09463b0c527bd8d6ceab0375dadff4d7268f65aa0c71b4d67e0c70b0f0f5b91a"}
{"identifier": "VariableDeclarator", "parameters": {"node": null}, "return_type": "<not_specific>", "repo": "Sawtaytoes/ghadyani-eslint", "path": "packages/arrow-body-parens/lib/rules/parens.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 4.0, "forks_count": NaN, "license": ["MIT"], "hexsha": "d8bb8ecef99f28a78d177dd0e900fb18f25ef31d", "ext": "js", "size": 8351, "code": "function VariableDeclarator(node) {\n      const body = node.init;\n      if (!body) {\n        return;\n      }\n      if (\n        rule.__ignoredBodyTypes.some(type => type === body.type) ||\n        astUtils.isTokenOnSameLine(node, node)\n      ) {\n        return;\n      }\n      const tokenBefore = sourceCode.getTokenBefore(body);\n      const tokenAfter = sourceCode.getTokenAfter(body);\n      if (!astUtils.isParenthesised(sourceCode, body)) {\n        context.report({\n          node,\n          loc: tokenBefore.loc.start,\n          message: rule.__errors.noParensFound,\n          fix(fixer) {\n            const fixes = [];\n            fixes.push(fixer.insertTextAfter(tokenBefore, ' ('));\n            fixes.push(fixer.insertTextAfter(body, '\\n)'));\n            return fixes;\n          },\n        });\n        return;\n      }\n      const openingParens = tokenBefore;\n      const closingParens = tokenAfter;\n      if (\n        !astUtils.isTokenOnSameLine(openingParens, node) ||\n        astUtils.isTokenOnSameLine(openingParens, body) ||\n        (body.loc.start.line - openingParens.loc.end.line) > 1 ||\n        astUtils.isTokenOnSameLine(body, closingParens) ||\n        (closingParens.loc.start.line - body.loc.end.line) > 1\n      ) {\n        context.report({\n          node,\n          loc: node.loc.start,\n          message: rule.__errors.parensOnWrongLine,\n          fix(fixer) {\n            const fixes = [];\n            if (!astUtils.isTokenOnSameLine(openingParens, node)) {\n              fixes.push(\n                fixer.replaceTextRange(\n                  [\n                    sourceCode.getTokenBefore(openingParens).range[1],\n                    openingParens.range[1],\n                  ],\n                  ' (',\n                )\n              );\n            }\n            if (astUtils.isTokenOnSameLine(openingParens, body)) {\n              fixes.push(\n                fixer.replaceTextRange(\n                  [\n                    sourceCode.getTokenBefore(openingParens).range[1],\n                    openingParens.range[1],\n                  ],\n                  ' (\\n',\n                )\n              );\n            }\n            if ((body.loc.start.line - openingParens.loc.end.line) > 1) {\n              fixes.push(\n                fixer.removeRange(\n                  [\n                    openingParens.range[1],\n                    body.range[0],\n                  ],\n                )\n              );\n            }\n            if (astUtils.isTokenOnSameLine(body, closingParens)) {\n              fixes.push(\n                fixer.replaceTextRange(closingParens.range, '\\n)')\n              );\n            }\n            if ((closingParens.loc.start.line - body.loc.end.line) > 1) {\n              fixes.push(\n                fixer.removeRange(\n                  [\n                    body.range[1],\n                    closingParens.range[0],\n                  ],\n                )\n              );\n            }\n            return fixes;\n          },\n        });\n        return;\n      }\n    }", "code_tokens": ["function", "VariableDeclarator", "(", "node", ")", "{", "const", "body", "=", "node", ".", "init", ";", "if", "(", "!", "body", ")", "{", "return", ";", "}", "if", "(", "rule", ".", "__ignoredBodyTypes", ".", "some", "(", "type", "=>", "type", "===", "body", ".", "type", ")", "||", "astUtils", ".", "isTokenOnSameLine", "(", "node", ",", "node", ")", ")", "{", "return", ";", "}", "const", "tokenBefore", "=", "sourceCode", ".", "getTokenBefore", "(", "body", ")", ";", "const", "tokenAfter", "=", "sourceCode", ".", "getTokenAfter", "(", "body", ")", ";", "if", "(", "!", "astUtils", ".", "isParenthesised", "(", "sourceCode", ",", "body", ")", ")", "{", "context", ".", "report", "(", "{", "node", ",", "loc", ":", "tokenBefore", ".", "loc", ".", "start", ",", "message", ":", "rule", ".", "__errors", ".", "noParensFound", ",", "fix", "(", "fixer", ")", "{", "const", "fixes", "=", "[", "]", ";", "fixes", ".", "push", "(", "fixer", ".", "insertTextAfter", "(", "tokenBefore", ",", "' ('", ")", ")", ";", "fixes", ".", "push", "(", "fixer", ".", "insertTextAfter", "(", "body", ",", "'\\n)'", ")", ")", ";", "return", "fixes", ";", "}", ",", "}", ")", ";", "return", ";", "}", "const", "openingParens", "=", "tokenBefore", ";", "const", "closingParens", "=", "tokenAfter", ";", "if", "(", "!", "astUtils", ".", "isTokenOnSameLine", "(", "openingParens", ",", "node", ")", "||", "astUtils", ".", "isTokenOnSameLine", "(", "openingParens", ",", "body", ")", "||", "(", "body", ".", "loc", ".", "start", ".", "line", "-", "openingParens", ".", "loc", ".", "end", ".", "line", ")", ">", "1", "||", "astUtils", ".", "isTokenOnSameLine", "(", "body", ",", "closingParens", ")", "||", "(", "closingParens", ".", "loc", ".", "start", ".", "line", "-", "body", ".", "loc", ".", "end", ".", "line", ")", ">", "1", ")", "{", "context", ".", "report", "(", "{", "node", ",", "loc", ":", "node", ".", "loc", ".", "start", ",", "message", ":", "rule", ".", "__errors", ".", "parensOnWrongLine", ",", "fix", "(", "fixer", ")", "{", "const", "fixes", "=", "[", "]", ";", "if", "(", "!", "astUtils", ".", "isTokenOnSameLine", "(", "openingParens", ",", "node", ")", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "replaceTextRange", "(", "[", "sourceCode", ".", "getTokenBefore", "(", "openingParens", ")", ".", "range", "[", "1", "]", ",", "openingParens", ".", "range", "[", "1", "]", ",", "]", ",", "' ('", ",", ")", ")", ";", "}", "if", "(", "astUtils", ".", "isTokenOnSameLine", "(", "openingParens", ",", "body", ")", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "replaceTextRange", "(", "[", "sourceCode", ".", "getTokenBefore", "(", "openingParens", ")", ".", "range", "[", "1", "]", ",", "openingParens", ".", "range", "[", "1", "]", ",", "]", ",", "' (\\n'", ",", ")", ")", ";", "}", "if", "(", "(", "body", ".", "loc", ".", "start", ".", "line", "-", "openingParens", ".", "loc", ".", "end", ".", "line", ")", ">", "1", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "removeRange", "(", "[", "openingParens", ".", "range", "[", "1", "]", ",", "body", ".", "range", "[", "0", "]", ",", "]", ",", ")", ")", ";", "}", "if", "(", "astUtils", ".", "isTokenOnSameLine", "(", "body", ",", "closingParens", ")", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "replaceTextRange", "(", "closingParens", ".", "range", ",", "'\\n)'", ")", ")", ";", "}", "if", "(", "(", "closingParens", ".", "loc", ".", "start", ".", "line", "-", "body", ".", "loc", ".", "end", ".", "line", ")", ">", "1", ")", "{", "fixes", ".", "push", "(", "fixer", ".", "removeRange", "(", "[", "body", ".", "range", "[", "1", "]", ",", "closingParens", ".", "range", "[", "0", "]", ",", "]", ",", ")", ")", ";", "}", "return", "fixes", ";", "}", ",", "}", ")", ";", "return", ";", "}", "}"], "original_docstring": "/**\n    * Determines whether a variable expression body needs parens\n    * @param {ASTNode} node The arrow function node.\n    * @returns {void}\n    */", "comment": ["// ignore block statements", "// ignore single line arrow functions"], "docstring_tokens": ["Determines", "whether", "a", "variable", "expression", "body", "needs", "parens", "@param", "{", "ASTNode", "}", "node", "The", "arrow", "function", "node", ".", "@returns", "{", "void", "}"], "docstring": "Determines whether a variable expression body needs parens\n@param {ASTNode} node The arrow function node.\n@returns {void}", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "node", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Determines whether a variable expression body needs parens\n @param {ASTNode} node The arrow function node.", "short_docstring_tokens": ["Determines", "whether", "a", "variable", "expression", "body", "needs", "parens", "@param", "{", "ASTNode", "}", "node", "The", "arrow", "function", "node", "."], "original_string": "function VariableDeclarator(node) {\n      const body = node.init;\n\n      if (!body) {\n        return;\n      }\n\n      if (\n        // ignore block statements\n        rule.__ignoredBodyTypes.some(type => type === body.type) ||\n        // ignore single line arrow functions\n        astUtils.isTokenOnSameLine(node, node)\n      ) {\n        return;\n      }\n\n      const tokenBefore = sourceCode.getTokenBefore(body);\n      const tokenAfter = sourceCode.getTokenAfter(body);\n\n      if (!astUtils.isParenthesised(sourceCode, body)) {\n        context.report({\n          node,\n          loc: tokenBefore.loc.start,\n          message: rule.__errors.noParensFound,\n          fix(fixer) {\n            const fixes = [];\n\n            fixes.push(fixer.insertTextAfter(tokenBefore, ' ('));\n            fixes.push(fixer.insertTextAfter(body, '\\n)'));\n\n            return fixes;\n          },\n        });\n\n        return;\n      }\n\n      const openingParens = tokenBefore;\n      const closingParens = tokenAfter;\n\n      if (\n        !astUtils.isTokenOnSameLine(openingParens, node) ||\n        astUtils.isTokenOnSameLine(openingParens, body) ||\n        (body.loc.start.line - openingParens.loc.end.line) > 1 ||\n        astUtils.isTokenOnSameLine(body, closingParens) ||\n        (closingParens.loc.start.line - body.loc.end.line) > 1\n      ) {\n        context.report({\n          node,\n          loc: node.loc.start,\n          message: rule.__errors.parensOnWrongLine,\n          fix(fixer) {\n            const fixes = [];\n\n            if (!astUtils.isTokenOnSameLine(openingParens, node)) {\n              fixes.push(\n                fixer.replaceTextRange(\n                  [\n                    sourceCode.getTokenBefore(openingParens).range[1],\n                    openingParens.range[1],\n                  ],\n                  ' (',\n                )\n              );\n            }\n\n            if (astUtils.isTokenOnSameLine(openingParens, body)) {\n              fixes.push(\n                fixer.replaceTextRange(\n                  [\n                    sourceCode.getTokenBefore(openingParens).range[1],\n                    openingParens.range[1],\n                  ],\n                  ' (\\n',\n                )\n              );\n            }\n\n            if ((body.loc.start.line - openingParens.loc.end.line) > 1) {\n              fixes.push(\n                fixer.removeRange(\n                  [\n                    openingParens.range[1],\n                    body.range[0],\n                  ],\n                )\n              );\n            }\n\n            if (astUtils.isTokenOnSameLine(body, closingParens)) {\n              fixes.push(\n                fixer.replaceTextRange(closingParens.range, '\\n)')\n              );\n            }\n\n            if ((closingParens.loc.start.line - body.loc.end.line) > 1) {\n              fixes.push(\n                fixer.removeRange(\n                  [\n                    body.range[1],\n                    closingParens.range[0],\n                  ],\n                )\n              );\n            }\n\n            return fixes;\n          },\n        });\n\n        return;\n      }\n    }", "id": "92318758fa069c81ab0953eb3797fd13aa95b2b8db4db72bc66537a72af195fd"}
{"identifier": "passwordResetCheck", "parameters": {"token": null, "loading": null}, "return_type": null, "repo": "Tow96/MERN-Stack", "path": "Client/Web/src/services/apiService.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["BSD-3-Clause"], "hexsha": "dbc573a3d7baf47591a244d4cdfdac33e37b494f", "ext": "js", "size": 4785, "code": "async passwordResetCheck(token, loading, { update, onError }) {\n    try {\n      const res = await noAuthInstance.get(`${this.API_URL}/reset/${token}`);\n      if (loading) loading(false);\n      update(res);\n    }\n    catch (err) {\n      if (loading) loading(false);\n      onError(err);\n    }\n  }", "code_tokens": ["async", "passwordResetCheck", "(", "token", ",", "loading", ",", "{", "update", ",", "onError", "}", ")", "{", "try", "{", "const", "res", "=", "await", "noAuthInstance", ".", "get", "(", "`", "${", "this", ".", "API_URL", "}", "${", "token", "}", "`", ")", ";", "if", "(", "loading", ")", "loading", "(", "false", ")", ";", "update", "(", "res", ")", ";", "}", "catch", "(", "err", ")", "{", "if", "(", "loading", ")", "loading", "(", "false", ")", ";", "onError", "(", "err", ")", ";", "}", "}"], "original_docstring": "// Checks if the token is valid", "comment": [], "docstring_tokens": ["Checks", "if", "the", "token", "is", "valid"], "docstring": "Checks if the token is valid", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "token", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "loading", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Checks if the token is valid", "short_docstring_tokens": ["Checks", "if", "the", "token", "is", "valid"], "original_string": "async passwordResetCheck(token, loading, { update, onError }) {\n    try {\n      const res = await noAuthInstance.get(`${this.API_URL}/reset/${token}`);\n      if (loading) loading(false);\n      update(res);\n    }\n    catch (err) {\n      if (loading) loading(false);\n      onError(err);\n    }\n  }", "id": "1a8d86ad6dfa046a6ae775503a8edc4a2dc6d5e1dafba8acf44350e033c37430"}
{"identifier": "checkNested", "parameters": {"obj": null, "level": null, "rest": null}, "return_type": "<not_specific>", "repo": "Tow96/MERN-Stack", "path": "Client/Web/src/utils/checkNested.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["BSD-3-Clause"], "hexsha": "1b69a1e26e3139969bb7f5fb494af3df4e4f205a", "ext": "js", "size": 628, "code": "function checkNested(obj, level, ...rest) {\n  if(obj === undefined) return false;\n  if(rest.length === 0 && obj.hasOwnProperty(level)) return true;\n  return checkNested(obj[level], ...rest);\n}", "code_tokens": ["function", "checkNested", "(", "obj", ",", "level", ",", "...", "rest", ")", "{", "if", "(", "obj", "===", "undefined", ")", "return", "false", ";", "if", "(", "rest", ".", "length", "===", "0", "&&", "obj", ".", "hasOwnProperty", "(", "level", ")", ")", "return", "true", ";", "return", "checkNested", "(", "obj", "[", "level", "]", ",", "...", "rest", ")", ";", "}"], "original_docstring": "/**checkNested.js\n * Function obtained from:\n * https://stackoverflow.com/questions/2631001/test-for-existence-of-nested-javascript-object-key\n *\n * checks an object for the existance of a nested key without throwing errors\n * e.g. (\n *  foo = {level1: {level2: {level3: 'bar'}}}\n *  \n *  if( foo.level1.level2.foo) returns exception\n *  checkNested(foo, 'level1', 'level2', 'foo') returns false\n * )\n */", "comment": [], "docstring_tokens": ["checks", "an", "object", "for", "the", "existance", "of", "a", "nested", "key", "without", "throwing", "errors", "e", ".", "g", "."], "docstring": "\n\nchecks an object for the existance of a nested key without throwing errors\ne.g.\n\n", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "obj", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "level", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "rest", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "checkNested.js\n Function obtained from:\n https://stackoverflow.com/questions/2631001/test-for-existence-of-nested-javascript-object-key", "short_docstring_tokens": ["checkNested", ".", "js", "Function", "obtained", "from", ":", "https", ":", "//", "stackoverflow", ".", "com", "/", "questions", "/", "2631001", "/", "test", "-", "for", "-", "existence", "-", "of", "-", "nested", "-", "javascript", "-", "object", "-", "key"], "original_string": "function checkNested(obj, level, ...rest) {\n  if(obj === undefined) return false;\n  if(rest.length === 0 && obj.hasOwnProperty(level)) return true;\n  return checkNested(obj[level], ...rest);\n}", "id": "9d28da056f2c74de122bdd7525d8e1cbc0941b49c0d6508e9e1d3e236c0123bf"}
{"identifier": "css", "parameters": {}, "return_type": "<not_specific>", "repo": "pacts-org/pacts-documentation", "path": "app/pages/examples/loading-server.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "54b9f93daf49ad436ff688e96bc8e307b6ad6da1", "ext": "js", "size": 2437, "code": "css() {\n    return `\n      .styled-list {\n        padding: 0;\n        margin: 0;\n      }\n      .styled-list li {\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        padding: 0 16px;\n        flex-direction: row-reverse;\n        justify-content: space-around;\n        line-height: 48px;\n      }\n      .styled-list li .list-text {\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        box-sizing: border-box;\n        overflow: hidden;\n        padding: 0;\n      }\n      .styled-list li:hover {\n        background: #DDDDDD;\n      }\n    `;\n  }", "code_tokens": ["css", "(", ")", "{", "return", "`", "`", ";", "}"], "original_docstring": "// This is a convinience method. It is suggested you load your css in a file", "comment": [], "docstring_tokens": ["This", "is", "a", "convinience", "method", ".", "It", "is", "suggested", "you", "load", "your", "css", "in", "a", "file"], "docstring": "This is a convinience method. It is suggested you load your css in a file", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "This is a convinience method.", "short_docstring_tokens": ["This", "is", "a", "convinience", "method", "."], "original_string": "css() {\n    return `\n      .styled-list {\n        padding: 0;\n        margin: 0;\n      }\n\n      .styled-list li {\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        padding: 0 16px;\n        flex-direction: row-reverse;\n        justify-content: space-around;\n        line-height: 48px;\n      }\n\n      .styled-list li .list-text {\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        box-sizing: border-box;\n        overflow: hidden;\n        padding: 0;\n      }\n\n      .styled-list li:hover {\n        background: #DDDDDD;\n      }\n    `;\n  }", "id": "97f6217c68f0ab233783914f3a20f624cde6a9dcd15295e7d70bbeffe97b91de"}
{"identifier": "seek", "parameters": {"target": null}, "return_type": null, "repo": "after12am/boids.js", "path": "src/core/SteeredVehicle.js", "language": "JavaScript", "stars_count": 30.0, "issues_count": 22.0, "forks_count": 12.0, "license": ["MIT"], "hexsha": "7835154bfe5dab55088655c6973df3d341ee042e", "ext": "js", "size": 9062, "code": "seek(target) {\n    var desiredVelocity = new exports.Vector3();\n    desiredVelocity.set( target.x, target.y, target.z );\n    desiredVelocity.subSelf( this.position );\n    desiredVelocity.normalize();\n    desiredVelocity.multiplyScalar( this.maxSpeed );\n    this.steeringForce.addSelf( desiredVelocity.subSelf(this.velocity) );\n  }", "code_tokens": ["seek", "(", "target", ")", "{", "var", "desiredVelocity", "=", "new", "exports", ".", "Vector3", "(", ")", ";", "desiredVelocity", ".", "set", "(", "target", ".", "x", ",", "target", ".", "y", ",", "target", ".", "z", ")", ";", "desiredVelocity", ".", "subSelf", "(", "this", ".", "position", ")", ";", "desiredVelocity", ".", "normalize", "(", ")", ";", "desiredVelocity", ".", "multiplyScalar", "(", "this", ".", "maxSpeed", ")", ";", "this", ".", "steeringForce", ".", "addSelf", "(", "desiredVelocity", ".", "subSelf", "(", "this", ".", "velocity", ")", ")", ";", "}"], "original_docstring": "/**\n   * @access public\n   * @param {Vector3} target position that you want to approach to\n   * @description Seek to specific position. This always pass the position. This works like a pendulum.\n   */", "comment": ["/* BOIDS.Vector3 */"], "docstring_tokens": ["@access", "public", "@param", "{", "Vector3", "}", "target", "position", "that", "you", "want", "to", "approach", "to", "@description", "Seek", "to", "specific", "position", ".", "This", "always", "pass", "the", "position", ".", "This", "works", "like", "a", "pendulum", "."], "docstring": "@access public\n@param {Vector3} target position that you want to approach to\n@description Seek to specific position. This always pass the position. This works like a pendulum.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "target", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "@access public\n @param {Vector3} target position that you want to approach to\n @description Seek to specific position.", "short_docstring_tokens": ["@access", "public", "@param", "{", "Vector3", "}", "target", "position", "that", "you", "want", "to", "approach", "to", "@description", "Seek", "to", "specific", "position", "."], "original_string": "seek(/* BOIDS.Vector3 */target) {\n    var desiredVelocity = new exports.Vector3();\n    desiredVelocity.set( target.x, target.y, target.z );\n    desiredVelocity.subSelf( this.position );\n    desiredVelocity.normalize();\n    desiredVelocity.multiplyScalar( this.maxSpeed );\n    this.steeringForce.addSelf( desiredVelocity.subSelf(this.velocity) );\n  }", "id": "798bbd59bb00cd0de24878f6c98881311e1035f63fdb0a63f30a18f6056744cd"}
{"identifier": "flee", "parameters": {"target": null}, "return_type": null, "repo": "after12am/boids.js", "path": "src/core/SteeredVehicle.js", "language": "JavaScript", "stars_count": 30.0, "issues_count": 22.0, "forks_count": 12.0, "license": ["MIT"], "hexsha": "7835154bfe5dab55088655c6973df3d341ee042e", "ext": "js", "size": 9062, "code": "flee(target) {\n    var desiredVelocity = new exports.Vector3();\n    desiredVelocity.set( target.x, target.y, target.z );\n    desiredVelocity.subSelf( this.position );\n    desiredVelocity.normalize();\n    desiredVelocity.multiplyScalar( this.maxSpeed );\n    this.steeringForce.subSelf( desiredVelocity.subSelf(this.velocity) );\n  }", "code_tokens": ["flee", "(", "target", ")", "{", "var", "desiredVelocity", "=", "new", "exports", ".", "Vector3", "(", ")", ";", "desiredVelocity", ".", "set", "(", "target", ".", "x", ",", "target", ".", "y", ",", "target", ".", "z", ")", ";", "desiredVelocity", ".", "subSelf", "(", "this", ".", "position", ")", ";", "desiredVelocity", ".", "normalize", "(", ")", ";", "desiredVelocity", ".", "multiplyScalar", "(", "this", ".", "maxSpeed", ")", ";", "this", ".", "steeringForce", ".", "subSelf", "(", "desiredVelocity", ".", "subSelf", "(", "this", ".", "velocity", ")", ")", ";", "}"], "original_docstring": "/**\n   * @access public\n   * @param {Vector3} target position that you want to move away\n   * @description Move away from the specific position.\n   */", "comment": ["/* BOIDS.Vector3 */"], "docstring_tokens": ["@access", "public", "@param", "{", "Vector3", "}", "target", "position", "that", "you", "want", "to", "move", "away", "@description", "Move", "away", "from", "the", "specific", "position", "."], "docstring": "@access public\n@param {Vector3} target position that you want to move away\n@description Move away from the specific position.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "target", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "@access public\n @param {Vector3} target position that you want to move away\n @description Move away from the specific position.", "short_docstring_tokens": ["@access", "public", "@param", "{", "Vector3", "}", "target", "position", "that", "you", "want", "to", "move", "away", "@description", "Move", "away", "from", "the", "specific", "position", "."], "original_string": "flee(/* BOIDS.Vector3 */target) {\n    var desiredVelocity = new exports.Vector3();\n    desiredVelocity.set( target.x, target.y, target.z );\n    desiredVelocity.subSelf( this.position );\n    desiredVelocity.normalize();\n    desiredVelocity.multiplyScalar( this.maxSpeed );\n    this.steeringForce.subSelf( desiredVelocity.subSelf(this.velocity) );\n  }", "id": "63695e1c2960becafd0e559b4526ed777c4638e37237100637ab6b591dc01acb"}
{"identifier": "arrive", "parameters": {"target": null}, "return_type": null, "repo": "after12am/boids.js", "path": "src/core/SteeredVehicle.js", "language": "JavaScript", "stars_count": 30.0, "issues_count": 22.0, "forks_count": 12.0, "license": ["MIT"], "hexsha": "7835154bfe5dab55088655c6973df3d341ee042e", "ext": "js", "size": 9062, "code": "arrive(target) {\n    var arrivalThreshold = this.maxSpeed * 25;\n    var desiredVelocity = new exports.Vector3();\n    desiredVelocity.set( target.x, target.y, target.z );\n    desiredVelocity.subSelf( this.position );\n    desiredVelocity.normalize();\n    var dist = this.position.distanceTo( target );\n    if (dist > arrivalThreshold) desiredVelocity.multiplyScalar( this.maxSpeed );\n    else desiredVelocity.multiplyScalar( this.maxSpeed * dist / arrivalThreshold );\n    this.steeringForce.addSelf( desiredVelocity.subSelf(this.velocity) );\n  }", "code_tokens": ["arrive", "(", "target", ")", "{", "var", "arrivalThreshold", "=", "this", ".", "maxSpeed", "*", "25", ";", "var", "desiredVelocity", "=", "new", "exports", ".", "Vector3", "(", ")", ";", "desiredVelocity", ".", "set", "(", "target", ".", "x", ",", "target", ".", "y", ",", "target", ".", "z", ")", ";", "desiredVelocity", ".", "subSelf", "(", "this", ".", "position", ")", ";", "desiredVelocity", ".", "normalize", "(", ")", ";", "var", "dist", "=", "this", ".", "position", ".", "distanceTo", "(", "target", ")", ";", "if", "(", "dist", ">", "arrivalThreshold", ")", "desiredVelocity", ".", "multiplyScalar", "(", "this", ".", "maxSpeed", ")", ";", "else", "desiredVelocity", ".", "multiplyScalar", "(", "this", ".", "maxSpeed", "*", "dist", "/", "arrivalThreshold", ")", ";", "this", ".", "steeringForce", ".", "addSelf", "(", "desiredVelocity", ".", "subSelf", "(", "this", ".", "velocity", ")", ")", ";", "}"], "original_docstring": "/**\n   * @access public\n   * @param {Vector3} target position that you want to arrive\n   * @description Arrive to specific position. Not pass the position.\n   */", "comment": ["/* BOIDS.Vector3 */"], "docstring_tokens": ["@access", "public", "@param", "{", "Vector3", "}", "target", "position", "that", "you", "want", "to", "arrive", "@description", "Arrive", "to", "specific", "position", ".", "Not", "pass", "the", "position", "."], "docstring": "@access public\n@param {Vector3} target position that you want to arrive\n@description Arrive to specific position. Not pass the position.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "target", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "@access public\n @param {Vector3} target position that you want to arrive\n @description Arrive to specific position.", "short_docstring_tokens": ["@access", "public", "@param", "{", "Vector3", "}", "target", "position", "that", "you", "want", "to", "arrive", "@description", "Arrive", "to", "specific", "position", "."], "original_string": "arrive(/* BOIDS.Vector3 */target) {\n\n    var arrivalThreshold = this.maxSpeed * 25;\n    var desiredVelocity = new exports.Vector3();\n    desiredVelocity.set( target.x, target.y, target.z );\n    desiredVelocity.subSelf( this.position );\n    desiredVelocity.normalize();\n\n    var dist = this.position.distanceTo( target );\n    if (dist > arrivalThreshold) desiredVelocity.multiplyScalar( this.maxSpeed );\n    else desiredVelocity.multiplyScalar( this.maxSpeed * dist / arrivalThreshold );\n\n    this.steeringForce.addSelf( desiredVelocity.subSelf(this.velocity) );\n  }", "id": "60b9ff2aeb0a29ed1b702c3f51995513162812662423467769b7e608aacda108"}
{"identifier": "patrol", "parameters": {"paths": null, "loop": null}, "return_type": null, "repo": "after12am/boids.js", "path": "src/core/SteeredVehicle.js", "language": "JavaScript", "stars_count": 30.0, "issues_count": 22.0, "forks_count": 12.0, "license": ["MIT"], "hexsha": "7835154bfe5dab55088655c6973df3d341ee042e", "ext": "js", "size": 9062, "code": "patrol(paths, loop) {\n    loop = loop || false;\n    var isLast = this.pathIndex >= paths.length - 1;\n    if (this.position.distanceTo(paths[this.pathIndex]) < this.pathThreshold)\n    {\n      if (isLast && loop) this.pathIndex = 0;\n      else if (!isLast) this.pathIndex++;\n    }\n    if (isLast && !loop) this.arrive(paths[this.pathIndex]);\n    else this.seek(paths[this.pathIndex]);\n  }", "code_tokens": ["patrol", "(", "paths", ",", "loop", ")", "{", "loop", "=", "loop", "||", "false", ";", "var", "isLast", "=", "this", ".", "pathIndex", ">=", "paths", ".", "length", "-", "1", ";", "if", "(", "this", ".", "position", ".", "distanceTo", "(", "paths", "[", "this", ".", "pathIndex", "]", ")", "<", "this", ".", "pathThreshold", ")", "{", "if", "(", "isLast", "&&", "loop", ")", "this", ".", "pathIndex", "=", "0", ";", "else", "if", "(", "!", "isLast", ")", "this", ".", "pathIndex", "++", ";", "}", "if", "(", "isLast", "&&", "!", "loop", ")", "this", ".", "arrive", "(", "paths", "[", "this", ".", "pathIndex", "]", ")", ";", "else", "this", ".", "seek", "(", "paths", "[", "this", ".", "pathIndex", "]", ")", ";", "}"], "original_docstring": "/**\n   * @access public\n   * @param {Array} paths array of Vector3. position list that you want to approach to\n   * @param {Boolean} loop position that you want to approach to\n   */", "comment": [], "docstring_tokens": ["@access", "public", "@param", "{", "Array", "}", "paths", "array", "of", "Vector3", ".", "position", "list", "that", "you", "want", "to", "approach", "to", "@param", "{", "Boolean", "}", "loop", "position", "that", "you", "want", "to", "approach", "to"], "docstring": "@access public\n@param {Array} paths array of Vector3. position list that you want to approach to\n@param {Boolean} loop position that you want to approach to", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "paths", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "loop", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "@access public\n @param {Array} paths array of Vector3.", "short_docstring_tokens": ["@access", "public", "@param", "{", "Array", "}", "paths", "array", "of", "Vector3", "."], "original_string": "patrol(paths, loop) {\n    loop = loop || false;\n\n    var isLast = this.pathIndex >= paths.length - 1;\n\n    if (this.position.distanceTo(paths[this.pathIndex]) < this.pathThreshold)\n    {\n      if (isLast && loop) this.pathIndex = 0;\n      else if (!isLast) this.pathIndex++;\n    }\n\n    if (isLast && !loop) this.arrive(paths[this.pathIndex]);\n    else this.seek(paths[this.pathIndex]);\n  }", "id": "d9fc04dfb6a3795736126849e58600d92d4881262640a98042a7519354b11291"}
{"identifier": "call", "parameters": {"f": null, "scope": null, "args": null}, "return_type": null, "repo": "SlavaJan/gb_yii2", "path": "backend/web/js/jquery.nouislider.js", "language": "JavaScript", "stars_count": 292.0, "issues_count": 8.0, "forks_count": 56.0, "license": ["BSD-3-Clause"], "hexsha": "6dd5a4b5bf0a1d6820ef33e3edd12fcd64f9ed46", "ext": "js", "size": 31241, "code": "function call ( f, scope, args ) {\n\t\t\tif( !$.isArray(f) ){\n\t\t\t\tf = [f];\n\t\t\t}\n\t\t\t$.each(f,function(i,q){\n\t\t\t\tif (typeof q === \"function\") {\n\t\t\t\t\tq.call(scope, args);\n\t\t\t\t}\n\t\t\t});\n\t\t}", "code_tokens": ["function", "call", "(", "f", ",", "scope", ",", "args", ")", "{", "if", "(", "!", "$", ".", "isArray", "(", "f", ")", ")", "{", "f", "=", "[", "f", "]", ";", "}", "$", ".", "each", "(", "f", ",", "function", "(", "i", ",", "q", ")", "{", "if", "(", "typeof", "q", "===", "\"function\"", ")", "{", "q", ".", "call", "(", "scope", ",", "args", ")", ";", "}", "}", ")", ";", "}"], "original_docstring": "// Test an array of objects, and calls them if they are a function.\r", "comment": ["// Allow the passing of an unwrapped function.\r", "// Leaves other code a more comprehensible.\r"], "docstring_tokens": ["Test", "an", "array", "of", "objects", "and", "calls", "them", "if", "they", "are", "a", "function", "."], "docstring": "Test an array of objects, and calls them if they are a function.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "f", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "scope", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "args", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Test an array of objects, and calls them if they are a function.", "short_docstring_tokens": ["Test", "an", "array", "of", "objects", "and", "calls", "them", "if", "they", "are", "a", "function", "."], "original_string": "function call ( f, scope, args ) {\r\n\r\n\t\t\t// Allow the passing of an unwrapped function.\r\n\t\t\t// Leaves other code a more comprehensible.\r\n\t\t\tif( !$.isArray(f) ){\r\n\t\t\t\tf = [f];\r\n\t\t\t}\r\n\r\n\t\t\t$.each(f,function(i,q){\r\n\t\t\t\tif (typeof q === \"function\") {\r\n\t\t\t\t\tq.call(scope, args);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}", "id": "2ce4d19f5ad974dca5ac1cf084c633387fbf6982711e2fda8104a249ae908d76"}
{"identifier": "animSprite", "parameters": {"name": null, "x": null, "y": null, "wi": null, "he": null, "num": null, "aspeed": null}, "return_type": "<not_specific>", "repo": "dev-oiram/PixiGameBase", "path": "modules/simpleSprite.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "8ea78642350a6c7d92cd0d6bfc5ed7a73d932338", "ext": "js", "size": 1191, "code": "function animSprite(name,x,y,wi,he,num,aspeed){\n\tvar frames = [];\n\tfor (var i = 1; i <= num; i++) {\n\t    var val = i < 10 ? i : i;\n\t    frames.push(Texture.from(name + val));\n\t}\n\tvar anim = new AnimatedSprite(frames);\n\tanim.anchor.set(centerAnchor);\n\tanim.x = x;\n\tanim.y = y;\n\tanim.width = wi;\n\tanim.height = he;\n\tanim.animationSpeed = aspeed;\n\treturn anim;\n}", "code_tokens": ["function", "animSprite", "(", "name", ",", "x", ",", "y", ",", "wi", ",", "he", ",", "num", ",", "aspeed", ")", "{", "var", "frames", "=", "[", "]", ";", "for", "(", "var", "i", "=", "1", ";", "i", "<=", "num", ";", "i", "++", ")", "{", "var", "val", "=", "i", "<", "10", "?", "i", ":", "i", ";", "frames", ".", "push", "(", "Texture", ".", "from", "(", "name", "+", "val", ")", ")", ";", "}", "var", "anim", "=", "new", "AnimatedSprite", "(", "frames", ")", ";", "anim", ".", "anchor", ".", "set", "(", "centerAnchor", ")", ";", "anim", ".", "x", "=", "x", ";", "anim", ".", "y", "=", "y", ";", "anim", ".", "width", "=", "wi", ";", "anim", ".", "height", "=", "he", ";", "anim", ".", "animationSpeed", "=", "aspeed", ";", "return", "anim", ";", "}"], "original_docstring": "//Single Sprites and animation functions===============================================>", "comment": ["// create an array of textures from an image path", "// magically works since the spritesheet was loaded with the pixi loader", "// create an AnimatedSprite (brings back memories from the days of Flash, right ?)", "/*\n\t * An AnimatedSprite inherits all the properties of a PIXI sprite\n\t * so you can change its position, its anchor, mask it, etc\n\t */"], "docstring_tokens": ["Single", "Sprites", "and", "animation", "functions", ">"], "docstring": "Single Sprites and animation functions>", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "name", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "x", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "y", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "wi", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "he", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "num", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "aspeed", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Single Sprites and animation functions===============================================>", "short_docstring_tokens": ["Single", "Sprites", "and", "animation", "functions", "===============================================", ">"], "original_string": "function animSprite(name,x,y,wi,he,num,aspeed){\n\t// create an array of textures from an image path\n\tvar frames = [];\n\n\tfor (var i = 1; i <= num; i++) {\n\t    var val = i < 10 ? i : i;\n\n\t    // magically works since the spritesheet was loaded with the pixi loader\n\t    frames.push(Texture.from(name + val));\n\t}\n\n\t// create an AnimatedSprite (brings back memories from the days of Flash, right ?)\n\tvar anim = new AnimatedSprite(frames);\n\n\t/*\n\t * An AnimatedSprite inherits all the properties of a PIXI sprite\n\t * so you can change its position, its anchor, mask it, etc\n\t */\n\tanim.anchor.set(centerAnchor);\n\tanim.x = x;\n\tanim.y = y;\n\tanim.width = wi;\n\tanim.height = he;\n\tanim.animationSpeed = aspeed;\n\n\treturn anim;\n}", "id": "93354592ce9ce1532c12053a4fc532090d37ed8d99f0f8461b8aba7b4f4bcf31"}
{"identifier": "leseRezepte", "parameters": {}, "return_type": null, "repo": "Jey-Cee/iobroker-scripts", "path": "RezeptBuch/Rezept_speichern.js", "language": "JavaScript", "stars_count": 3.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "45c6dbec62237370ffe5d61dff1835be23f89668", "ext": "js", "size": 5145, "code": "function leseRezepte(){\n    var Rezepte = fs.readFileSync(pfadRezeptBuch);\n    Tag = getState(\"javascript.0.Essensplan.vis_switch\").val;\n    var Name = getState(\"javascript.0.Essensplan.\" + Tag + \".Name\").val;\n    var Link = getState(\"javascript.0.Essensplan.\" + Tag + \".Link\").val;\n    var Zutaten = getState(\"javascript.0.Essensplan.\" + Tag + \".Zutaten\").val;\n    var Zubereitung = getState(\"javascript.0.Essensplan.\" + Tag + \".Zubereitung\").val;\n        setTimeout(function(){\n        Rezepte = JSON.parse(Rezepte);\n        var vorhanden;\n        for (var z = 0; z <= Rezepte.Rezept.length -1; z++){        \n            var Name_json = Rezepte.Rezept[z].Name;\n            var Link_json = Rezepte.Rezept[z].Link;\n            var Zutaten_json = Rezepte.Rezept[z].Zutaten;\n            var Zubereitung_json = Rezepte.Rezept[z].Zubereitung;\n            if (Name === Name_json && Link === Link_json && Zutaten === Zutaten_json && Zubereitung === Zubereitung_json){\n                vorhanden = \"true\";\n            }else{\n                vorhanden = \"false\";\n            }\n        }\n        if(vorhanden === \"false\"){schreibeRezept(); log(\"Rezept hinzugef\u00fcgt\");}\n        }, 300);\n}", "code_tokens": ["function", "leseRezepte", "(", ")", "{", "var", "Rezepte", "=", "fs", ".", "readFileSync", "(", "pfadRezeptBuch", ")", ";", "Tag", "=", "getState", "(", "\"javascript.0.Essensplan.vis_switch\"", ")", ".", "val", ";", "var", "Name", "=", "getState", "(", "\"javascript.0.Essensplan.\"", "+", "Tag", "+", "\".Name\"", ")", ".", "val", ";", "var", "Link", "=", "getState", "(", "\"javascript.0.Essensplan.\"", "+", "Tag", "+", "\".Link\"", ")", ".", "val", ";", "var", "Zutaten", "=", "getState", "(", "\"javascript.0.Essensplan.\"", "+", "Tag", "+", "\".Zutaten\"", ")", ".", "val", ";", "var", "Zubereitung", "=", "getState", "(", "\"javascript.0.Essensplan.\"", "+", "Tag", "+", "\".Zubereitung\"", ")", ".", "val", ";", "setTimeout", "(", "function", "(", ")", "{", "Rezepte", "=", "JSON", ".", "parse", "(", "Rezepte", ")", ";", "var", "vorhanden", ";", "for", "(", "var", "z", "=", "0", ";", "z", "<=", "Rezepte", ".", "Rezept", ".", "length", "-", "1", ";", "z", "++", ")", "{", "var", "Name_json", "=", "Rezepte", ".", "Rezept", "[", "z", "]", ".", "Name", ";", "var", "Link_json", "=", "Rezepte", ".", "Rezept", "[", "z", "]", ".", "Link", ";", "var", "Zutaten_json", "=", "Rezepte", ".", "Rezept", "[", "z", "]", ".", "Zutaten", ";", "var", "Zubereitung_json", "=", "Rezepte", ".", "Rezept", "[", "z", "]", ".", "Zubereitung", ";", "if", "(", "Name", "===", "Name_json", "&&", "Link", "===", "Link_json", "&&", "Zutaten", "===", "Zutaten_json", "&&", "Zubereitung", "===", "Zubereitung_json", ")", "{", "vorhanden", "=", "\"true\"", ";", "}", "else", "{", "vorhanden", "=", "\"false\"", ";", "}", "}", "if", "(", "vorhanden", "===", "\"false\"", ")", "{", "schreibeRezept", "(", ")", ";", "log", "(", "\"Rezept hinzugef\u00fcgt\")", ";", "}", "", "}", ",", "300", ")", ";", "}"], "original_docstring": "//Liest die RezeptBuch.json ein und schreibt sie in eine Variable", "comment": ["/*Essensplan.vis_switch*/", "//Pr\u00fcft ob das Rezept schon im RezeptBuch vorhanden ist", "//schreibeRezept();"], "docstring_tokens": ["Liest", "die", "RezeptBuch", ".", "json", "ein", "und", "schreibt", "sie", "in", "eine", "Variable"], "docstring": "Liest die RezeptBuch.json ein und schreibt sie in eine Variable", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Liest die RezeptBuch.json ein und schreibt sie in eine Variable", "short_docstring_tokens": ["Liest", "die", "RezeptBuch", ".", "json", "ein", "und", "schreibt", "sie", "in", "eine", "Variable"], "original_string": "function leseRezepte(){\n    var Rezepte = fs.readFileSync(pfadRezeptBuch);\n    Tag = getState(\"javascript.0.Essensplan.vis_switch\"/*Essensplan.vis_switch*/).val;\n    var Name = getState(\"javascript.0.Essensplan.\" + Tag + \".Name\").val;\n    var Link = getState(\"javascript.0.Essensplan.\" + Tag + \".Link\").val;\n    var Zutaten = getState(\"javascript.0.Essensplan.\" + Tag + \".Zutaten\").val;\n    var Zubereitung = getState(\"javascript.0.Essensplan.\" + Tag + \".Zubereitung\").val;\n        \n        setTimeout(function(){\n        Rezepte = JSON.parse(Rezepte);\n        \n        //Pr\u00fcft ob das Rezept schon im RezeptBuch vorhanden ist\n        var vorhanden;\n        \n        for (var z = 0; z <= Rezepte.Rezept.length -1; z++){        \n            var Name_json = Rezepte.Rezept[z].Name;\n            var Link_json = Rezepte.Rezept[z].Link;\n            var Zutaten_json = Rezepte.Rezept[z].Zutaten;\n            var Zubereitung_json = Rezepte.Rezept[z].Zubereitung;\n            \n            if (Name === Name_json && Link === Link_json && Zutaten === Zutaten_json && Zubereitung === Zubereitung_json){\n                vorhanden = \"true\";\n            }else{\n                //schreibeRezept();\n                vorhanden = \"false\";\n            }\n        }\n        if(vorhanden === \"false\"){schreibeRezept(); log(\"Rezept hinzugef\u00fcgt\");}\n        }, 300);\n        \n        \n        \n}", "id": "12a0ac69116db471dae7174a992fb92de4104c93423049f662aea52019570edd"}
{"identifier": "schreibeRezept", "parameters": {}, "return_type": "<not_specific>", "repo": "Jey-Cee/iobroker-scripts", "path": "RezeptBuch/Rezept_speichern.js", "language": "JavaScript", "stars_count": 3.0, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "45c6dbec62237370ffe5d61dff1835be23f89668", "ext": "js", "size": 5145, "code": "function schreibeRezept(){\n    Tag = getState(\"javascript.0.Essensplan.vis_switch\").val;\n    fs.open(pfadRezeptBuch, 'r+', function(err, fd) {\n        if (err) {\n            return console.error(err);\n        }\n        fs.fstat(fd, function(err, stats){\n            var Name = getState(\"javascript.0.Essensplan.\" + Tag + \".Name\").val;\n            var Link = getState(\"javascript.0.Essensplan.\" + Tag + \".Link\").val;\n            var Zutaten = getState(\"javascript.0.Essensplan.\" + Tag + \".Zutaten\").val;\n            var Zubereitung = getState(\"javascript.0.Essensplan.\" + Tag + \".Zubereitung\").val;\n            var Datum = new Date();\n            var Daten;\n            if (stats.size <=25){\n                Daten = '{\"ID\":\"' + erzeugeID() + '\",\"Name\":\"' + Name + '\",\"Link\":\"' + Link + '\",\"Zutaten\":\"' + Zutaten + '\",\"Zubereitung\":\"' + Zubereitung + '\",\"Datum\":\"' + Datum + '\"}]}';\n                }else{\n                    Daten = ', {\"ID\":\"' + erzeugeID() + '\",\"Name\":\"' + Name + '\",\"Link\":\"' + Link + '\",\"Zutaten\":\"' + Zutaten + '\",\"Zubereitung\":\"' + Zubereitung + '\",\"Datum\":\"' + Datum + '\"}]}';\n                }\n            Daten = Daten.replace('}],', '},');\n             log(fd);\n             log(Tag);\n             log(Daten);\n            fs.write(fd, Daten, stats.size -2, function(err, fd) {   \n                if (err) {\n                    return console.error(err);\n                    }\n            });\n        });\n    });\n}", "code_tokens": ["function", "schreibeRezept", "(", ")", "{", "Tag", "=", "getState", "(", "\"javascript.0.Essensplan.vis_switch\"", ")", ".", "val", ";", "fs", ".", "open", "(", "pfadRezeptBuch", ",", "'r+'", ",", "function", "(", "err", ",", "fd", ")", "{", "if", "(", "err", ")", "{", "return", "console", ".", "error", "(", "err", ")", ";", "}", "fs", ".", "fstat", "(", "fd", ",", "function", "(", "err", ",", "stats", ")", "{", "var", "Name", "=", "getState", "(", "\"javascript.0.Essensplan.\"", "+", "Tag", "+", "\".Name\"", ")", ".", "val", ";", "var", "Link", "=", "getState", "(", "\"javascript.0.Essensplan.\"", "+", "Tag", "+", "\".Link\"", ")", ".", "val", ";", "var", "Zutaten", "=", "getState", "(", "\"javascript.0.Essensplan.\"", "+", "Tag", "+", "\".Zutaten\"", ")", ".", "val", ";", "var", "Zubereitung", "=", "getState", "(", "\"javascript.0.Essensplan.\"", "+", "Tag", "+", "\".Zubereitung\"", ")", ".", "val", ";", "var", "Datum", "=", "new", "Date", "(", ")", ";", "var", "Daten", ";", "if", "(", "stats", ".", "size", "<=", "25", ")", "{", "Daten", "=", "'{\"ID\":\"'", "+", "erzeugeID", "(", ")", "+", "'\",\"Name\":\"'", "+", "Name", "+", "'\",\"Link\":\"'", "+", "Link", "+", "'\",\"Zutaten\":\"'", "+", "Zutaten", "+", "'\",\"Zubereitung\":\"'", "+", "Zubereitung", "+", "'\",\"Datum\":\"'", "+", "Datum", "+", "'\"}]}'", ";", "}", "else", "{", "Daten", "=", "', {\"ID\":\"'", "+", "erzeugeID", "(", ")", "+", "'\",\"Name\":\"'", "+", "Name", "+", "'\",\"Link\":\"'", "+", "Link", "+", "'\",\"Zutaten\":\"'", "+", "Zutaten", "+", "'\",\"Zubereitung\":\"'", "+", "Zubereitung", "+", "'\",\"Datum\":\"'", "+", "Datum", "+", "'\"}]}'", ";", "}", "Daten", "=", "Daten", ".", "replace", "(", "'}],'", ",", "'},'", ")", ";", "log", "(", "fd", ")", ";", "log", "(", "Tag", ")", ";", "log", "(", "Daten", ")", ";", "fs", ".", "write", "(", "fd", ",", "Daten", ",", "stats", ".", "size", "-", "2", ",", "function", "(", "err", ",", "fd", ")", "{", "if", "(", "err", ")", "{", "return", "console", ".", "error", "(", "err", ")", ";", "}", "}", ")", ";", "}", ")", ";", "}", ")", ";", "}"], "original_docstring": "//Schreibt die Rezepte ans Ende der Datei", "comment": ["/*Essensplan.vis_switch*/", "//Datei \u00f6ffnen", "//Daten Sammeln und in String packen", "//Schreibe Daten"], "docstring_tokens": ["Schreibt", "die", "Rezepte", "ans", "Ende", "der", "Datei"], "docstring": "Schreibt die Rezepte ans Ende der Datei", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Schreibt die Rezepte ans Ende der Datei", "short_docstring_tokens": ["Schreibt", "die", "Rezepte", "ans", "Ende", "der", "Datei"], "original_string": "function schreibeRezept(){\n    Tag = getState(\"javascript.0.Essensplan.vis_switch\"/*Essensplan.vis_switch*/).val;\n    //Datei \u00f6ffnen\n    fs.open(pfadRezeptBuch, 'r+', function(err, fd) {\n        if (err) {\n            return console.error(err);\n        }\n\n        fs.fstat(fd, function(err, stats){\n        \n            //Daten Sammeln und in String packen\n            var Name = getState(\"javascript.0.Essensplan.\" + Tag + \".Name\").val;\n            var Link = getState(\"javascript.0.Essensplan.\" + Tag + \".Link\").val;\n            var Zutaten = getState(\"javascript.0.Essensplan.\" + Tag + \".Zutaten\").val;\n            var Zubereitung = getState(\"javascript.0.Essensplan.\" + Tag + \".Zubereitung\").val;\n            var Datum = new Date();\n            \n            var Daten;\n            \n            if (stats.size <=25){\n                Daten = '{\"ID\":\"' + erzeugeID() + '\",\"Name\":\"' + Name + '\",\"Link\":\"' + Link + '\",\"Zutaten\":\"' + Zutaten + '\",\"Zubereitung\":\"' + Zubereitung + '\",\"Datum\":\"' + Datum + '\"}]}';\n                }else{\n                    Daten = ', {\"ID\":\"' + erzeugeID() + '\",\"Name\":\"' + Name + '\",\"Link\":\"' + Link + '\",\"Zutaten\":\"' + Zutaten + '\",\"Zubereitung\":\"' + Zubereitung + '\",\"Datum\":\"' + Datum + '\"}]}';\n                }\n                \n            Daten = Daten.replace('}],', '},');\n            \n             log(fd);\n             log(Tag);\n             log(Daten);\n             \n            //Schreibe Daten\n            fs.write(fd, Daten, stats.size -2, function(err, fd) {   \n                if (err) {\n                    return console.error(err);\n                    }\n            });\n        });\n\n    });\n}", "id": "b16e17c2247f5ebc86af90e9024a03833db3d685b8c32c0cb57547524bda64f8"}
{"identifier": "handleRequest", "parameters": {"request": null}, "return_type": "<not_specific>", "repo": "shloksoni/redirecting-cloudflare", "path": "index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0", "MIT"], "hexsha": "846a4447bf2afa320fea28f9766e0307ed6bef6a", "ext": "js", "size": 2147, "code": "async function handleRequest(request) {\n  let variants = (await fetch(apiUrl)\n                  .then(res => res.json()))[\"variants\"];  \n  let variantUrl = parseCookies(request)['defaultRedirect'];\n  if (!variantUrl) {\n    variantId= Math.floor(variants.length * Math.random()); \n    variantUrl = variants[variantId];\n  }\n  else{\n    variantId = Number(variantUrl[variantUrl.length-1]);\n  }\n  getRandomPlugin = plugins[variantId];\n  let customPage= await fetch(variantUrl).then(res => customHTML.transform(res));  \n  customPage.headers.append(\"Set-Cookie\", `defaultRedirect=${variantUrl}`);  \n  return customPage\n}", "code_tokens": ["async", "function", "handleRequest", "(", "request", ")", "{", "let", "variants", "=", "(", "await", "fetch", "(", "apiUrl", ")", ".", "then", "(", "res", "=>", "res", ".", "json", "(", ")", ")", ")", "[", "\"variants\"", "]", ";", "let", "variantUrl", "=", "parseCookies", "(", "request", ")", "[", "'defaultRedirect'", "]", ";", "if", "(", "!", "variantUrl", ")", "{", "variantId", "=", "Math", ".", "floor", "(", "variants", ".", "length", "*", "Math", ".", "random", "(", ")", ")", ";", "variantUrl", "=", "variants", "[", "variantId", "]", ";", "}", "else", "{", "variantId", "=", "Number", "(", "variantUrl", "[", "variantUrl", ".", "length", "-", "1", "]", ")", ";", "}", "getRandomPlugin", "=", "plugins", "[", "variantId", "]", ";", "let", "customPage", "=", "await", "fetch", "(", "variantUrl", ")", ".", "then", "(", "res", "=>", "customHTML", ".", "transform", "(", "res", ")", ")", ";", "customPage", ".", "headers", ".", "append", "(", "\"Set-Cookie\"", ",", "`", "${", "variantUrl", "}", "`", ")", ";", "return", "customPage", "}"], "original_docstring": "/**\n * Rewrite the webpage and return to user\n * @param {Request} request\n */", "comment": ["//fetches the data from the specified url", "//search for stored URL in cookies", "//if no URL was found in the cookies genereate random URL", "//Customize the webpage", "// fetch the variant webpage and rewrite it", "// set cookie on client side"], "docstring_tokens": ["Rewrite", "the", "webpage", "and", "return", "to", "user", "@param", "{", "Request", "}", "request"], "docstring": "Rewrite the webpage and return to user\n@param {Request} request", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "request", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Rewrite the webpage and return to user\n @param {Request} request", "short_docstring_tokens": ["Rewrite", "the", "webpage", "and", "return", "to", "user", "@param", "{", "Request", "}", "request"], "original_string": "async function handleRequest(request) {\n  //fetches the data from the specified url\n  let variants = (await fetch(apiUrl)\n                  .then(res => res.json()))[\"variants\"];  \n  //search for stored URL in cookies\n  let variantUrl = parseCookies(request)['defaultRedirect'];\n  \n  //if no URL was found in the cookies genereate random URL\n  if (!variantUrl) {\n    variantId= Math.floor(variants.length * Math.random()); \n    variantUrl = variants[variantId];\n  }\n  else{\n    variantId = Number(variantUrl[variantUrl.length-1]);\n  }\n  getRandomPlugin = plugins[variantId];\n   \n  //Customize the webpage\n  let customPage= await fetch(variantUrl).then(res => customHTML.transform(res));  // fetch the variant webpage and rewrite it\n  customPage.headers.append(\"Set-Cookie\", `defaultRedirect=${variantUrl}`);  // set cookie on client side\n  return customPage\n}", "id": "41e159c820402e4a56c939315e42c8a05abe603ad89a9dffd44f9c8fe76ecbfa"}
{"identifier": "weatherCallback", "parameters": {"weatherData": null}, "return_type": null, "repo": "ERieger/surf-smart", "path": "scripts.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "70e5a3a645f38c9824e347e4df63a9cc9861f7c4", "ext": "js", "size": 11676, "code": "function weatherCallback(weatherData) {\n    var imgCall = 'http://openweathermap.org/img/wn/' + weatherData.weather[0].icon + '.png';\n    weatherIcon.setAttribute('src', imgCall);\n    outlook.innerHTML = weatherData.weather[0].description;\n    cTemp.innerHTML = `${Math.round(weatherData.main.temp)}\u00b0C`;\n    forecast.innerHTML = weatherData.weather[0].description;\n    wind.innerHTML = `${Math.round(weatherData.wind.speed)} Km/h`;\n    min.innerHTML = `${Math.round(weatherData.main.temp_min)}\u00b0C`;\n    max.innerHTML = `${Math.round(weatherData.main.temp_max)}\u00b0C`;\n    $.getJSON(uvCall, uvCallBack);\n}", "code_tokens": ["function", "weatherCallback", "(", "weatherData", ")", "{", "var", "imgCall", "=", "'http://openweathermap.org/img/wn/'", "+", "weatherData", ".", "weather", "[", "0", "]", ".", "icon", "+", "'.png'", ";", "weatherIcon", ".", "setAttribute", "(", "'src'", ",", "imgCall", ")", ";", "outlook", ".", "innerHTML", "=", "weatherData", ".", "weather", "[", "0", "]", ".", "description", ";", "cTemp", ".", "innerHTML", "=", "`", "${", "Math", ".", "round", "(", "weatherData", ".", "main", ".", "temp", ")", "}", ";", "", "forecast", ".", "innerHTML", "=", "weatherData", ".", "weather", "[", "0", "]", ".", "description", ";", "wind", ".", "innerHTML", "=", "`", "${", "Math", ".", "round", "(", "weatherData", ".", "wind", ".", "speed", ")", "}", "`", ";", "min", ".", "innerHTML", "=", "`", "${", "Math", ".", "round", "(", "weatherData", ".", "main", ".", "temp_min", ")", "}", ";", "", "max", ".", "innerHTML", "=", "`", "${", "Math", ".", "round", "(", "weatherData", ".", "main", ".", "temp_max", ")", "}", ";", "", "$", ".", "getJSON", "(", "uvCall", ",", "uvCallBack", ")", ";", "}"], "original_docstring": "// Access open weather API and add retrieved data to display on page", "comment": ["// Take icon code from object and access icon from open weather API cloud", "// Show weather icon", "// Update page to include weather", "// Call API using var apiCall, then parse JSON object into function"], "docstring_tokens": ["Access", "open", "weather", "API", "and", "add", "retrieved", "data", "to", "display", "on", "page"], "docstring": "Access open weather API and add retrieved data to display on page", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "weatherData", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Access open weather API and add retrieved data to display on page", "short_docstring_tokens": ["Access", "open", "weather", "API", "and", "add", "retrieved", "data", "to", "display", "on", "page"], "original_string": "function weatherCallback(weatherData) {\n    // Take icon code from object and access icon from open weather API cloud\n    var imgCall = 'http://openweathermap.org/img/wn/' + weatherData.weather[0].icon + '.png';\n    // Show weather icon\n    weatherIcon.setAttribute('src', imgCall);\n\n    // Update page to include weather\n    outlook.innerHTML = weatherData.weather[0].description;\n    cTemp.innerHTML = `${Math.round(weatherData.main.temp)}\u00b0C`;\n    forecast.innerHTML = weatherData.weather[0].description;\n    wind.innerHTML = `${Math.round(weatherData.wind.speed)} Km/h`;\n    min.innerHTML = `${Math.round(weatherData.main.temp_min)}\u00b0C`;\n    max.innerHTML = `${Math.round(weatherData.main.temp_max)}\u00b0C`;\n\n    // Call API using var apiCall, then parse JSON object into function\n    $.getJSON(uvCall, uvCallBack);\n}", "id": "9bfb4db69d051f5725219e3f7a4e5b6cf8ba865ca846b654a3fb2fc07db66b9f"}
{"identifier": "styleChildren", "parameters": {"children": null}, "return_type": null, "repo": "sethburtonhall/protege", "path": "src/components/job/JobTemplate.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "67fdba920f701320f6597f8df8e57cae921413c4", "ext": "js", "size": 6798, "code": "function styleChildren(children) {\n      children.forEach((child) => {\n        const el = child\n        const childTag = child.tagName\n        el.style = ''\n        el.classList = quillStyle[childTag]\n        if (child.hasChildNodes()) {\n          const grandChildren = [...child.children]\n          styleChildren(grandChildren)\n        }\n      })\n    }", "code_tokens": ["function", "styleChildren", "(", "children", ")", "{", "children", ".", "forEach", "(", "(", "child", ")", "=>", "{", "const", "el", "=", "child", "const", "childTag", "=", "child", ".", "tagName", "el", ".", "style", "=", "''", "el", ".", "classList", "=", "quillStyle", "[", "childTag", "]", "if", "(", "child", ".", "hasChildNodes", "(", ")", ")", "{", "const", "grandChildren", "=", "[", "...", "child", ".", "children", "]", "styleChildren", "(", "grandChildren", ")", "}", "}", ")", "}"], "original_docstring": "// Cleans up the text provided by QuillJS wysiwyg", "comment": [], "docstring_tokens": ["Cleans", "up", "the", "text", "provided", "by", "QuillJS", "wysiwyg"], "docstring": "Cleans up the text provided by QuillJS wysiwyg", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "children", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Cleans up the text provided by QuillJS wysiwyg", "short_docstring_tokens": ["Cleans", "up", "the", "text", "provided", "by", "QuillJS", "wysiwyg"], "original_string": "function styleChildren(children) {\n      children.forEach((child) => {\n        const el = child\n        const childTag = child.tagName\n\n        el.style = ''\n        el.classList = quillStyle[childTag]\n        if (child.hasChildNodes()) {\n          const grandChildren = [...child.children]\n          styleChildren(grandChildren)\n        }\n      })\n    }", "id": "6049bc83e40c7d47abf4266755704b21cf3ed40e92ae3e72d44f9b422c761090"}
{"identifier": "update_timer", "parameters": {}, "return_type": null, "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "function update_timer()\n{\n    const timer_elem = (<div>\n        <h1>Sample Timer</h1>\n        <div class=\"timer\">The time is : {new Date().toLocaleTimeString()}</div>\n        </div>);\n    ReactDOM.render(\n        timer_elem,\n        document.getElementById('root')\n    );\n}", "code_tokens": ["function", "update_timer", "(", ")", "{", "const", "timer_elem", "=", "(", "<", "div", ">", "\n        ", "<", "h1", ">", "Sample Timer", "<", "/", "h1", ">", "\n        ", "<", "div", "class", "=", "\"timer\"", ">", "The time is : ", "{", "new", "Date", "(", ")", ".", "toLocaleTimeString", "(", ")", "}", "<", "/", "div", ">", "\n        ", "<", "/", "div", ">", ")", ";", "ReactDOM", ".", "render", "(", "timer_elem", ",", "document", ".", "getElementById", "(", "'root'", ")", ")", ";", "}"], "original_docstring": "// function that renders a time element", "comment": [], "docstring_tokens": ["function", "that", "renders", "a", "time", "element"], "docstring": "function that renders a time element", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "function that renders a time element", "short_docstring_tokens": ["function", "that", "renders", "a", "time", "element"], "original_string": "function update_timer()\n{\n    const timer_elem = (<div>\n        <h1>Sample Timer</h1>\n        <div class=\"timer\">The time is : {new Date().toLocaleTimeString()}</div>\n        </div>);\n    ReactDOM.render(\n        timer_elem,\n        document.getElementById('root')\n    );\n}", "id": "0172eb19ad7179149593194db28a6d82b861054286ade813150b80e8ac4c696d"}
{"identifier": "App", "parameters": {}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "function App()\n{\n    return (\n        <div>\n        <Welcome name=\"Rishav\"/>\n        <Welcome name=\"John\"/>\n        <Welcome name=\"Mark\"/>\n        </div>\n    )\n}", "code_tokens": ["function", "App", "(", ")", "{", "return", "(", "<", "div", ">", "\n        ", "<", "Welcome", "name", "=", "\"Rishav\"", "/", ">", "\n        ", "<", "Welcome", "name", "=", "\"John\"", "/", ">", "\n        ", "<", "Welcome", "name", "=", "\"Mark\"", "/", ">", "\n        ", "<", "/", "div", ">", ")", "}"], "original_docstring": "// component that is using other components", "comment": [], "docstring_tokens": ["component", "that", "is", "using", "other", "components"], "docstring": "component that is using other components", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "component that is using other components", "short_docstring_tokens": ["component", "that", "is", "using", "other", "components"], "original_string": "function App()\n{\n    return (\n        <div>\n        <Welcome name=\"Rishav\"/>\n        <Welcome name=\"John\"/>\n        <Welcome name=\"Mark\"/>\n        </div>\n    )\n}", "id": "2f410b81501e5bd88c3503bb3d2ed29f07247f47303ee68b610ec81a9a8a9655"}
{"identifier": "intro_element", "parameters": {"props": null}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "function intro_element(props){\n    return (\n        <div>\n            <Welcome name={props.user}/>\n            <div>This is a element rendered using react </div>\n            <UserDescription description={props.description}/>\n        </div>\n    )\n}", "code_tokens": ["function", "intro_element", "(", "props", ")", "{", "return", "(", "<", "div", ">", "\n            ", "<", "Welcome", "name", "=", "{", "props", ".", "user", "}", "/", ">", "\n            ", "<", "div", ">", "This is a element rendered using react ", "<", "/", "div", ">", "\n            ", "<", "UserDescription", "description", "=", "{", "props", ".", "description", "}", "/", ">", "\n        ", "<", "/", "div", ">", ")", "}"], "original_docstring": "// component rendering function which uses other smaller components", "comment": [], "docstring_tokens": ["component", "rendering", "function", "which", "uses", "other", "smaller", "components"], "docstring": "component rendering function which uses other smaller components", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "props", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "component rendering function which uses other smaller components", "short_docstring_tokens": ["component", "rendering", "function", "which", "uses", "other", "smaller", "components"], "original_string": "function intro_element(props){\n    return (\n        <div>\n            <Welcome name={props.user}/>\n            <div>This is a element rendered using react </div>\n            <UserDescription description={props.description}/>\n        </div>\n    )\n}", "id": "b6a75b831b85e2e8753aec39b11341fcaa77738455f047553b96bf4ec541f8fa"}
{"identifier": "tick", "parameters": {}, "return_type": null, "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "tick()\n    {\n        this.setState({\n            date : new Date()\n        });\n    }", "code_tokens": ["tick", "(", ")", "{", "this", ".", "setState", "(", "{", "date", ":", "new", "Date", "(", ")", "}", ")", ";", "}"], "original_docstring": "/*  fetches the current time and indicates that state has changed */", "comment": [], "docstring_tokens": ["fetches", "the", "current", "time", "and", "indicates", "that", "state", "has", "changed"], "docstring": "fetches the current time and indicates that state has changed", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "fetches the current time and indicates that state has changed", "short_docstring_tokens": ["fetches", "the", "current", "time", "and", "indicates", "that", "state", "has", "changed"], "original_string": "tick()\n    {\n        this.setState({\n            date : new Date()\n        });\n    }", "id": "c12bff577b179715dee6cb6e6a05f29b9de66f5a8428815d26c0dd768c51fb0a"}
{"identifier": "render", "parameters": {}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "render(){\n        return(\n            <div>\n                <h1>Hello, world!</h1>\n                <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n            </div>\n        )\n    }", "code_tokens": ["render", "(", ")", "{", "return", "(", "<", "div", ">", "\n                ", "<", "h1", ">", "Hello, world!", "<", "/", "h1", ">", "\n                ", "<", "h2", ">", "It is ", "{", "this", ".", "state", ".", "date", ".", "toLocaleTimeString", "(", ")", "}", ".", "<", "/", "h2", ">", "\n            ", "<", "/", "div", ">", ")", "}"], "original_docstring": "/* for using state, converted this.props to this.state\n     * this is called everytime when react detect state change */", "comment": [], "docstring_tokens": ["for", "using", "state", "converted", "this", ".", "props", "to", "this", ".", "state", "this", "is", "called", "everytime", "when", "react", "detect", "state", "change"], "docstring": "for using state, converted this.props to this.state\nthis is called everytime when react detect state change", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "for using state, converted this.props to this.state\n this is called everytime when react detect state change", "short_docstring_tokens": ["for", "using", "state", "converted", "this", ".", "props", "to", "this", ".", "state", "this", "is", "called", "everytime", "when", "react", "detect", "state", "change"], "original_string": "render(){\n        return(\n            <div>\n                <h1>Hello, world!</h1>\n                <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n            </div>\n        )\n    }", "id": "921657f8a0dc7d2fcfe1ce0820a888a28efe05d1b0e2f0169d6db7768bf732a0"}
{"identifier": "handleClick", "parameters": {}, "return_type": null, "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "handleClick(){\n        this.setState(state => ({\n            isToggleOn: !state.isToggleOn\n        }));\n    }", "code_tokens": ["handleClick", "(", ")", "{", "this", ".", "setState", "(", "state", "=>", "(", "{", "isToggleOn", ":", "!", "state", ".", "isToggleOn", "}", ")", ")", ";", "}"], "original_docstring": "/* click handler function\n     * changes value of isToggleOn inside the state */", "comment": [], "docstring_tokens": ["click", "handler", "function", "changes", "value", "of", "isToggleOn", "inside", "the", "state"], "docstring": "click handler function\nchanges value of isToggleOn inside the state", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "click handler function\n changes value of isToggleOn inside the state", "short_docstring_tokens": ["click", "handler", "function", "changes", "value", "of", "isToggleOn", "inside", "the", "state"], "original_string": "handleClick(){\n        this.setState(state => ({\n            isToggleOn: !state.isToggleOn\n        }));\n    }", "id": "c9b0c6babd2c2872a0a8f92b30598267e46e4de7f8b3647ed05af3d2125bed35"}
{"identifier": "Greeting", "parameters": {"props": null}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "function Greeting(props)\n{\n    const isLoggedIn = props.isLoggedIn;\n    if(isLoggedIn)\n        return <UserGreeting/>;\n    else\n        return <GuestGreeting/>;\n}", "code_tokens": ["function", "Greeting", "(", "props", ")", "{", "const", "isLoggedIn", "=", "props", ".", "isLoggedIn", ";", "if", "(", "isLoggedIn", ")", "return", "<", "UserGreeting", "/", ">", ";", "else", "return", "<", "GuestGreeting", "/", ">", ";", "}"], "original_docstring": "/* function that displays greeting on the basis of login flag props */", "comment": [], "docstring_tokens": ["function", "that", "displays", "greeting", "on", "the", "basis", "of", "login", "flag", "props"], "docstring": "function that displays greeting on the basis of login flag props", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "props", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "function that displays greeting on the basis of login flag props", "short_docstring_tokens": ["function", "that", "displays", "greeting", "on", "the", "basis", "of", "login", "flag", "props"], "original_string": "function Greeting(props)\n{\n    const isLoggedIn = props.isLoggedIn;\n    if(isLoggedIn)\n        return <UserGreeting/>;\n    else\n        return <GuestGreeting/>;\n}", "id": "5fc08c14f3561a417be4738553c7f6672712fbb75d44a344865ff196981e945c"}
{"identifier": "LoginButton", "parameters": {"props": null}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "function LoginButton(props)\n{\n    return(<button onClick={props.onClick}>\n        Login\n        </button>\n    );\n}", "code_tokens": ["function", "LoginButton", "(", "props", ")", "{", "return", "(", "<", "button", "onClick", "=", "{", "props", ".", "onClick", "}", ">", "\n        Login\n        ", "<", "/", "button", ">", ")", ";", "}"], "original_docstring": "/* simulating logout login using conditional rendering\n*  Login button */", "comment": [], "docstring_tokens": ["simulating", "logout", "login", "using", "conditional", "rendering", "Login", "button"], "docstring": "simulating logout login using conditional rendering\nLogin button", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "props", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "simulating logout login using conditional rendering\nLogin button", "short_docstring_tokens": ["simulating", "logout", "login", "using", "conditional", "rendering", "Login", "button"], "original_string": "function LoginButton(props)\n{\n    return(<button onClick={props.onClick}>\n        Login\n        </button>\n    );\n}", "id": "296ca45fc0f748c5e3a720551eb8e2a1b138c1cdcf3f11a59f87039ceb878c02"}
{"identifier": "MailCounter", "parameters": {"props": null}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "function MailCounter(props)\n{\n    const unreadMessages = props.unread_messages;\n    return(\n        <div>\n            <h1>Hello!</h1>\n            { unreadMessages.length>0 &&\n                <h2>You have {unreadMessages.length} messages</h2>\n            }\n        </div>\n    )\n}", "code_tokens": ["function", "MailCounter", "(", "props", ")", "{", "const", "unreadMessages", "=", "props", ".", "unread_messages", ";", "return", "(", "<", "div", ">", "\n            ", "<", "h1", ">", "Hello!", "<", "/", "h1", ">", "\n            ", "{", "unreadMessages", ".", "length", ">", "0", "&&", "<", "h2", ">", "You have ", "{", "unreadMessages", ".", "length", "}", " messages", "<", "/", "h2", ">", "}", "\n        ", "<", "/", "div", ">", ")", "}"], "original_docstring": "/* using conditional operators for conditional rendering */", "comment": [], "docstring_tokens": ["using", "conditional", "operators", "for", "conditional", "rendering"], "docstring": "using conditional operators for conditional rendering", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "props", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "using conditional operators for conditional rendering", "short_docstring_tokens": ["using", "conditional", "operators", "for", "conditional", "rendering"], "original_string": "function MailCounter(props)\n{\n    const unreadMessages = props.unread_messages;\n    return(\n        <div>\n            <h1>Hello!</h1>\n            { unreadMessages.length>0 &&\n                <h2>You have {unreadMessages.length} messages</h2>\n            }\n        </div>\n    )\n}", "id": "87603fd83b8999e559aa5f157830c5c13fe43f22b38eb7a6caeb64d6ce90384a"}
{"identifier": "WarningBanner", "parameters": {"props": null}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "function WarningBanner(props){\n    if(props.warn) {\n        return null;\n    }\n    return (\n        <div className=\"warning\">\n            Warning\n        </div>\n    );\n}", "code_tokens": ["function", "WarningBanner", "(", "props", ")", "{", "if", "(", "props", ".", "warn", ")", "{", "return", "null", ";", "}", "return", "(", "<", "div", "className", "=", "\"warning\"", ">", "\n            Warning\n        ", "<", "/", "div", ">", ")", ";", "}"], "original_docstring": "/* removing banner by returing null on the basis of props */", "comment": [], "docstring_tokens": ["removing", "banner", "by", "returing", "null", "on", "the", "basis", "of", "props"], "docstring": "removing banner by returing null on the basis of props", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "props", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "removing banner by returing null on the basis of props", "short_docstring_tokens": ["removing", "banner", "by", "returing", "null", "on", "the", "basis", "of", "props"], "original_string": "function WarningBanner(props){\n    if(props.warn) {\n        return null;\n    }\n\n    return (\n        <div className=\"warning\">\n            Warning\n        </div>\n    );\n}", "id": "59fa0ff3258974a5812f39470da94d2cf9cdeb6451f13334a203ffdd713ecce4"}
{"identifier": "handleToggleClick", "parameters": {}, "return_type": null, "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "handleToggleClick()\n    {\n        this.setState(state => ({\n            showWarning : !state.showWarning\n        }));\n    }", "code_tokens": ["handleToggleClick", "(", ")", "{", "this", ".", "setState", "(", "state", "=>", "(", "{", "showWarning", ":", "!", "state", ".", "showWarning", "}", ")", ")", ";", "}"], "original_docstring": "/* toggle click function to toggle warning message */", "comment": [], "docstring_tokens": ["toggle", "click", "function", "to", "toggle", "warning", "message"], "docstring": "toggle click function to toggle warning message", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "toggle click function to toggle warning message", "short_docstring_tokens": ["toggle", "click", "function", "to", "toggle", "warning", "message"], "original_string": "handleToggleClick()\n    {\n        this.setState(state => ({\n            showWarning : !state.showWarning\n        }));\n    }", "id": "214d48eca41253443433e1c9b3ff0409ea9ea27ffa7408c494ad36be9e07c78a"}
{"identifier": "render", "parameters": {}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "render(){\n        return(\n            <div>\n                <WarningBanner warn={this.state.showWarning}/>\n                <button onClick={this.handleToggleClick} >\n                    {this.state.showWarning ?'Show':'Hide' }\n                </button>\n            </div>\n        );\n    }", "code_tokens": ["render", "(", ")", "{", "return", "(", "<", "div", ">", "\n                ", "<", "WarningBanner", "warn", "=", "{", "this", ".", "state", ".", "showWarning", "}", "/", ">", "\n                ", "<", "button", "onClick", "=", "{", "this", ".", "handleToggleClick", "}", ">", "\n                    ", "{", "this", ".", "state", ".", "showWarning", "?", "'Show'", ":", "'Hide'", "}", "\n                ", "<", "/", "button", ">", "\n            ", "<", "/", "div", ">", ")", ";", "}"], "original_docstring": "/* rendering button and changing the button text as per showWarning flag */", "comment": [], "docstring_tokens": ["rendering", "button", "and", "changing", "the", "button", "text", "as", "per", "showWarning", "flag"], "docstring": "rendering button and changing the button text as per showWarning flag", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "rendering button and changing the button text as per showWarning flag", "short_docstring_tokens": ["rendering", "button", "and", "changing", "the", "button", "text", "as", "per", "showWarning", "flag"], "original_string": "render(){\n        return(\n            <div>\n                <WarningBanner warn={this.state.showWarning}/>\n                <button onClick={this.handleToggleClick} >\n                    {this.state.showWarning ?'Show':'Hide' }\n                </button>\n            </div>\n        );\n    }", "id": "81ca64f2075be9960021500ed8a0e5e6f06e05608778b07a9d3ec5d9f7640419"}
{"identifier": "NumberListElement", "parameters": {"props": null}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "function NumberListElement(props)\n{\n    return(\n        <li>{props.value}</li>\n    );\n}", "code_tokens": ["function", "NumberListElement", "(", "props", ")", "{", "return", "(", "<", "li", ">", "{", "props", ".", "value", "}", "<", "/", "li", ">", ")", ";", "}"], "original_docstring": "/* to render li elements\n* not using keys here as not required (As said by react docs )*/", "comment": [], "docstring_tokens": ["to", "render", "li", "elements", "not", "using", "keys", "here", "as", "not", "required", "(", "As", "said", "by", "react", "docs", ")"], "docstring": "to render li elements\nnot using keys here as not required (As said by react docs )", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "props", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "to render li elements\nnot using keys here as not required (As said by react docs )", "short_docstring_tokens": ["to", "render", "li", "elements", "not", "using", "keys", "here", "as", "not", "required", "(", "As", "said", "by", "react", "docs", ")"], "original_string": "function NumberListElement(props)\n{\n    return(\n        <li>{props.value}</li>\n    );\n}", "id": "16814c87704e507b9286eb7b849d8b46b4f8151b254f4a8579f65297df58e44b"}
{"identifier": "NumberLister", "parameters": {"props": null}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "function NumberLister(props)\n{\n    const num_array = props.num_list;\n    return (\n        <ul>{num_array.map((number)=>\n            <NumberListElement\n                key={number.toString()}\n                value={number}\n            />\n        )}</ul>\n    )\n}", "code_tokens": ["function", "NumberLister", "(", "props", ")", "{", "const", "num_array", "=", "props", ".", "num_list", ";", "return", "(", "<", "ul", ">", "{", "num_array", ".", "map", "(", "(", "number", ")", "=>", "<", "NumberListElement", "key", "=", "{", "number", ".", "toString", "(", ")", "}", "value", "=", "{", "number", "}", "/", ">", ")", "}", "<", "/", "ul", ">", ")", "}"], "original_docstring": "/* function that accepts array of numbers and returns list of numbers */", "comment": ["/* adding key to remove the warning\n    * using index (But not advisable as it leads to errors)\n    * correct usage of keys with component elements */", "// const list_elements = num_array.map((number,index) =>", "// <NumberListElement key={number.toString()}", "// value={number}", "// />);", "/* embedding map() in JSX */"], "docstring_tokens": ["function", "that", "accepts", "array", "of", "numbers", "and", "returns", "list", "of", "numbers"], "docstring": "function that accepts array of numbers and returns list of numbers", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "props", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "function that accepts array of numbers and returns list of numbers", "short_docstring_tokens": ["function", "that", "accepts", "array", "of", "numbers", "and", "returns", "list", "of", "numbers"], "original_string": "function NumberLister(props)\n{\n    const num_array = props.num_list;\n\n    /* adding key to remove the warning\n    * using index (But not advisable as it leads to errors)\n    * correct usage of keys with component elements */\n    // const list_elements = num_array.map((number,index) =>\n    // <NumberListElement key={number.toString()}\n    // value={number}\n    // />);\n\n    /* embedding map() in JSX */\n    return (\n        <ul>{num_array.map((number)=>\n            <NumberListElement\n                key={number.toString()}\n                value={number}\n            />\n        )}</ul>\n    )\n}", "id": "8c60fdc396dbcdf5ce5363587a6c0b851a6a2d18a2aae1120dc7407721999c09"}
{"identifier": "render", "parameters": {}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "render(){\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                    Name:\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        );\n    }", "code_tokens": ["render", "(", ")", "{", "return", "(", "<", "form", "onSubmit", "=", "{", "this", ".", "handleSubmit", "}", ">", "\n                ", "<", "label", ">", "\n                    Name:\n                    ", "<", "input", "type", "=", "\"text\"", "value", "=", "{", "this", ".", "state", ".", "value", "}", "onChange", "=", "{", "this", ".", "handleChange", "}", "/", ">", "\n                ", "<", "/", "label", ">", "\n                ", "<", "input", "type", "=", "\"submit\"", "value", "=", "\"Submit\"", "/", ">", "\n            ", "<", "/", "form", ">", ")", ";", "}"], "original_docstring": "/* rendering the form UI\n    * input tag : stores the value that is set in the react state */", "comment": [], "docstring_tokens": ["rendering", "the", "form", "UI", "input", "tag", ":", "stores", "the", "value", "that", "is", "set", "in", "the", "react", "state"], "docstring": "rendering the form UI\ninput tag : stores the value that is set in the react state", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "rendering the form UI\n input tag : stores the value that is set in the react state", "short_docstring_tokens": ["rendering", "the", "form", "UI", "input", "tag", ":", "stores", "the", "value", "that", "is", "set", "in", "the", "react", "state"], "original_string": "render(){\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label>\n                    Name:\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n        );\n    }", "id": "1faceab33fa2dc04a812580a789f5fb61732bd15e589f91740c51a45ae745325"}
{"identifier": "render", "parameters": {}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "render()\n    {\n        return(\n            <form>\n                <label>\n                    Is Going:\n                    <input\n                        name=\"isGoing\"\n                        type=\"checkbox\"\n                        checked={this.state.isGoing}\n                        onChange={this.handleInputChange} />\n                </label>\n                <br />\n                <label>\n                    Number of Guests:\n                    <input\n                        type=\"text\"\n                        name=\"numberOfGuests\"\n                        value={this.state.numberOfGuests}\n                        onChange={this.handleInputChange}\n                    />\n                </label>\n            </form>\n        )\n    }", "code_tokens": ["render", "(", ")", "{", "return", "(", "<", "form", ">", "\n                ", "<", "label", ">", "\n                    Is Going:\n                    ", "<", "input", "name", "=", "\"isGoing\"", "type", "=", "\"checkbox\"", "checked", "=", "{", "this", ".", "state", ".", "isGoing", "}", "onChange", "=", "{", "this", ".", "handleInputChange", "}", "/", ">", "\n                ", "<", "/", "label", ">", "\n\n                ", "<", "br", "/", ">", "\n\n                ", "<", "label", ">", "\n                    Number of Guests:\n                    ", "<", "input", "type", "=", "\"text\"", "name", "=", "\"numberOfGuests\"", "value", "=", "{", "this", ".", "state", ".", "numberOfGuests", "}", "onChange", "=", "{", "this", ".", "handleInputChange", "}", "/", ">", "\n                ", "<", "/", "label", ">", "\n\n            ", "<", "/", "form", ">", ")", "}"], "original_docstring": "/* when referring to multiple elements\n    * make sure that the name and the state element is same\n    * every input element is then referred to it by it's name parameter */", "comment": [], "docstring_tokens": ["when", "referring", "to", "multiple", "elements", "make", "sure", "that", "the", "name", "and", "the", "state", "element", "is", "same", "every", "input", "element", "is", "then", "referred", "to", "it", "by", "it", "'", "s", "name", "parameter"], "docstring": "when referring to multiple elements\nmake sure that the name and the state element is same\nevery input element is then referred to it by it's name parameter", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "when referring to multiple elements\n make sure that the name and the state element is same\n every input element is then referred to it by it's name parameter", "short_docstring_tokens": ["when", "referring", "to", "multiple", "elements", "make", "sure", "that", "the", "name", "and", "the", "state", "element", "is", "same", "every", "input", "element", "is", "then", "referred", "to", "it", "by", "it", "'", "s", "name", "parameter"], "original_string": "render()\n    {\n        return(\n            <form>\n                <label>\n                    Is Going:\n                    <input\n                        name=\"isGoing\"\n                        type=\"checkbox\"\n                        checked={this.state.isGoing}\n                        onChange={this.handleInputChange} />\n                </label>\n\n                <br />\n\n                <label>\n                    Number of Guests:\n                    <input\n                        type=\"text\"\n                        name=\"numberOfGuests\"\n                        value={this.state.numberOfGuests}\n                        onChange={this.handleInputChange}\n                    />\n                </label>\n\n            </form>\n        )\n    }", "id": "6a4febb26960c27bf4ce7812f72abd8bd4d3ee8852212e53c98fb4fc90f2110b"}
{"identifier": "BoilingVerdict", "parameters": {"props": null}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "function BoilingVerdict(props)\n{\n    if(props.celcius>=100) {\n        return <p>The water would boil</p>\n    }\n    return <p>The water would not boil</p>\n}", "code_tokens": ["function", "BoilingVerdict", "(", "props", ")", "{", "if", "(", "props", ".", "celcius", ">=", "100", ")", "{", "return", "<", "p", ">", "The water would boil", "<", "/", "p", ">", "}", "return", "<", "p", ">", "The water would not boil", "<", "/", "p", ">", "}"], "original_docstring": "/* function to determine if water will boil in given input temperature */", "comment": [], "docstring_tokens": ["function", "to", "determine", "if", "water", "will", "boil", "in", "given", "input", "temperature"], "docstring": "function to determine if water will boil in given input temperature", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "props", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "function to determine if water will boil in given input temperature", "short_docstring_tokens": ["function", "to", "determine", "if", "water", "will", "boil", "in", "given", "input", "temperature"], "original_string": "function BoilingVerdict(props)\n{\n    if(props.celcius>=100) {\n        return <p>The water would boil</p>\n    }\n    return <p>The water would not boil</p>\n}", "id": "de75202deae6f59d75a87b746b7edf01178ea773006176d44fdc157ee4b5a6de"}
{"identifier": "FancyDialog", "parameters": {"props": null}, "return_type": "<not_specific>", "repo": "rishavmedhi/Reactjs-101", "path": "my-app/src/index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6263ccd0540ae014092b9841d7e02dbeac662b2b", "ext": "js", "size": 24149, "code": "function FancyDialog(props){\n    return(\n        <Dialog\n            heading=\"hello\"\n            text=\"this is some text\"\n        />\n    );\n}", "code_tokens": ["function", "FancyDialog", "(", "props", ")", "{", "return", "(", "<", "Dialog", "heading", "=", "\"hello\"", "text", "=", "\"this is some text\"", "/", ">", ")", ";", "}"], "original_docstring": "/* creating a special case of the basic function */", "comment": [], "docstring_tokens": ["creating", "a", "special", "case", "of", "the", "basic", "function"], "docstring": "creating a special case of the basic function", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "props", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "creating a special case of the basic function", "short_docstring_tokens": ["creating", "a", "special", "case", "of", "the", "basic", "function"], "original_string": "function FancyDialog(props){\n    return(\n        <Dialog\n            heading=\"hello\"\n            text=\"this is some text\"\n        />\n    );\n}", "id": "0dbfe690adbad341302b8db95986ceda1abc2fa70605c84b7a6c31fabca34b66"}
{"identifier": "initAudioTexture", "parameters": {}, "return_type": null, "repo": "miketahani/glsl-sandbox", "path": "server/assets/js/audio-inahat.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "900503a27fa484639e0fc900798084e7db6dcbf3", "ext": "js", "size": 4576, "code": "function initAudioTexture() {\n  audioTexture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, audioTexture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n}", "code_tokens": ["function", "initAudioTexture", "(", ")", "{", "audioTexture", "=", "gl", ".", "createTexture", "(", ")", ";", "gl", ".", "bindTexture", "(", "gl", ".", "TEXTURE_2D", ",", "audioTexture", ")", ";", "gl", ".", "texParameteri", "(", "gl", ".", "TEXTURE_2D", ",", "gl", ".", "TEXTURE_MIN_FILTER", ",", "gl", ".", "NEAREST", ")", ";", "gl", ".", "texParameteri", "(", "gl", ".", "TEXTURE_2D", ",", "gl", ".", "TEXTURE_MAG_FILTER", ",", "gl", ".", "NEAREST", ")", ";", "gl", ".", "texParameteri", "(", "gl", ".", "TEXTURE_2D", ",", "gl", ".", "TEXTURE_WRAP_S", ",", "gl", ".", "CLAMP_TO_EDGE", ")", ";", "gl", ".", "texParameteri", "(", "gl", ".", "TEXTURE_2D", ",", "gl", ".", "TEXTURE_WRAP_T", ",", "gl", ".", "CLAMP_TO_EDGE", ")", ";", "gl", ".", "bindTexture", "(", "gl", ".", "TEXTURE_2D", ",", "null", ")", ";", "}"], "original_docstring": "/* do textures since they're more accessible than buffers (glsl array indexing limitations)\n *\n */", "comment": ["// NEAREST req'd for floating-point texture TEXTURE_{MIN/MAG}_FILTER"], "docstring_tokens": ["do", "textures", "since", "they", "'", "re", "more", "accessible", "than", "buffers", "(", "glsl", "array", "indexing", "limitations", ")"], "docstring": "do textures since they're more accessible than buffers (glsl array indexing limitations)", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "do textures since they're more accessible than buffers (glsl array indexing limitations)", "short_docstring_tokens": ["do", "textures", "since", "they", "'", "re", "more", "accessible", "than", "buffers", "(", "glsl", "array", "indexing", "limitations", ")"], "original_string": "function initAudioTexture() {\n\n  audioTexture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, audioTexture);\n\n  // NEAREST req'd for floating-point texture TEXTURE_{MIN/MAG}_FILTER\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n\n}", "id": "b2baba8b5dafbbe5f87277b6005049d8f2f9dd377791d41826cb223c5849e31a"}
{"identifier": "changeCategory", "parameters": {"category": null, "url": null, "callback": null}, "return_type": null, "repo": "ntu-news-media-lab/Seekr", "path": "checklist.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "46feaa1b9fa5ba22c5fb8ac49fbe0e45f622db1d", "ext": "js", "size": 19651, "code": "function changeCategory(category, url, callback) {\n    chrome.storage.local.get({ urls: [] }, function (result) {\n        var urls = result.urls;\n        urls.forEach(function (el) {\n            if (el.url == url) {\n                el.category = category;\n                chrome.storage.local.set({ urls: urls });\n                chrome.extension.sendRequest({});\n                callback();\n            }\n        });\n    });\n}", "code_tokens": ["function", "changeCategory", "(", "category", ",", "url", ",", "callback", ")", "{", "chrome", ".", "storage", ".", "local", ".", "get", "(", "{", "urls", ":", "[", "]", "}", ",", "function", "(", "result", ")", "{", "var", "urls", "=", "result", ".", "urls", ";", "urls", ".", "forEach", "(", "function", "(", "el", ")", "{", "if", "(", "el", ".", "url", "==", "url", ")", "{", "el", ".", "category", "=", "category", ";", "chrome", ".", "storage", ".", "local", ".", "set", "(", "{", "urls", ":", "urls", "}", ")", ";", "chrome", ".", "extension", ".", "sendRequest", "(", "{", "}", ")", ";", "callback", "(", ")", ";", "}", "}", ")", ";", "}", ")", ";", "}"], "original_docstring": "//updating the category of the checklist", "comment": [], "docstring_tokens": ["updating", "the", "category", "of", "the", "checklist"], "docstring": "updating the category of the checklist", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "category", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "url", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "callback", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "updating the category of the checklist", "short_docstring_tokens": ["updating", "the", "category", "of", "the", "checklist"], "original_string": "function changeCategory(category, url, callback) {\n    chrome.storage.local.get({ urls: [] }, function (result) {\n        var urls = result.urls;\n        urls.forEach(function (el) {\n            if (el.url == url) {\n                el.category = category;\n                chrome.storage.local.set({ urls: urls });\n                chrome.extension.sendRequest({});\n                callback();\n            }\n        });\n    });\n}", "id": "4653a57f730895aea600ea4b21dd30256ec086b940ed285514b7f7341b206de2"}
{"identifier": "sendPasswordReset", "parameters": {"email": null}, "return_type": "<not_specific>", "repo": "nikhilnayak98/GCSWebApp", "path": "scripts/main.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "36bf3cb0aff94402ed7a3c7c737da5dc39d93ceb", "ext": "js", "size": 16997, "code": "function sendPasswordReset(email) {\n  if (email.length < 1) {\n      alert('Please enter an email.');\n      return;\n  }\n  firebase.auth().sendPasswordResetEmail(email).then(function() {\n    alert('Password Reset Email Sent!');\n  }).catch(function(error) {\n    var errorCode = error.code;\n    var errorMessage = error.message;\n    if (errorCode == 'auth/invalid-email') {\n      alert(errorMessage);\n    } else if (errorCode == 'auth/user-not-found') {\n      alert(errorMessage);\n    }\n    console.log(error);\n    });\n}", "code_tokens": ["function", "sendPasswordReset", "(", "email", ")", "{", "if", "(", "email", ".", "length", "<", "1", ")", "{", "alert", "(", "'Please enter an email.'", ")", ";", "return", ";", "}", "firebase", ".", "auth", "(", ")", ".", "sendPasswordResetEmail", "(", "email", ")", ".", "then", "(", "function", "(", ")", "{", "alert", "(", "'Password Reset Email Sent!'", ")", ";", "}", ")", ".", "catch", "(", "function", "(", "error", ")", "{", "var", "errorCode", "=", "error", ".", "code", ";", "var", "errorMessage", "=", "error", ".", "message", ";", "if", "(", "errorCode", "==", "'auth/invalid-email'", ")", "{", "alert", "(", "errorMessage", ")", ";", "}", "else", "if", "(", "errorCode", "==", "'auth/user-not-found'", ")", "{", "alert", "(", "errorMessage", ")", ";", "}", "console", ".", "log", "(", "error", ")", ";", "}", ")", ";", "}"], "original_docstring": "/**\n * Sends an password reset email to the user.\n */", "comment": [], "docstring_tokens": ["Sends", "an", "password", "reset", "email", "to", "the", "user", "."], "docstring": "Sends an password reset email to the user.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "email", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Sends an password reset email to the user.", "short_docstring_tokens": ["Sends", "an", "password", "reset", "email", "to", "the", "user", "."], "original_string": "function sendPasswordReset(email) {\n  if (email.length < 1) {\n      alert('Please enter an email.');\n      return;\n  }\n  firebase.auth().sendPasswordResetEmail(email).then(function() {\n    alert('Password Reset Email Sent!');\n  }).catch(function(error) {\n    var errorCode = error.code;\n    var errorMessage = error.message;\n    if (errorCode == 'auth/invalid-email') {\n      alert(errorMessage);\n    } else if (errorCode == 'auth/user-not-found') {\n      alert(errorMessage);\n    }\n    console.log(error);\n    });\n}", "id": "48ccbb6e4e1e8ff30ae5649ab3d748e7fc269dd1c404d9e095f5f9e71f78cca0"}
{"identifier": "forEach", "parameters": {"fn": null}, "return_type": null, "repo": "jimmywarting/node-dirty", "path": "lib/dirty/dirty.js", "language": "JavaScript", "stars_count": 226.0, "issues_count": 18.0, "forks_count": 29.0, "license": ["MIT"], "hexsha": "3e5d3e0a5cc253d5b12399b196a9963a074c1d9d", "ext": "js", "size": 5149, "code": "forEach(fn) {\n    for (const [key, val] of this._data) {\n      if (fn(key, val) === false) break;\n    }\n  }", "code_tokens": ["forEach", "(", "fn", ")", "{", "for", "(", "const", "[", "key", ",", "val", "]", "of", "this", ".", "_data", ")", "{", "if", "(", "fn", "(", "key", ",", "val", ")", "===", "false", ")", "break", ";", "}", "}"], "original_docstring": "/**\n   * Iterate over keys, applying match function\n   */", "comment": [], "docstring_tokens": ["Iterate", "over", "keys", "applying", "match", "function"], "docstring": "Iterate over keys, applying match function", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "fn", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Iterate over keys, applying match function", "short_docstring_tokens": ["Iterate", "over", "keys", "applying", "match", "function"], "original_string": "forEach(fn) {\n    for (const [key, val] of this._data) {\n      if (fn(key, val) === false) break;\n    }\n  }", "id": "583bb8995ea29e4e015969f8bf8b44bb8facaa8f48a9f96ec15a9a31c2fb3bd3"}
{"identifier": "data", "parameters": {"term": null}, "return_type": "<not_specific>", "repo": "PhatCandylio/Tutorial-Jira", "path": "target/classes/templates/example.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "e01be53c5457eb49ab380af746f348212747332f", "ext": "js", "size": 3924, "code": "function data(term) {\n                        return {\n                            query: term,\n                            showAvatar: true\n                        }\n                    }", "code_tokens": ["function", "data", "(", "term", ")", "{", "return", "{", "query", ":", "term", ",", "showAvatar", ":", "true", "}", "}"], "original_docstring": "// query parameters for the remote ajax call", "comment": [], "docstring_tokens": ["query", "parameters", "for", "the", "remote", "ajax", "call"], "docstring": "query parameters for the remote ajax call", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "term", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "query parameters for the remote ajax call", "short_docstring_tokens": ["query", "parameters", "for", "the", "remote", "ajax", "call"], "original_string": "function data(term) {\n                        return {\n                            query: term,\n                            showAvatar: true\n                        }\n                    }", "id": "ac7ab9659eab9388053a487dbf3a5215b8be736a660379286da21dcfda093e7d"}
{"identifier": "results", "parameters": {"data": null}, "return_type": "<not_specific>", "repo": "PhatCandylio/Tutorial-Jira", "path": "target/classes/templates/example.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "e01be53c5457eb49ab380af746f348212747332f", "ext": "js", "size": 3924, "code": "function results(data) {\n                        return{\n                            results:  $.map(data.users, function (item) {\n                                return {\n                                    id: item.key,\n                                   text: item.name,\n                                    avatarUrl : item.avatarUrl,\n                                    displayName: item.displayName\n                                }\n                            })\n                        }\n                    }", "code_tokens": ["function", "results", "(", "data", ")", "{", "return", "{", "results", ":", "$", ".", "map", "(", "data", ".", "users", ",", "function", "(", "item", ")", "{", "return", "{", "id", ":", "item", ".", "key", ",", "text", ":", "item", ".", "name", ",", "avatarUrl", ":", "item", ".", "avatarUrl", ",", "displayName", ":", "item", ".", "displayName", "}", "}", ")", "}", "}"], "original_docstring": "// parse data from the server into form select2 expects", "comment": [], "docstring_tokens": ["parse", "data", "from", "the", "server", "into", "form", "select2", "expects"], "docstring": "parse data from the server into form select2 expects", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "data", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "parse data from the server into form select2 expects", "short_docstring_tokens": ["parse", "data", "from", "the", "server", "into", "form", "select2", "expects"], "original_string": "function results(data) {\n                        return{\n                            results:  $.map(data.users, function (item) {\n                                return {\n                                    id: item.key,\n                                   text: item.name,\n                                    avatarUrl : item.avatarUrl,\n                                    displayName: item.displayName\n                                }\n\n                            })\n                        }\n                    }", "id": "8f692fde22d78c0821c1663d6629a2c3f5a60ec4ff355eb45dba7daedd59a758"}
{"identifier": "computeAction", "parameters": {"rule": null, "element": null}, "return_type": null, "repo": "trozet/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": 2.0, "license": ["Apache-2.0"], "hexsha": "968aa0b0ffaaf0b5c81f1c3e1ea71282b53c9cb2", "ext": "js", "size": 22938, "code": "function computeAction(rule, element) {\n  element = element.toLowerCase();\n  var atoms = element.split(reSplit);\n  var verb = atoms[0];\n  var action = actionTable[verb];\n  if (action !== undefined) {\n    var summary = { action: action };\n    switch (verb) {\n      case 'resubmit':\n        summary.port = safePort(atoms[1]);\n        if (summary.port === ANY_PORT)\n          summary.port = SAME_PORT;\n        if (atoms.length > 2)\n          summary.table = safePort(atoms[2]);\n        break;\n      case 'output':\n      case 'enqueue':\n        summary.port = safePort(atoms[1]);\n        break;\n      case 'local':\n        summary.port = LOCAL_PORT;\n        break;\n      case 'in_port':\n        summary.port = rule.inPort;\n        break;\n    }\n    rule.outAction.push(summary);\n  }\n}", "code_tokens": ["function", "computeAction", "(", "rule", ",", "element", ")", "{", "element", "=", "element", ".", "toLowerCase", "(", ")", ";", "var", "atoms", "=", "element", ".", "split", "(", "reSplit", ")", ";", "var", "verb", "=", "atoms", "[", "0", "]", ";", "var", "action", "=", "actionTable", "[", "verb", "]", ";", "if", "(", "action", "!==", "undefined", ")", "{", "var", "summary", "=", "{", "action", ":", "action", "}", ";", "switch", "(", "verb", ")", "{", "case", "'resubmit'", ":", "summary", ".", "port", "=", "safePort", "(", "atoms", "[", "1", "]", ")", ";", "if", "(", "summary", ".", "port", "===", "ANY_PORT", ")", "summary", ".", "port", "=", "SAME_PORT", ";", "if", "(", "atoms", ".", "length", ">", "2", ")", "summary", ".", "table", "=", "safePort", "(", "atoms", "[", "2", "]", ")", ";", "break", ";", "case", "'output'", ":", "case", "'enqueue'", ":", "summary", ".", "port", "=", "safePort", "(", "atoms", "[", "1", "]", ")", ";", "break", ";", "case", "'local'", ":", "summary", ".", "port", "=", "LOCAL_PORT", ";", "break", ";", "case", "'in_port'", ":", "summary", ".", "port", "=", "rule", ".", "inPort", ";", "break", ";", "}", "rule", ".", "outAction", ".", "push", "(", "summary", ")", ";", "}", "}"], "original_docstring": "/** Computes the action summary from a rule associated to an element of the actions\n *\n * The rule is modified and its outAction is filled.\n * @param rule a rule without outAction\n * @param element the element of the\n */", "comment": [], "docstring_tokens": ["Computes", "the", "action", "summary", "from", "a", "rule", "associated", "to", "an", "element", "of", "the", "actions", "The", "rule", "is", "modified", "and", "its", "outAction", "is", "filled", ".", "@param", "rule", "a", "rule", "without", "outAction", "@param", "element", "the", "element", "of", "the"], "docstring": "Computes the action summary from a rule associated to an element of the actions\nThe rule is modified and its outAction is filled.\n@param rule a rule without outAction\n@param element the element of the", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "rule", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "element", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Computes the action summary from a rule associated to an element of the actions\n The rule is modified and its outAction is filled.", "short_docstring_tokens": ["Computes", "the", "action", "summary", "from", "a", "rule", "associated", "to", "an", "element", "of", "the", "actions", "The", "rule", "is", "modified", "and", "its", "outAction", "is", "filled", "."], "original_string": "function computeAction(rule, element) {\n  element = element.toLowerCase();\n  var atoms = element.split(reSplit);\n  var verb = atoms[0];\n  var action = actionTable[verb];\n  if (action !== undefined) {\n    var summary = { action: action };\n    switch (verb) {\n      case 'resubmit':\n        summary.port = safePort(atoms[1]);\n        if (summary.port === ANY_PORT)\n          summary.port = SAME_PORT;\n        if (atoms.length > 2)\n          summary.table = safePort(atoms[2]);\n        break;\n      case 'output':\n      case 'enqueue':\n        summary.port = safePort(atoms[1]);\n        break;\n      case 'local':\n        summary.port = LOCAL_PORT;\n        break;\n      case 'in_port':\n        summary.port = rule.inPort;\n        break;\n    }\n    rule.outAction.push(summary);\n  }\n}", "id": "b1ff0720d563c0a8bee65564c8199d4b03ff21e08cdf0dd63208164ad2f3b70a"}
{"identifier": "computeAction", "parameters": {"rule": null, "element": null}, "return_type": null, "repo": "andrekassis/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 8.0, "issues_count": 1.0, "forks_count": 6.0, "license": ["Apache-2.0"], "hexsha": "f8cb9c153c76d1d1080f907a1364ce54722cf8eb", "ext": "js", "size": 24232, "code": "function computeAction(rule, element) {\n  element = element.toLowerCase();\n  var atoms = element.split(reSplit);\n  var verb = atoms[0];\n  var action = actionTable[verb];\n  if (action !== undefined) {\n    var summary = { action: action };\n    switch (verb) {\n      case 'resubmit':\n        summary.port = safePort(atoms[1]);\n        if (summary.port === ANY_PORT)\n          summary.port = SAME_PORT;\n        if (atoms.length > 2)\n          summary.table = safePort(atoms[2]);\n        break;\n      case 'output':\n      case 'enqueue':\n        summary.port = safePort(atoms[1]);\n        break;\n      case 'local':\n        summary.port = LOCAL_PORT;\n        break;\n      case 'in_port':\n        summary.port = rule.inPort;\n        break;\n    }\n    rule.outAction.push(summary);\n  }\n}", "code_tokens": ["function", "computeAction", "(", "rule", ",", "element", ")", "{", "element", "=", "element", ".", "toLowerCase", "(", ")", ";", "var", "atoms", "=", "element", ".", "split", "(", "reSplit", ")", ";", "var", "verb", "=", "atoms", "[", "0", "]", ";", "var", "action", "=", "actionTable", "[", "verb", "]", ";", "if", "(", "action", "!==", "undefined", ")", "{", "var", "summary", "=", "{", "action", ":", "action", "}", ";", "switch", "(", "verb", ")", "{", "case", "'resubmit'", ":", "summary", ".", "port", "=", "safePort", "(", "atoms", "[", "1", "]", ")", ";", "if", "(", "summary", ".", "port", "===", "ANY_PORT", ")", "summary", ".", "port", "=", "SAME_PORT", ";", "if", "(", "atoms", ".", "length", ">", "2", ")", "summary", ".", "table", "=", "safePort", "(", "atoms", "[", "2", "]", ")", ";", "break", ";", "case", "'output'", ":", "case", "'enqueue'", ":", "summary", ".", "port", "=", "safePort", "(", "atoms", "[", "1", "]", ")", ";", "break", ";", "case", "'local'", ":", "summary", ".", "port", "=", "LOCAL_PORT", ";", "break", ";", "case", "'in_port'", ":", "summary", ".", "port", "=", "rule", ".", "inPort", ";", "break", ";", "}", "rule", ".", "outAction", ".", "push", "(", "summary", ")", ";", "}", "}"], "original_docstring": "/** Computes the action summary from a rule associated to an element of the actions\n *\n * The rule is modified and its outAction is filled.\n * @param rule a rule without outAction\n * @param element the element of the\n */", "comment": [], "docstring_tokens": ["Computes", "the", "action", "summary", "from", "a", "rule", "associated", "to", "an", "element", "of", "the", "actions", "The", "rule", "is", "modified", "and", "its", "outAction", "is", "filled", ".", "@param", "rule", "a", "rule", "without", "outAction", "@param", "element", "the", "element", "of", "the"], "docstring": "Computes the action summary from a rule associated to an element of the actions\nThe rule is modified and its outAction is filled.\n@param rule a rule without outAction\n@param element the element of the", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "rule", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "element", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Computes the action summary from a rule associated to an element of the actions\n The rule is modified and its outAction is filled.", "short_docstring_tokens": ["Computes", "the", "action", "summary", "from", "a", "rule", "associated", "to", "an", "element", "of", "the", "actions", "The", "rule", "is", "modified", "and", "its", "outAction", "is", "filled", "."], "original_string": "function computeAction(rule, element) {\n  element = element.toLowerCase();\n  var atoms = element.split(reSplit);\n  var verb = atoms[0];\n  var action = actionTable[verb];\n  if (action !== undefined) {\n    var summary = { action: action };\n    switch (verb) {\n      case 'resubmit':\n        summary.port = safePort(atoms[1]);\n        if (summary.port === ANY_PORT)\n          summary.port = SAME_PORT;\n        if (atoms.length > 2)\n          summary.table = safePort(atoms[2]);\n        break;\n      case 'output':\n      case 'enqueue':\n        summary.port = safePort(atoms[1]);\n        break;\n      case 'local':\n        summary.port = LOCAL_PORT;\n        break;\n      case 'in_port':\n        summary.port = rule.inPort;\n        break;\n    }\n    rule.outAction.push(summary);\n  }\n}", "id": "b1ff0720d563c0a8bee65564c8199d4b03ff21e08cdf0dd63208164ad2f3b70a"}
{"identifier": "summarizeActions", "parameters": {"rule": null}, "return_type": null, "repo": "trozet/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": 2.0, "license": ["Apache-2.0"], "hexsha": "968aa0b0ffaaf0b5c81f1c3e1ea71282b53c9cb2", "ext": "js", "size": 22938, "code": "function summarizeActions(rule) {\n  rule.outAction = [];\n  var actions = rule.actions.split(',');\n  for (var i = 0; i < actions.length; i++) {\n    computeAction(rule, actions[i]);\n  }\n}", "code_tokens": ["function", "summarizeActions", "(", "rule", ")", "{", "rule", ".", "outAction", "=", "[", "]", ";", "var", "actions", "=", "rule", ".", "actions", ".", "split", "(", "','", ")", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "actions", ".", "length", ";", "i", "++", ")", "{", "computeAction", "(", "rule", ",", "actions", "[", "i", "]", ")", ";", "}", "}"], "original_docstring": "/** Summarize the actions of a rule, filling the outAction field\n *  @param rule: the rule to complete\n */", "comment": [], "docstring_tokens": ["Summarize", "the", "actions", "of", "a", "rule", "filling", "the", "outAction", "field", "@param", "rule", ":", "the", "rule", "to", "complete"], "docstring": "Summarize the actions of a rule, filling the outAction field\n@param rule: the rule to complete", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "rule", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Summarize the actions of a rule, filling the outAction field\n  @param rule: the rule to complete", "short_docstring_tokens": ["Summarize", "the", "actions", "of", "a", "rule", "filling", "the", "outAction", "field", "@param", "rule", ":", "the", "rule", "to", "complete"], "original_string": "function summarizeActions(rule) {\n  rule.outAction = [];\n  var actions = rule.actions.split(',');\n  for (var i = 0; i < actions.length; i++) {\n    computeAction(rule, actions[i]);\n  }\n}", "id": "4057599034011dd89c44e76e7efdd9450958d5aa92be7537b04a3d82f624a823"}
{"identifier": "summarizeActions", "parameters": {"rule": null}, "return_type": null, "repo": "andrekassis/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 8.0, "issues_count": 1.0, "forks_count": 6.0, "license": ["Apache-2.0"], "hexsha": "f8cb9c153c76d1d1080f907a1364ce54722cf8eb", "ext": "js", "size": 24232, "code": "function summarizeActions(rule) {\n  rule.outAction = [];\n  var actions = rule.actions.split(',');\n  for (var i = 0; i < actions.length; i++) {\n    computeAction(rule, actions[i]);\n  }\n}", "code_tokens": ["function", "summarizeActions", "(", "rule", ")", "{", "rule", ".", "outAction", "=", "[", "]", ";", "var", "actions", "=", "rule", ".", "actions", ".", "split", "(", "','", ")", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "actions", ".", "length", ";", "i", "++", ")", "{", "computeAction", "(", "rule", ",", "actions", "[", "i", "]", ")", ";", "}", "}"], "original_docstring": "/** Summarize the actions of a rule, filling the outAction field\n *  @param rule: the rule to complete\n */", "comment": [], "docstring_tokens": ["Summarize", "the", "actions", "of", "a", "rule", "filling", "the", "outAction", "field", "@param", "rule", ":", "the", "rule", "to", "complete"], "docstring": "Summarize the actions of a rule, filling the outAction field\n@param rule: the rule to complete", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "rule", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Summarize the actions of a rule, filling the outAction field\n  @param rule: the rule to complete", "short_docstring_tokens": ["Summarize", "the", "actions", "of", "a", "rule", "filling", "the", "outAction", "field", "@param", "rule", ":", "the", "rule", "to", "complete"], "original_string": "function summarizeActions(rule) {\n  rule.outAction = [];\n  var actions = rule.actions.split(',');\n  for (var i = 0; i < actions.length; i++) {\n    computeAction(rule, actions[i]);\n  }\n}", "id": "4057599034011dd89c44e76e7efdd9450958d5aa92be7537b04a3d82f624a823"}
{"identifier": "removePriority", "parameters": {"filters": null}, "return_type": "<not_specific>", "repo": "trozet/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": 2.0, "license": ["Apache-2.0"], "hexsha": "968aa0b0ffaaf0b5c81f1c3e1ea71282b53c9cb2", "ext": "js", "size": 22938, "code": "function removePriority(filters) {\n  var matchPriority = reFindPriority.exec(filters);\n  if (matchPriority) {\n    return matchPriority[2];\n  }\n  return filters;\n}", "code_tokens": ["function", "removePriority", "(", "filters", ")", "{", "var", "matchPriority", "=", "reFindPriority", ".", "exec", "(", "filters", ")", ";", "if", "(", "matchPriority", ")", "{", "return", "matchPriority", "[", "2", "]", ";", "}", "return", "filters", ";", "}"], "original_docstring": "/** Get rid of the priority part in the filter\n * @param filters: the filters of a rule as a string usually beginning with priority\n * @return the simplified filter as a string.\n */", "comment": [], "docstring_tokens": ["Get", "rid", "of", "the", "priority", "part", "in", "the", "filter", "@param", "filters", ":", "the", "filters", "of", "a", "rule", "as", "a", "string", "usually", "beginning", "with", "priority", "@return", "the", "simplified", "filter", "as", "a", "string", "."], "docstring": "Get rid of the priority part in the filter\n@param filters: the filters of a rule as a string usually beginning with priority\n@return the simplified filter as a string.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "filters", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Get rid of the priority part in the filter\n @param filters: the filters of a rule as a string usually beginning with priority\n @return the simplified filter as a string.", "short_docstring_tokens": ["Get", "rid", "of", "the", "priority", "part", "in", "the", "filter", "@param", "filters", ":", "the", "filters", "of", "a", "rule", "as", "a", "string", "usually", "beginning", "with", "priority", "@return", "the", "simplified", "filter", "as", "a", "string", "."], "original_string": "function removePriority(filters) {\n  var matchPriority = reFindPriority.exec(filters);\n  if (matchPriority) {\n    return matchPriority[2];\n  }\n  return filters;\n}", "id": "d944c59d74f6e0256a45305b0d45aec559c41752f87287c8d3dbe969d2847e31"}
{"identifier": "removePriority", "parameters": {"filters": null}, "return_type": "<not_specific>", "repo": "andrekassis/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 8.0, "issues_count": 1.0, "forks_count": 6.0, "license": ["Apache-2.0"], "hexsha": "f8cb9c153c76d1d1080f907a1364ce54722cf8eb", "ext": "js", "size": 24232, "code": "function removePriority(filters) {\n  var matchPriority = reFindPriority.exec(filters);\n  if (matchPriority) {\n    return matchPriority[2];\n  }\n  return filters;\n}", "code_tokens": ["function", "removePriority", "(", "filters", ")", "{", "var", "matchPriority", "=", "reFindPriority", ".", "exec", "(", "filters", ")", ";", "if", "(", "matchPriority", ")", "{", "return", "matchPriority", "[", "2", "]", ";", "}", "return", "filters", ";", "}"], "original_docstring": "/** Get rid of the priority part in the filter\n * @param filters: the filters of a rule as a string usually beginning with priority\n * @return the simplified filter as a string.\n */", "comment": [], "docstring_tokens": ["Get", "rid", "of", "the", "priority", "part", "in", "the", "filter", "@param", "filters", ":", "the", "filters", "of", "a", "rule", "as", "a", "string", "usually", "beginning", "with", "priority", "@return", "the", "simplified", "filter", "as", "a", "string", "."], "docstring": "Get rid of the priority part in the filter\n@param filters: the filters of a rule as a string usually beginning with priority\n@return the simplified filter as a string.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "filters", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Get rid of the priority part in the filter\n @param filters: the filters of a rule as a string usually beginning with priority\n @return the simplified filter as a string.", "short_docstring_tokens": ["Get", "rid", "of", "the", "priority", "part", "in", "the", "filter", "@param", "filters", ":", "the", "filters", "of", "a", "rule", "as", "a", "string", "usually", "beginning", "with", "priority", "@return", "the", "simplified", "filter", "as", "a", "string", "."], "original_string": "function removePriority(filters) {\n  var matchPriority = reFindPriority.exec(filters);\n  if (matchPriority) {\n    return matchPriority[2];\n  }\n  return filters;\n}", "id": "d944c59d74f6e0256a45305b0d45aec559c41752f87287c8d3dbe969d2847e31"}
{"identifier": "summarizeGroup", "parameters": {"group": null}, "return_type": null, "repo": "trozet/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": 2.0, "license": ["Apache-2.0"], "hexsha": "968aa0b0ffaaf0b5c81f1c3e1ea71282b53c9cb2", "ext": "js", "size": 22938, "code": "function summarizeGroup(group) {\n  var rawBuckets = group.contents.split('bucket=')\n  for(var i=0; i < rawBuckets.length; i++) {\n    var b = rawBuckets[i];\n    if (b.charAt(b.length - 1) == ',') {\n      rawBuckets[i] = b.slice(0, -1);\n    }\n    group.additional = rawBuckets[0];\n    group.buckets = rawBuckets.slice(1).map(parseBucket);\n  }\n}", "code_tokens": ["function", "summarizeGroup", "(", "group", ")", "{", "var", "rawBuckets", "=", "group", ".", "contents", ".", "split", "(", "'bucket='", ")", "for", "(", "var", "i", "=", "0", ";", "i", "<", "rawBuckets", ".", "length", ";", "i", "++", ")", "{", "var", "b", "=", "rawBuckets", "[", "i", "]", ";", "if", "(", "b", ".", "charAt", "(", "b", ".", "length", "-", "1", ")", "==", "','", ")", "{", "rawBuckets", "[", "i", "]", "=", "b", ".", "slice", "(", "0", ",", "-", "1", ")", ";", "}", "group", ".", "additional", "=", "rawBuckets", "[", "0", "]", ";", "group", ".", "buckets", "=", "rawBuckets", ".", "slice", "(", "1", ")", ".", "map", "(", "parseBucket", ")", ";", "}", "}"], "original_docstring": "/** Computes the summary of a group node.\n *\n * The main action is to parse the buckets and isolate additional information\n * as the selection algorithm (assumed before the first bucket)\n */", "comment": [], "docstring_tokens": ["Computes", "the", "summary", "of", "a", "group", "node", ".", "The", "main", "action", "is", "to", "parse", "the", "buckets", "and", "isolate", "additional", "information", "as", "the", "selection", "algorithm", "(", "assumed", "before", "the", "first", "bucket", ")"], "docstring": "Computes the summary of a group node.\nThe main action is to parse the buckets and isolate additional information\nas the selection algorithm (assumed before the first bucket)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "group", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Computes the summary of a group node.", "short_docstring_tokens": ["Computes", "the", "summary", "of", "a", "group", "node", "."], "original_string": "function summarizeGroup(group) {\n  var rawBuckets = group.contents.split('bucket=')\n  for(var i=0; i < rawBuckets.length; i++) {\n    var b = rawBuckets[i];\n    if (b.charAt(b.length - 1) == ',') {\n      rawBuckets[i] = b.slice(0, -1);\n    }\n\n    group.additional = rawBuckets[0];\n    group.buckets = rawBuckets.slice(1).map(parseBucket);\n  }\n}", "id": "504f560ec5deaf17830833df115ce2338d92f05c72853ee89f2c646828126f07"}
{"identifier": "summarizeGroup", "parameters": {"group": null}, "return_type": null, "repo": "andrekassis/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 8.0, "issues_count": 1.0, "forks_count": 6.0, "license": ["Apache-2.0"], "hexsha": "f8cb9c153c76d1d1080f907a1364ce54722cf8eb", "ext": "js", "size": 24232, "code": "function summarizeGroup(group) {\n  var rawBuckets = group.contents.split('bucket=')\n  for(var i=0; i < rawBuckets.length; i++) {\n    var b = rawBuckets[i];\n    if (b.charAt(b.length - 1) == ',') {\n      rawBuckets[i] = b.slice(0, -1);\n    }\n    group.additional = rawBuckets[0];\n    group.buckets = rawBuckets.slice(1).map(parseBucket);\n  }\n}", "code_tokens": ["function", "summarizeGroup", "(", "group", ")", "{", "var", "rawBuckets", "=", "group", ".", "contents", ".", "split", "(", "'bucket='", ")", "for", "(", "var", "i", "=", "0", ";", "i", "<", "rawBuckets", ".", "length", ";", "i", "++", ")", "{", "var", "b", "=", "rawBuckets", "[", "i", "]", ";", "if", "(", "b", ".", "charAt", "(", "b", ".", "length", "-", "1", ")", "==", "','", ")", "{", "rawBuckets", "[", "i", "]", "=", "b", ".", "slice", "(", "0", ",", "-", "1", ")", ";", "}", "group", ".", "additional", "=", "rawBuckets", "[", "0", "]", ";", "group", ".", "buckets", "=", "rawBuckets", ".", "slice", "(", "1", ")", ".", "map", "(", "parseBucket", ")", ";", "}", "}"], "original_docstring": "/** Computes the summary of a group node.\n *\n * The main action is to parse the buckets and isolate additional information\n * as the selection algorithm (assumed before the first bucket)\n */", "comment": [], "docstring_tokens": ["Computes", "the", "summary", "of", "a", "group", "node", ".", "The", "main", "action", "is", "to", "parse", "the", "buckets", "and", "isolate", "additional", "information", "as", "the", "selection", "algorithm", "(", "assumed", "before", "the", "first", "bucket", ")"], "docstring": "Computes the summary of a group node.\nThe main action is to parse the buckets and isolate additional information\nas the selection algorithm (assumed before the first bucket)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "group", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Computes the summary of a group node.", "short_docstring_tokens": ["Computes", "the", "summary", "of", "a", "group", "node", "."], "original_string": "function summarizeGroup(group) {\n  var rawBuckets = group.contents.split('bucket=')\n  for(var i=0; i < rawBuckets.length; i++) {\n    var b = rawBuckets[i];\n    if (b.charAt(b.length - 1) == ',') {\n      rawBuckets[i] = b.slice(0, -1);\n    }\n    group.additional = rawBuckets[0];\n    group.buckets = rawBuckets.slice(1).map(parseBucket);\n  }\n}", "id": "504f560ec5deaf17830833df115ce2338d92f05c72853ee89f2c646828126f07"}
{"identifier": "compareRules", "parameters": {"rule1": null, "rule2": null}, "return_type": "<not_specific>", "repo": "trozet/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": 2.0, "license": ["Apache-2.0"], "hexsha": "968aa0b0ffaaf0b5c81f1c3e1ea71282b53c9cb2", "ext": "js", "size": 22938, "code": "function compareRules(rule1, rule2) {\n  if (rule1.priority > rule2.priority) return -1;\n  if (rule1.priority == rule2.priority && rule1.actions < rule2.actions) return -1;\n  if (rule1.priority == rule2.priority && rule1.actions == rule2.actions && rule1.filters < rule2.filters) return -1;\n  return 1;\n}", "code_tokens": ["function", "compareRules", "(", "rule1", ",", "rule2", ")", "{", "if", "(", "rule1", ".", "priority", ">", "rule2", ".", "priority", ")", "return", "-", "1", ";", "if", "(", "rule1", ".", "priority", "==", "rule2", ".", "priority", "&&", "rule1", ".", "actions", "<", "rule2", ".", "actions", ")", "return", "-", "1", ";", "if", "(", "rule1", ".", "priority", "==", "rule2", ".", "priority", "&&", "rule1", ".", "actions", "==", "rule2", ".", "actions", "&&", "rule1", ".", "filters", "<", "rule2", ".", "filters", ")", "return", "-", "1", ";", "return", "1", ";", "}"], "original_docstring": "/** Compare two openflow rules by priority and then action.\n *  @param rule1: first rule\n *  @param rule2: second rule\n *  @return an integer as specified by array.sort\n */", "comment": [], "docstring_tokens": ["Compare", "two", "openflow", "rules", "by", "priority", "and", "then", "action", ".", "@param", "rule1", ":", "first", "rule", "@param", "rule2", ":", "second", "rule", "@return", "an", "integer", "as", "specified", "by", "array", ".", "sort"], "docstring": "Compare two openflow rules by priority and then action.\n@param rule1: first rule\n@param rule2: second rule\n@return an integer as specified by array.sort", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "rule1", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "rule2", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Compare two openflow rules by priority and then action.", "short_docstring_tokens": ["Compare", "two", "openflow", "rules", "by", "priority", "and", "then", "action", "."], "original_string": "function compareRules(rule1, rule2) {\n  if (rule1.priority > rule2.priority) return -1;\n  if (rule1.priority == rule2.priority && rule1.actions < rule2.actions) return -1;\n  if (rule1.priority == rule2.priority && rule1.actions == rule2.actions && rule1.filters < rule2.filters) return -1;\n  return 1;\n}", "id": "4fd887c8cb866109af8653a9385c365f277d7eafcf3e932f0b40bf48ef4c81d3"}
{"identifier": "compareRules", "parameters": {"rule1": null, "rule2": null}, "return_type": "<not_specific>", "repo": "andrekassis/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 8.0, "issues_count": 1.0, "forks_count": 6.0, "license": ["Apache-2.0"], "hexsha": "f8cb9c153c76d1d1080f907a1364ce54722cf8eb", "ext": "js", "size": 24232, "code": "function compareRules(rule1, rule2) {\n  if (rule1.priority > rule2.priority) return -1;\n  if (rule1.priority == rule2.priority && rule1.actions < rule2.actions) return -1;\n  if (rule1.priority == rule2.priority && rule1.actions == rule2.actions && rule1.filters < rule2.filters) return -1;\n  return 1;\n}", "code_tokens": ["function", "compareRules", "(", "rule1", ",", "rule2", ")", "{", "if", "(", "rule1", ".", "priority", ">", "rule2", ".", "priority", ")", "return", "-", "1", ";", "if", "(", "rule1", ".", "priority", "==", "rule2", ".", "priority", "&&", "rule1", ".", "actions", "<", "rule2", ".", "actions", ")", "return", "-", "1", ";", "if", "(", "rule1", ".", "priority", "==", "rule2", ".", "priority", "&&", "rule1", ".", "actions", "==", "rule2", ".", "actions", "&&", "rule1", ".", "filters", "<", "rule2", ".", "filters", ")", "return", "-", "1", ";", "return", "1", ";", "}"], "original_docstring": "/** Compare two openflow rules by priority and then action.\n *  @param rule1: first rule\n *  @param rule2: second rule\n *  @return an integer as specified by array.sort\n */", "comment": [], "docstring_tokens": ["Compare", "two", "openflow", "rules", "by", "priority", "and", "then", "action", ".", "@param", "rule1", ":", "first", "rule", "@param", "rule2", ":", "second", "rule", "@return", "an", "integer", "as", "specified", "by", "array", ".", "sort"], "docstring": "Compare two openflow rules by priority and then action.\n@param rule1: first rule\n@param rule2: second rule\n@return an integer as specified by array.sort", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "rule1", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "rule2", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Compare two openflow rules by priority and then action.", "short_docstring_tokens": ["Compare", "two", "openflow", "rules", "by", "priority", "and", "then", "action", "."], "original_string": "function compareRules(rule1, rule2) {\n  if (rule1.priority > rule2.priority) return -1;\n  if (rule1.priority == rule2.priority && rule1.actions < rule2.actions) return -1;\n  if (rule1.priority == rule2.priority && rule1.actions == rule2.actions && rule1.filters < rule2.filters) return -1;\n  return 1;\n}", "id": "4fd887c8cb866109af8653a9385c365f277d7eafcf3e932f0b40bf48ef4c81d3"}
{"identifier": "addRowspan", "parameters": {"rules": null}, "return_type": null, "repo": "trozet/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": 2.0, "license": ["Apache-2.0"], "hexsha": "968aa0b0ffaaf0b5c81f1c3e1ea71282b53c9cb2", "ext": "js", "size": 22938, "code": "function addRowspan(rules) {\n  rules.sort(compareRules);\n  var prevActions;\n  var prevPriority;\n  for(var i=0; i<rules.length; i++) {\n    var rule = rules[i];\n    if(rule.priority == prevPriority) {\n      rule.prioritySpan = -1;\n    } else {\n      prevPriority=rule.priority;\n      var span=0;\n      for(var j=i; j<rules.length && rules[j].priority == prevPriority; j++) {\n        span = span+1;\n      }\n      rule.prioritySpan = span;\n    }\n    if(rule.priority == prevPriority && rule.actions == prevActions) {\n      rule.actionsSpan = -1;\n    } else {\n      prevActions=rule.actions;\n      var span=0;\n      for(var j=i; j<rules.length && rules[j].actions == prevActions; j++) {\n        span = span+1;\n      }\n      rule.actionsSpan = span;\n    }\n  }\n}", "code_tokens": ["function", "addRowspan", "(", "rules", ")", "{", "rules", ".", "sort", "(", "compareRules", ")", ";", "var", "prevActions", ";", "var", "prevPriority", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "rules", ".", "length", ";", "i", "++", ")", "{", "var", "rule", "=", "rules", "[", "i", "]", ";", "if", "(", "rule", ".", "priority", "==", "prevPriority", ")", "{", "rule", ".", "prioritySpan", "=", "-", "1", ";", "}", "else", "{", "prevPriority", "=", "rule", ".", "priority", ";", "var", "span", "=", "0", ";", "for", "(", "var", "j", "=", "i", ";", "j", "<", "rules", ".", "length", "&&", "rules", "[", "j", "]", ".", "priority", "==", "prevPriority", ";", "j", "++", ")", "{", "span", "=", "span", "+", "1", ";", "}", "rule", ".", "prioritySpan", "=", "span", ";", "}", "if", "(", "rule", ".", "priority", "==", "prevPriority", "&&", "rule", ".", "actions", "==", "prevActions", ")", "{", "rule", ".", "actionsSpan", "=", "-", "1", ";", "}", "else", "{", "prevActions", "=", "rule", ".", "actions", ";", "var", "span", "=", "0", ";", "for", "(", "var", "j", "=", "i", ";", "j", "<", "rules", ".", "length", "&&", "rules", "[", "j", "]", ".", "actions", "==", "prevActions", ";", "j", "++", ")", "{", "span", "=", "span", "+", "1", ";", "}", "rule", ".", "actionsSpan", "=", "span", ";", "}", "}", "}"], "original_docstring": "/** Adds rowspan to have a nicely formatted priorities and actions\n * @param rules: a set of Openflow rules\n */", "comment": [], "docstring_tokens": ["Adds", "rowspan", "to", "have", "a", "nicely", "formatted", "priorities", "and", "actions", "@param", "rules", ":", "a", "set", "of", "Openflow", "rules"], "docstring": "Adds rowspan to have a nicely formatted priorities and actions\n@param rules: a set of Openflow rules", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "rules", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Adds rowspan to have a nicely formatted priorities and actions\n @param rules: a set of Openflow rules", "short_docstring_tokens": ["Adds", "rowspan", "to", "have", "a", "nicely", "formatted", "priorities", "and", "actions", "@param", "rules", ":", "a", "set", "of", "Openflow", "rules"], "original_string": "function addRowspan(rules) {\n  rules.sort(compareRules);\n  var prevActions;\n  var prevPriority;\n  for(var i=0; i<rules.length; i++) {\n    var rule = rules[i];\n    if(rule.priority == prevPriority) {\n      rule.prioritySpan = -1;\n    } else {\n      prevPriority=rule.priority;\n      var span=0;\n      for(var j=i; j<rules.length && rules[j].priority == prevPriority; j++) {\n        span = span+1;\n      }\n      rule.prioritySpan = span;\n    }\n    if(rule.priority == prevPriority && rule.actions == prevActions) {\n      rule.actionsSpan = -1;\n    } else {\n      prevActions=rule.actions;\n      var span=0;\n      for(var j=i; j<rules.length && rules[j].actions == prevActions; j++) {\n        span = span+1;\n      }\n      rule.actionsSpan = span;\n    }\n  }\n}", "id": "c337226455df011aaff66dd1b046c9345e3a83f1156b16f2b277af0a0c93c57f"}
{"identifier": "addRowspan", "parameters": {"rules": null}, "return_type": null, "repo": "andrekassis/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 8.0, "issues_count": 1.0, "forks_count": 6.0, "license": ["Apache-2.0"], "hexsha": "f8cb9c153c76d1d1080f907a1364ce54722cf8eb", "ext": "js", "size": 24232, "code": "function addRowspan(rules) {\n  rules.sort(compareRules);\n  var prevActions;\n  var prevPriority;\n  for(var i=0; i<rules.length; i++) {\n    var rule = rules[i];\n    if(rule.priority == prevPriority) {\n      rule.prioritySpan = -1;\n    } else {\n      prevPriority=rule.priority;\n      var span=0;\n      for(var j=i; j<rules.length && rules[j].priority == prevPriority; j++) {\n        span = span+1;\n      }\n      rule.prioritySpan = span;\n    }\n    if(rule.priority == prevPriority && rule.actions == prevActions) {\n      rule.actionsSpan = -1;\n    } else {\n      prevActions=rule.actions;\n      var span=0;\n      for(var j=i; j<rules.length && rules[j].actions == prevActions; j++) {\n        span = span+1;\n      }\n      rule.actionsSpan = span;\n    }\n  }\n}", "code_tokens": ["function", "addRowspan", "(", "rules", ")", "{", "rules", ".", "sort", "(", "compareRules", ")", ";", "var", "prevActions", ";", "var", "prevPriority", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "rules", ".", "length", ";", "i", "++", ")", "{", "var", "rule", "=", "rules", "[", "i", "]", ";", "if", "(", "rule", ".", "priority", "==", "prevPriority", ")", "{", "rule", ".", "prioritySpan", "=", "-", "1", ";", "}", "else", "{", "prevPriority", "=", "rule", ".", "priority", ";", "var", "span", "=", "0", ";", "for", "(", "var", "j", "=", "i", ";", "j", "<", "rules", ".", "length", "&&", "rules", "[", "j", "]", ".", "priority", "==", "prevPriority", ";", "j", "++", ")", "{", "span", "=", "span", "+", "1", ";", "}", "rule", ".", "prioritySpan", "=", "span", ";", "}", "if", "(", "rule", ".", "priority", "==", "prevPriority", "&&", "rule", ".", "actions", "==", "prevActions", ")", "{", "rule", ".", "actionsSpan", "=", "-", "1", ";", "}", "else", "{", "prevActions", "=", "rule", ".", "actions", ";", "var", "span", "=", "0", ";", "for", "(", "var", "j", "=", "i", ";", "j", "<", "rules", ".", "length", "&&", "rules", "[", "j", "]", ".", "actions", "==", "prevActions", ";", "j", "++", ")", "{", "span", "=", "span", "+", "1", ";", "}", "rule", ".", "actionsSpan", "=", "span", ";", "}", "}", "}"], "original_docstring": "/** Adds rowspan to have a nicely formatted priorities and actions\n * @param rules: a set of Openflow rules\n */", "comment": [], "docstring_tokens": ["Adds", "rowspan", "to", "have", "a", "nicely", "formatted", "priorities", "and", "actions", "@param", "rules", ":", "a", "set", "of", "Openflow", "rules"], "docstring": "Adds rowspan to have a nicely formatted priorities and actions\n@param rules: a set of Openflow rules", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "rules", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Adds rowspan to have a nicely formatted priorities and actions\n @param rules: a set of Openflow rules", "short_docstring_tokens": ["Adds", "rowspan", "to", "have", "a", "nicely", "formatted", "priorities", "and", "actions", "@param", "rules", ":", "a", "set", "of", "Openflow", "rules"], "original_string": "function addRowspan(rules) {\n  rules.sort(compareRules);\n  var prevActions;\n  var prevPriority;\n  for(var i=0; i<rules.length; i++) {\n    var rule = rules[i];\n    if(rule.priority == prevPriority) {\n      rule.prioritySpan = -1;\n    } else {\n      prevPriority=rule.priority;\n      var span=0;\n      for(var j=i; j<rules.length && rules[j].priority == prevPriority; j++) {\n        span = span+1;\n      }\n      rule.prioritySpan = span;\n    }\n    if(rule.priority == prevPriority && rule.actions == prevActions) {\n      rule.actionsSpan = -1;\n    } else {\n      prevActions=rule.actions;\n      var span=0;\n      for(var j=i; j<rules.length && rules[j].actions == prevActions; j++) {\n        span = span+1;\n      }\n      rule.actionsSpan = span;\n    }\n  }\n}", "id": "c337226455df011aaff66dd1b046c9345e3a83f1156b16f2b277af0a0c93c57f"}
{"identifier": "classify", "parameters": {"array": null, "classifier": null}, "return_type": "<not_specific>", "repo": "trozet/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": 2.0, "license": ["Apache-2.0"], "hexsha": "968aa0b0ffaaf0b5c81f1c3e1ea71282b53c9cb2", "ext": "js", "size": 22938, "code": "function classify(array, classifier) {\n  var result = {};\n  for (var i = 0; i < array.length; i++) {\n    var elem = array[i];\n    var key = classifier(elem);\n    var list = result[key];\n    if (list !== undefined)\n      list.push(elem);\n    else\n      result[key] = [elem];\n  }\n  for(var key in result) {\n    addRowspan(result[key]);\n  }\n  return result;\n}", "code_tokens": ["function", "classify", "(", "array", ",", "classifier", ")", "{", "var", "result", "=", "{", "}", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "array", ".", "length", ";", "i", "++", ")", "{", "var", "elem", "=", "array", "[", "i", "]", ";", "var", "key", "=", "classifier", "(", "elem", ")", ";", "var", "list", "=", "result", "[", "key", "]", ";", "if", "(", "list", "!==", "undefined", ")", "list", ".", "push", "(", "elem", ")", ";", "else", "result", "[", "key", "]", "=", "[", "elem", "]", ";", "}", "for", "(", "var", "key", "in", "result", ")", "{", "addRowspan", "(", "result", "[", "key", "]", ")", ";", "}", "return", "result", ";", "}"], "original_docstring": "/** Classify the eleements of an array into a table according to a classifier function.\n *\n * A generic function that taken a classifier that gives back\n * the kind of an object as an integers transform an array of objects\n * in a table indexed by integers of list where each list is the set of elements of the\n * array that have the key as classifier.\n * @param array: the array to classify\n * @param classifier: the classifier function\n * @return the result as an integer indexed table of list\n */", "comment": [], "docstring_tokens": ["Classify", "the", "eleements", "of", "an", "array", "into", "a", "table", "according", "to", "a", "classifier", "function", ".", "A", "generic", "function", "that", "taken", "a", "classifier", "that", "gives", "back", "the", "kind", "of", "an", "object", "as", "an", "integers", "transform", "an", "array", "of", "objects", "in", "a", "table", "indexed", "by", "integers", "of", "list", "where", "each", "list", "is", "the", "set", "of", "elements", "of", "the", "array", "that", "have", "the", "key", "as", "classifier", ".", "@param", "array", ":", "the", "array", "to", "classify", "@param", "classifier", ":", "the", "classifier", "function", "@return", "the", "result", "as", "an", "integer", "indexed", "table", "of", "list"], "docstring": "Classify the eleements of an array into a table according to a classifier function.\nA generic function that taken a classifier that gives back\nthe kind of an object as an integers transform an array of objects\nin a table indexed by integers of list where each list is the set of elements of the\narray that have the key as classifier.\n@param array: the array to classify\n@param classifier: the classifier function\n@return the result as an integer indexed table of list", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "array", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "classifier", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Classify the eleements of an array into a table according to a classifier function.", "short_docstring_tokens": ["Classify", "the", "eleements", "of", "an", "array", "into", "a", "table", "according", "to", "a", "classifier", "function", "."], "original_string": "function classify(array, classifier) {\n  var result = {};\n  for (var i = 0; i < array.length; i++) {\n    var elem = array[i];\n    var key = classifier(elem);\n    var list = result[key];\n    if (list !== undefined)\n      list.push(elem);\n    else\n      result[key] = [elem];\n  }\n  for(var key in result) {\n    addRowspan(result[key]);\n  }\n  return result;\n}", "id": "ab3a59a0c72751131c895d7d9fe031a34c4bc70dbc0fc9f0bde80103cc40a5b5"}
{"identifier": "classify", "parameters": {"array": null, "classifier": null}, "return_type": "<not_specific>", "repo": "andrekassis/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 8.0, "issues_count": 1.0, "forks_count": 6.0, "license": ["Apache-2.0"], "hexsha": "f8cb9c153c76d1d1080f907a1364ce54722cf8eb", "ext": "js", "size": 24232, "code": "function classify(array, classifier) {\n  var result = {};\n  for (var i = 0; i < array.length; i++) {\n    var elem = array[i];\n    var key = classifier(elem);\n    var list = result[key];\n    if (list !== undefined)\n      list.push(elem);\n    else\n      result[key] = [elem];\n  }\n  for(var key in result) {\n    addRowspan(result[key]);\n  }\n  return result;\n}", "code_tokens": ["function", "classify", "(", "array", ",", "classifier", ")", "{", "var", "result", "=", "{", "}", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "array", ".", "length", ";", "i", "++", ")", "{", "var", "elem", "=", "array", "[", "i", "]", ";", "var", "key", "=", "classifier", "(", "elem", ")", ";", "var", "list", "=", "result", "[", "key", "]", ";", "if", "(", "list", "!==", "undefined", ")", "list", ".", "push", "(", "elem", ")", ";", "else", "result", "[", "key", "]", "=", "[", "elem", "]", ";", "}", "for", "(", "var", "key", "in", "result", ")", "{", "addRowspan", "(", "result", "[", "key", "]", ")", ";", "}", "return", "result", ";", "}"], "original_docstring": "/** Classify the eleements of an array into a table according to a classifier function.\n *\n * A generic function that taken a classifier that gives back\n * the kind of an object as an integers transform an array of objects\n * in a table indexed by integers of list where each list is the set of elements of the\n * array that have the key as classifier.\n * @param array: the array to classify\n * @param classifier: the classifier function\n * @return the result as an integer indexed table of list\n */", "comment": [], "docstring_tokens": ["Classify", "the", "eleements", "of", "an", "array", "into", "a", "table", "according", "to", "a", "classifier", "function", ".", "A", "generic", "function", "that", "taken", "a", "classifier", "that", "gives", "back", "the", "kind", "of", "an", "object", "as", "an", "integers", "transform", "an", "array", "of", "objects", "in", "a", "table", "indexed", "by", "integers", "of", "list", "where", "each", "list", "is", "the", "set", "of", "elements", "of", "the", "array", "that", "have", "the", "key", "as", "classifier", ".", "@param", "array", ":", "the", "array", "to", "classify", "@param", "classifier", ":", "the", "classifier", "function", "@return", "the", "result", "as", "an", "integer", "indexed", "table", "of", "list"], "docstring": "Classify the eleements of an array into a table according to a classifier function.\nA generic function that taken a classifier that gives back\nthe kind of an object as an integers transform an array of objects\nin a table indexed by integers of list where each list is the set of elements of the\narray that have the key as classifier.\n@param array: the array to classify\n@param classifier: the classifier function\n@return the result as an integer indexed table of list", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "array", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "classifier", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Classify the eleements of an array into a table according to a classifier function.", "short_docstring_tokens": ["Classify", "the", "eleements", "of", "an", "array", "into", "a", "table", "according", "to", "a", "classifier", "function", "."], "original_string": "function classify(array, classifier) {\n  var result = {};\n  for (var i = 0; i < array.length; i++) {\n    var elem = array[i];\n    var key = classifier(elem);\n    var list = result[key];\n    if (list !== undefined)\n      list.push(elem);\n    else\n      result[key] = [elem];\n  }\n  for(var key in result) {\n    addRowspan(result[key]);\n  }\n  return result;\n}", "id": "ab3a59a0c72751131c895d7d9fe031a34c4bc70dbc0fc9f0bde80103cc40a5b5"}
{"identifier": "classify", "parameters": {"array": null, "classifier": null}, "return_type": "<not_specific>", "repo": "Gtmasks/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 3.0, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "332fb5ac6f734fef6962538fe484086efb706b1c", "ext": "js", "size": 27561, "code": "function classify(array, classifier) {\n  var result = {};\n  for (var i = 0; i < array.length; i++) {\n    var elem = array[i];\n    var key = classifier(elem);\n    var list = result[key];\n    if (list !== undefined)\n      list.push(elem);\n    else\n      result[key] = [elem];\n  }\n  for(var key in result) {\n    addRowspan(result[key]);\n  }\n  return result;\n}", "code_tokens": ["function", "classify", "(", "array", ",", "classifier", ")", "{", "var", "result", "=", "{", "}", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "array", ".", "length", ";", "i", "++", ")", "{", "var", "elem", "=", "array", "[", "i", "]", ";", "var", "key", "=", "classifier", "(", "elem", ")", ";", "var", "list", "=", "result", "[", "key", "]", ";", "if", "(", "list", "!==", "undefined", ")", "list", ".", "push", "(", "elem", ")", ";", "else", "result", "[", "key", "]", "=", "[", "elem", "]", ";", "}", "for", "(", "var", "key", "in", "result", ")", "{", "addRowspan", "(", "result", "[", "key", "]", ")", ";", "}", "return", "result", ";", "}"], "original_docstring": "/** Classify the eleements of an array into a table according to a classifier function.\n *\n * A generic function that taken a classifier that gives back\n * the kind of an object as an integers transform an array of objects\n * in a table indexed by integers of list where each list is the set of elements of the\n * array that have the key as classifier.\n * @param array: the array to classify\n * @param classifier: the classifier function\n * @return the result as an integer indexed table of list\n */", "comment": [], "docstring_tokens": ["Classify", "the", "eleements", "of", "an", "array", "into", "a", "table", "according", "to", "a", "classifier", "function", ".", "A", "generic", "function", "that", "taken", "a", "classifier", "that", "gives", "back", "the", "kind", "of", "an", "object", "as", "an", "integers", "transform", "an", "array", "of", "objects", "in", "a", "table", "indexed", "by", "integers", "of", "list", "where", "each", "list", "is", "the", "set", "of", "elements", "of", "the", "array", "that", "have", "the", "key", "as", "classifier", ".", "@param", "array", ":", "the", "array", "to", "classify", "@param", "classifier", ":", "the", "classifier", "function", "@return", "the", "result", "as", "an", "integer", "indexed", "table", "of", "list"], "docstring": "Classify the eleements of an array into a table according to a classifier function.\nA generic function that taken a classifier that gives back\nthe kind of an object as an integers transform an array of objects\nin a table indexed by integers of list where each list is the set of elements of the\narray that have the key as classifier.\n@param array: the array to classify\n@param classifier: the classifier function\n@return the result as an integer indexed table of list", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "array", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "classifier", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Classify the eleements of an array into a table according to a classifier function.", "short_docstring_tokens": ["Classify", "the", "eleements", "of", "an", "array", "into", "a", "table", "according", "to", "a", "classifier", "function", "."], "original_string": "function classify(array, classifier) {\n  var result = {};\n  for (var i = 0; i < array.length; i++) {\n    var elem = array[i];\n    var key = classifier(elem);\n    var list = result[key];\n    if (list !== undefined)\n      list.push(elem);\n    else\n      result[key] = [elem];\n  }\n  for(var key in result) {\n    addRowspan(result[key]);\n  }\n  return result;\n}", "id": "ab3a59a0c72751131c895d7d9fe031a34c4bc70dbc0fc9f0bde80103cc40a5b5"}
{"identifier": "extractPort", "parameters": {"c": null, "graph": null, "itfs": null}, "return_type": "<not_specific>", "repo": "trozet/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": 2.0, "license": ["Apache-2.0"], "hexsha": "968aa0b0ffaaf0b5c81f1c3e1ea71282b53c9cb2", "ext": "js", "size": 22938, "code": "function extractPort(c, graph, itfs) {\n  var pot = graph.getTargets(c);\n  for (var i = 0; i < pot.length; i++) {\n    var cc = pot[i];\n    var ofport = cc.metadata.OfPort;\n    if (ofport === undefined)\n      continue;\n    var itf = [c, cc];\n    itfs[ofport] = itf;\n    if (cc.metadata.Type === 'patch') {\n      var ccc = graph.getNeighbor(cc, 'patch');\n      if (ccc === undefined)\n        return;\n      itf.push(ccc);\n      var cccc = graph.getNeighbor(ccc, 'ovsport');\n      if (cccc !== undefined)\n        itf.push(cccc);\n    }\n  }\n}", "code_tokens": ["function", "extractPort", "(", "c", ",", "graph", ",", "itfs", ")", "{", "var", "pot", "=", "graph", ".", "getTargets", "(", "c", ")", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "pot", ".", "length", ";", "i", "++", ")", "{", "var", "cc", "=", "pot", "[", "i", "]", ";", "var", "ofport", "=", "cc", ".", "metadata", ".", "OfPort", ";", "if", "(", "ofport", "===", "undefined", ")", "continue", ";", "var", "itf", "=", "[", "c", ",", "cc", "]", ";", "itfs", "[", "ofport", "]", "=", "itf", ";", "if", "(", "cc", ".", "metadata", ".", "Type", "===", "'patch'", ")", "{", "var", "ccc", "=", "graph", ".", "getNeighbor", "(", "cc", ",", "'patch'", ")", ";", "if", "(", "ccc", "===", "undefined", ")", "return", ";", "itf", ".", "push", "(", "ccc", ")", ";", "var", "cccc", "=", "graph", ".", "getNeighbor", "(", "ccc", ",", "'ovsport'", ")", ";", "if", "(", "cccc", "!==", "undefined", ")", "itf", ".", "push", "(", "cccc", ")", ";", "}", "}", "}"], "original_docstring": "/** Computes the chain of node that represent the path of node to highlight for a given bridge interface\n *\n * If it is an external port, we only go up to the port itself, if it is a patch port, we continue on the other bridge\n * but the bridge node is not part of the highlighted path. itfs is filled with an entry for the port using the numbering of ovs-ofctl as key\n * and the list of nodes as values.\n * @param c a GNode of type ovsport\n * @param graph the full graph model\n * @param itfs the table to fill with information on the port represented.\n*/", "comment": [], "docstring_tokens": ["Computes", "the", "chain", "of", "node", "that", "represent", "the", "path", "of", "node", "to", "highlight", "for", "a", "given", "bridge", "interface", "If", "it", "is", "an", "external", "port", "we", "only", "go", "up", "to", "the", "port", "itself", "if", "it", "is", "a", "patch", "port", "we", "continue", "on", "the", "other", "bridge", "but", "the", "bridge", "node", "is", "not", "part", "of", "the", "highlighted", "path", ".", "itfs", "is", "filled", "with", "an", "entry", "for", "the", "port", "using", "the", "numbering", "of", "ovs", "-", "ofctl", "as", "key", "and", "the", "list", "of", "nodes", "as", "values", ".", "@param", "c", "a", "GNode", "of", "type", "ovsport", "@param", "graph", "the", "full", "graph", "model", "@param", "itfs", "the", "table", "to", "fill", "with", "information", "on", "the", "port", "represented", "."], "docstring": "Computes the chain of node that represent the path of node to highlight for a given bridge interface\nIf it is an external port, we only go up to the port itself, if it is a patch port, we continue on the other bridge\nbut the bridge node is not part of the highlighted path. itfs is filled with an entry for the port using the numbering of ovs-ofctl as key\nand the list of nodes as values.\n@param c a GNode of type ovsport\n@param graph the full graph model\n@param itfs the table to fill with information on the port represented.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "c", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "graph", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "itfs", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Computes the chain of node that represent the path of node to highlight for a given bridge interface\n If it is an external port, we only go up to the port itself, if it is a patch port, we continue on the other bridge\n but the bridge node is not part of the highlighted path.", "short_docstring_tokens": ["Computes", "the", "chain", "of", "node", "that", "represent", "the", "path", "of", "node", "to", "highlight", "for", "a", "given", "bridge", "interface", "If", "it", "is", "an", "external", "port", "we", "only", "go", "up", "to", "the", "port", "itself", "if", "it", "is", "a", "patch", "port", "we", "continue", "on", "the", "other", "bridge", "but", "the", "bridge", "node", "is", "not", "part", "of", "the", "highlighted", "path", "."], "original_string": "function extractPort(c, graph, itfs) {\n  var pot = graph.getTargets(c);\n  for (var i = 0; i < pot.length; i++) {\n    var cc = pot[i];\n    var ofport = cc.metadata.OfPort;\n    if (ofport === undefined)\n      continue;\n    var itf = [c, cc];\n    itfs[ofport] = itf;\n    if (cc.metadata.Type === 'patch') {\n      var ccc = graph.getNeighbor(cc, 'patch');\n      if (ccc === undefined)\n        return;\n      itf.push(ccc);\n      var cccc = graph.getNeighbor(ccc, 'ovsport');\n      if (cccc !== undefined)\n        itf.push(cccc);\n    }\n  }\n}", "id": "8a4450fc7197f4f1ac492c71533e4ba642e4abdb60efb08ff499eb78253894fd"}
{"identifier": "extractPort", "parameters": {"c": null, "graph": null, "itfs": null}, "return_type": "<not_specific>", "repo": "andrekassis/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 8.0, "issues_count": 1.0, "forks_count": 6.0, "license": ["Apache-2.0"], "hexsha": "f8cb9c153c76d1d1080f907a1364ce54722cf8eb", "ext": "js", "size": 24232, "code": "function extractPort(c, graph, itfs) {\n  var pot = graph.getTargets(c);\n  for (var i = 0; i < pot.length; i++) {\n    var cc = pot[i];\n    var ofport = cc.metadata.OfPort;\n    if (ofport === undefined)\n      continue;\n    var itf = [c, cc];\n    itfs[ofport] = itf;\n    if (cc.metadata.Type === 'patch') {\n      var ccc = graph.getNeighbor(cc, 'patch');\n      if (ccc === undefined)\n        return;\n      itf.push(ccc);\n      var cccc = graph.getNeighbor(ccc, 'ovsport');\n      if (cccc !== undefined)\n        itf.push(cccc);\n    }\n  }\n}", "code_tokens": ["function", "extractPort", "(", "c", ",", "graph", ",", "itfs", ")", "{", "var", "pot", "=", "graph", ".", "getTargets", "(", "c", ")", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "pot", ".", "length", ";", "i", "++", ")", "{", "var", "cc", "=", "pot", "[", "i", "]", ";", "var", "ofport", "=", "cc", ".", "metadata", ".", "OfPort", ";", "if", "(", "ofport", "===", "undefined", ")", "continue", ";", "var", "itf", "=", "[", "c", ",", "cc", "]", ";", "itfs", "[", "ofport", "]", "=", "itf", ";", "if", "(", "cc", ".", "metadata", ".", "Type", "===", "'patch'", ")", "{", "var", "ccc", "=", "graph", ".", "getNeighbor", "(", "cc", ",", "'patch'", ")", ";", "if", "(", "ccc", "===", "undefined", ")", "return", ";", "itf", ".", "push", "(", "ccc", ")", ";", "var", "cccc", "=", "graph", ".", "getNeighbor", "(", "ccc", ",", "'ovsport'", ")", ";", "if", "(", "cccc", "!==", "undefined", ")", "itf", ".", "push", "(", "cccc", ")", ";", "}", "}", "}"], "original_docstring": "/** Computes the chain of node that represent the path of node to highlight for a given bridge interface\n *\n * If it is an external port, we only go up to the port itself, if it is a patch port, we continue on the other bridge\n * but the bridge node is not part of the highlighted path. itfs is filled with an entry for the port using the numbering of ovs-ofctl as key\n * and the list of nodes as values.\n * @param c a GNode of type ovsport\n * @param graph the full graph model\n * @param itfs the table to fill with information on the port represented.\n*/", "comment": [], "docstring_tokens": ["Computes", "the", "chain", "of", "node", "that", "represent", "the", "path", "of", "node", "to", "highlight", "for", "a", "given", "bridge", "interface", "If", "it", "is", "an", "external", "port", "we", "only", "go", "up", "to", "the", "port", "itself", "if", "it", "is", "a", "patch", "port", "we", "continue", "on", "the", "other", "bridge", "but", "the", "bridge", "node", "is", "not", "part", "of", "the", "highlighted", "path", ".", "itfs", "is", "filled", "with", "an", "entry", "for", "the", "port", "using", "the", "numbering", "of", "ovs", "-", "ofctl", "as", "key", "and", "the", "list", "of", "nodes", "as", "values", ".", "@param", "c", "a", "GNode", "of", "type", "ovsport", "@param", "graph", "the", "full", "graph", "model", "@param", "itfs", "the", "table", "to", "fill", "with", "information", "on", "the", "port", "represented", "."], "docstring": "Computes the chain of node that represent the path of node to highlight for a given bridge interface\nIf it is an external port, we only go up to the port itself, if it is a patch port, we continue on the other bridge\nbut the bridge node is not part of the highlighted path. itfs is filled with an entry for the port using the numbering of ovs-ofctl as key\nand the list of nodes as values.\n@param c a GNode of type ovsport\n@param graph the full graph model\n@param itfs the table to fill with information on the port represented.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "c", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "graph", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "itfs", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Computes the chain of node that represent the path of node to highlight for a given bridge interface\n If it is an external port, we only go up to the port itself, if it is a patch port, we continue on the other bridge\n but the bridge node is not part of the highlighted path.", "short_docstring_tokens": ["Computes", "the", "chain", "of", "node", "that", "represent", "the", "path", "of", "node", "to", "highlight", "for", "a", "given", "bridge", "interface", "If", "it", "is", "an", "external", "port", "we", "only", "go", "up", "to", "the", "port", "itself", "if", "it", "is", "a", "patch", "port", "we", "continue", "on", "the", "other", "bridge", "but", "the", "bridge", "node", "is", "not", "part", "of", "the", "highlighted", "path", "."], "original_string": "function extractPort(c, graph, itfs) {\n  var pot = graph.getTargets(c);\n  for (var i = 0; i < pot.length; i++) {\n    var cc = pot[i];\n    var ofport = cc.metadata.OfPort;\n    if (ofport === undefined)\n      continue;\n    var itf = [c, cc];\n    itfs[ofport] = itf;\n    if (cc.metadata.Type === 'patch') {\n      var ccc = graph.getNeighbor(cc, 'patch');\n      if (ccc === undefined)\n        return;\n      itf.push(ccc);\n      var cccc = graph.getNeighbor(ccc, 'ovsport');\n      if (cccc !== undefined)\n        itf.push(cccc);\n    }\n  }\n}", "id": "8a4450fc7197f4f1ac492c71533e4ba642e4abdb60efb08ff499eb78253894fd"}
{"identifier": "extractPort", "parameters": {"c": null, "graph": null, "itfs": null}, "return_type": "<not_specific>", "repo": "Gtmasks/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 3.0, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "332fb5ac6f734fef6962538fe484086efb706b1c", "ext": "js", "size": 27561, "code": "function extractPort(c, graph, itfs) {\n  var pot = graph.getTargets(c);\n  for (var i = 0; i < pot.length; i++) {\n    var cc = pot[i];\n    var ofport = cc.metadata.OfPort;\n    if (ofport === undefined)\n      continue;\n    var itf = [c, cc];\n    itfs[ofport] = itf;\n    if (cc.metadata.Type === 'patch') {\n      var ccc = graph.getNeighbor(cc, 'patch');\n      if (ccc === undefined)\n        return;\n      itf.push(ccc);\n      var cccc = graph.getNeighbor(ccc, 'ovsport');\n      if (cccc !== undefined)\n        itf.push(cccc);\n    }\n  }\n}", "code_tokens": ["function", "extractPort", "(", "c", ",", "graph", ",", "itfs", ")", "{", "var", "pot", "=", "graph", ".", "getTargets", "(", "c", ")", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "pot", ".", "length", ";", "i", "++", ")", "{", "var", "cc", "=", "pot", "[", "i", "]", ";", "var", "ofport", "=", "cc", ".", "metadata", ".", "OfPort", ";", "if", "(", "ofport", "===", "undefined", ")", "continue", ";", "var", "itf", "=", "[", "c", ",", "cc", "]", ";", "itfs", "[", "ofport", "]", "=", "itf", ";", "if", "(", "cc", ".", "metadata", ".", "Type", "===", "'patch'", ")", "{", "var", "ccc", "=", "graph", ".", "getNeighbor", "(", "cc", ",", "'patch'", ")", ";", "if", "(", "ccc", "===", "undefined", ")", "return", ";", "itf", ".", "push", "(", "ccc", ")", ";", "var", "cccc", "=", "graph", ".", "getNeighbor", "(", "ccc", ",", "'ovsport'", ")", ";", "if", "(", "cccc", "!==", "undefined", ")", "itf", ".", "push", "(", "cccc", ")", ";", "}", "}", "}"], "original_docstring": "/** Computes the chain of node that represent the path of node to highlight for a given bridge interface\n *\n * If it is an external port, we only go up to the port itself, if it is a patch port, we continue on the other bridge\n * but the bridge node is not part of the highlighted path. itfs is filled with an entry for the port using the numbering of ovs-ofctl as key\n * and the list of nodes as values.\n * @param c a GNode of type ovsport\n * @param graph the full graph model\n * @param itfs the table to fill with information on the port represented.\n*/", "comment": [], "docstring_tokens": ["Computes", "the", "chain", "of", "node", "that", "represent", "the", "path", "of", "node", "to", "highlight", "for", "a", "given", "bridge", "interface", "If", "it", "is", "an", "external", "port", "we", "only", "go", "up", "to", "the", "port", "itself", "if", "it", "is", "a", "patch", "port", "we", "continue", "on", "the", "other", "bridge", "but", "the", "bridge", "node", "is", "not", "part", "of", "the", "highlighted", "path", ".", "itfs", "is", "filled", "with", "an", "entry", "for", "the", "port", "using", "the", "numbering", "of", "ovs", "-", "ofctl", "as", "key", "and", "the", "list", "of", "nodes", "as", "values", ".", "@param", "c", "a", "GNode", "of", "type", "ovsport", "@param", "graph", "the", "full", "graph", "model", "@param", "itfs", "the", "table", "to", "fill", "with", "information", "on", "the", "port", "represented", "."], "docstring": "Computes the chain of node that represent the path of node to highlight for a given bridge interface\nIf it is an external port, we only go up to the port itself, if it is a patch port, we continue on the other bridge\nbut the bridge node is not part of the highlighted path. itfs is filled with an entry for the port using the numbering of ovs-ofctl as key\nand the list of nodes as values.\n@param c a GNode of type ovsport\n@param graph the full graph model\n@param itfs the table to fill with information on the port represented.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "c", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "graph", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "itfs", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Computes the chain of node that represent the path of node to highlight for a given bridge interface\n If it is an external port, we only go up to the port itself, if it is a patch port, we continue on the other bridge\n but the bridge node is not part of the highlighted path.", "short_docstring_tokens": ["Computes", "the", "chain", "of", "node", "that", "represent", "the", "path", "of", "node", "to", "highlight", "for", "a", "given", "bridge", "interface", "If", "it", "is", "an", "external", "port", "we", "only", "go", "up", "to", "the", "port", "itself", "if", "it", "is", "a", "patch", "port", "we", "continue", "on", "the", "other", "bridge", "but", "the", "bridge", "node", "is", "not", "part", "of", "the", "highlighted", "path", "."], "original_string": "function extractPort(c, graph, itfs) {\n  var pot = graph.getTargets(c);\n  for (var i = 0; i < pot.length; i++) {\n    var cc = pot[i];\n    var ofport = cc.metadata.OfPort;\n    if (ofport === undefined)\n      continue;\n    var itf = [c, cc];\n    itfs[ofport] = itf;\n    if (cc.metadata.Type === 'patch') {\n      var ccc = graph.getNeighbor(cc, 'patch');\n      if (ccc === undefined)\n        return;\n      itf.push(ccc);\n      var cccc = graph.getNeighbor(ccc, 'ovsport');\n      if (cccc !== undefined)\n        itf.push(cccc);\n    }\n  }\n}", "id": "8a4450fc7197f4f1ac492c71533e4ba642e4abdb60efb08ff499eb78253894fd"}
{"identifier": "BridgeLayout", "parameters": {"graph": null, "bridge": null, "store": null}, "return_type": null, "repo": "trozet/skydive", "path": "statics/js/components/rule-detail.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": 2.0, "license": ["Apache-2.0"], "hexsha": "968aa0b0ffaaf0b5c81f1c3e1ea71282b53c9cb2", "ext": "js", "size": 22938, "code": "function BridgeLayout(graph, bridge, store) {\n    this.graph = graph;\n    this.bridge = bridge;\n    this.store = store;\n    this.compute();\n  }", "code_tokens": ["function", "BridgeLayout", "(", "graph", ",", "bridge", ",", "store", ")", "{", "this", ".", "graph", "=", "graph", ";", "this", ".", "bridge", "=", "bridge", ";", "this", ".", "store", "=", "store", ";", "this", ".", "compute", "(", ")", ";", "}"], "original_docstring": "/** Builds the bridge layout\n   * @param graph the global graph hosting the bridge\n   * @param bridge the bridge node whose rules are represented.\n   */", "comment": [], "docstring_tokens": ["Builds", "the", "bridge", "layout", "@param", "graph", "the", "global", "graph", "hosting", "the", "bridge", "@param", "bridge", "the", "bridge", "node", "whose", "rules", "are", "represented", "."], "docstring": "Builds the bridge layout\n@param graph the global graph hosting the bridge\n@param bridge the bridge node whose rules are represented.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "graph", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "bridge", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "store", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Builds the bridge layout\n @param graph the global graph hosting the bridge\n @param bridge the bridge node whose rules are represented.", "short_docstring_tokens": ["Builds", "the", "bridge", "layout", "@param", "graph", "the", "global", "graph", "hosting", "the", "bridge", "@param", "bridge", "the", "bridge", "node", "whose", "rules", "are", "represented", "."], "original_string": "function BridgeLayout(graph, bridge, store) {\n    this.graph = graph;\n    this.bridge = bridge;\n    this.store = store;\n    this.compute();\n  }", "id": "b1ab7a393b861299c3fdd83bb9b9a59f8eece79544c6c61aa19f6ccf0c5b44b5"}
{"identifier": "yfinancedata", "parameters": {"properties": null}, "return_type": null, "repo": "sidpagariya/yfinance-live", "path": "src/yfinancedata.js", "language": "JavaScript", "stars_count": 3.0, "issues_count": NaN, "forks_count": 3.0, "license": ["MIT"], "hexsha": "7367a125de98ea6a3559771d767e30787a3910bf", "ext": "js", "size": 58285, "code": "function yfinancedata(properties) {\n    if (properties)\n      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }", "code_tokens": ["function", "yfinancedata", "(", "properties", ")", "{", "if", "(", "properties", ")", "for", "(", "var", "keys", "=", "Object", ".", "keys", "(", "properties", ")", ",", "i", "=", "0", ";", "i", "<", "keys", ".", "length", ";", "++", "i", ")", "if", "(", "properties", "[", "keys", "[", "i", "]", "]", "!=", "null", ")", "this", "[", "keys", "[", "i", "]", "]", "=", "properties", "[", "keys", "[", "i", "]", "]", "}"], "original_docstring": "/**\n   * Constructs a new yfinancedata.\n   * @exports yfinancedata\n   * @classdesc Represents a yfinancedata.\n   * @implements Iyfinancedata\n   * @constructor\n   * @param {Iyfinancedata=} [properties] Properties to set\n   */", "comment": [], "docstring_tokens": ["Constructs", "a", "new", "yfinancedata", ".", "@exports", "yfinancedata", "@classdesc", "Represents", "a", "yfinancedata", ".", "@implements", "Iyfinancedata", "@constructor", "@param", "{", "Iyfinancedata", "=", "}", "[", "properties", "]", "Properties", "to", "set"], "docstring": "Constructs a new yfinancedata.\n@exports yfinancedata\n@classdesc Represents a yfinancedata.\n@implements Iyfinancedata\n@constructor\n@param {Iyfinancedata=} [properties] Properties to set", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "properties", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Constructs a new yfinancedata.", "short_docstring_tokens": ["Constructs", "a", "new", "yfinancedata", "."], "original_string": "function yfinancedata(properties) {\n    if (properties)\n      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n        if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]]\n  }", "id": "4e29aedc5df9286cc3dfc437424a9e485329f3ab1fec9623682f49ed9e63699f"}
{"identifier": "fillCities", "parameters": {"param": null}, "return_type": null, "repo": "EgorVasilyev/job4j", "path": "3_chapter_002/src/main/webapp/WEB-INF/js/functions.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 19.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "9a81b2c08d20eb59175140d3eb0834716e21a32c", "ext": "js", "size": 1231, "code": "function fillCities(param) {\n    $.ajax({\n        url: './jsonCity',\n        method: 'GET',\n        data: \"countryId=\" + param,\n        complete: function(data) {\n            var result = \"\";\n            var cities = JSON.parse(data.responseText);\n            for (var i = 0; i < cities.length; i++) {\n                var city = cities[i];\n                result +=\n                    \"<option value=\\\"\" + city.id + \"\\\">\" + city.name + \"</option>\";\n            }\n            var table = document.getElementById(\"city\");\n            table.innerHTML = result;\n        }\n    });\n}", "code_tokens": ["function", "fillCities", "(", "param", ")", "{", "$", ".", "ajax", "(", "{", "url", ":", "'./jsonCity'", ",", "method", ":", "'GET'", ",", "data", ":", "\"countryId=\"", "+", "param", ",", "complete", ":", "function", "(", "data", ")", "{", "var", "result", "=", "\"\"", ";", "var", "cities", "=", "JSON", ".", "parse", "(", "data", ".", "responseText", ")", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "cities", ".", "length", ";", "i", "++", ")", "{", "var", "city", "=", "cities", "[", "i", "]", ";", "result", "+=", "\"<option value=\\\"\"", "+", "city", ".", "id", "+", "\"\\\">\"", "+", "city", ".", "name", "+", "\"</option>\"", ";", "}", "var", "table", "=", "document", ".", "getElementById", "(", "\"city\"", ")", ";", "table", ".", "innerHTML", "=", "result", ";", "}", "}", ")", ";", "}"], "original_docstring": "/**\n * Fills the <code>select</code> of cities getting\n * an ajax get query to the server\n */", "comment": [], "docstring_tokens": ["Fills", "the", "select", "of", "cities", "getting", "an", "ajax", "get", "query", "to", "the", "server"], "docstring": "Fills the select of cities getting\nan ajax get query to the server", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "param", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Fills the <code>select</code> of cities getting\n an ajax get query to the server", "short_docstring_tokens": ["Fills", "the", "<code", ">", "select<", "/", "code", ">", "of", "cities", "getting", "an", "ajax", "get", "query", "to", "the", "server"], "original_string": "function fillCities(param) {\n    $.ajax({\n        url: './jsonCity',\n        method: 'GET',\n        data: \"countryId=\" + param,\n        complete: function(data) {\n            var result = \"\";\n            var cities = JSON.parse(data.responseText);\n            for (var i = 0; i < cities.length; i++) {\n                var city = cities[i];\n                result +=\n                    \"<option value=\\\"\" + city.id + \"\\\">\" + city.name + \"</option>\";\n            }\n            var table = document.getElementById(\"city\");\n            table.innerHTML = result;\n        }\n    });\n}", "id": "c525820a373f55a53a3c1edeb4001b69c669a7277afb098c9238b664aa2fbeee"}
{"identifier": "buildNode", "parameters": {"$node": null, "$appendTo": null, "level": null, "opts": null}, "return_type": null, "repo": "dinamic/cmfOrchestra", "path": "web/bundles/piappadmin/js/orgchart/js/jquery.jOrgChart.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "e5e42b4660d7421fd9eaa04af5a0f722216a1885", "ext": "js", "size": 8057, "code": "function buildNode($node, $appendTo, level, opts) {\n    var $table = $(\"<table cellpadding='0' cellspacing='0' border='0'/>\");\n    var $tbody = $(\"<tbody/>\");\n    var $nodeRow = $(\"<tr/>\").addClass(\"node-cells\");\n    var $nodeCell = $(\"<td/>\").addClass(\"node-cell\").attr(\"colspan\", 2);\n    var $childNodes = $node.children(\"ul:first\").children(\"li\");\n    var $nodeDiv;\n    if($childNodes.length > 1) {\n      $nodeCell.attr(\"colspan\", $childNodes.length * 2);\n    }\n\tvar $nodeContent = $node.clone()\n\t\t\t\t\t\t\t.children(\"ul,li\")\n\t\t\t\t\t\t\t.remove()\n\t\t\t\t\t\t.end()\n\t\t\t\t\t\t.html();\n    var new_node_id = $node.attr(\"id\");\n    if (typeof new_node_id !== 'undefined' && new_node_id !== false) {\n        $nodeDiv = $(\"<div>\").addClass(\"node\").attr(\"id\", $node.attr(\"id\")).append($nodeContent);\n    }else{\n        $nodeDiv = $(\"<div>\").addClass(\"node\").append($nodeContent);\n    }\n    if ($childNodes.length > 0) {\n      $nodeDiv.click(function() {\n         var $this = $(this);\n         var $tr = $this.closest(\"tr\");\n         $tr.nextAll(\"tr\").fadeToggle(\"fast\");\n         if($tr.hasClass('contracted')){\n           $this.css('cursor','n-resize');\n           $tr.removeClass('contracted');\n           $tr.addClass('expanded');\n         }else{\n           $this.css('cursor','s-resize');\n           $tr.removeClass('expanded');\n           $tr.addClass('contracted');\n         }\n      });\n    }\n    $nodeCell.append($nodeDiv);\n    $nodeRow.append($nodeCell);\n    $tbody.append($nodeRow);\n    if($childNodes.length > 0) {\n\t  $nodeDiv.css('cursor','n-resize').addClass('expanded');\n      if(opts.depth == -1 || (level+1 < opts.depth)) { \n        var $downLineRow = $(\"<tr/>\");\n        var $downLineCell = $(\"<td/>\").attr(\"colspan\", $childNodes.length*2);\n        $downLineRow.append($downLineCell);\n\t\t$downLine = $(\"<div></div>\").addClass(\"line down\");\n\t\t$downLineCell.append($downLine);\n        $tbody.append($downLineRow);\n        var $linesRow = $(\"<tr/>\");\n        $childNodes.each(function() {\n          var $left = $(\"<td>&nbsp;</td>\").addClass(\"line left top\");\n          var $right = $(\"<td>&nbsp;</td>\").addClass(\"line right top\");\n          $linesRow.append($left).append($right);\n        });\n        $linesRow.find(\"td:first\")\n\t\t\t\t\t.removeClass(\"top\")\n\t\t\t\t .end()\n\t\t\t\t .find(\"td:last\")\n\t\t\t\t\t.removeClass(\"top\");\n        $tbody.append($linesRow);\n        var $childNodesRow = $(\"<tr/>\");\n        $childNodes.each(function() {\n           var $td = $(\"<td class='node-container'/>\");\n           $td.attr(\"colspan\", 2);\n           buildNode($(this), $td, level+1, opts);\n           $childNodesRow.append($td);\n        });\n      }\n      $tbody.append($childNodesRow);\n    }\n    if ($node.attr('class') != undefined) {\n        var classList = $node.attr('class').split(/\\s+/);\n        $.each(classList, function(index,item) {\n            if (item == 'collapsed') {\n                $nodeRow.nextAll('tr').css('display', 'none');\n                $nodeRow.removeClass('expanded');\n                $nodeRow.addClass('contracted');\n                $nodeDiv.css('cursor','s-resize');\n            } else {\n                $nodeDiv.addClass(item);\n            }\n        });\n    }\n    $table.append($tbody);\n    $appendTo.append($table);\n  }", "code_tokens": ["function", "buildNode", "(", "$node", ",", "$appendTo", ",", "level", ",", "opts", ")", "{", "var", "$table", "=", "$", "(", "\"<table cellpadding='0' cellspacing='0' border='0'/>\"", ")", ";", "var", "$tbody", "=", "$", "(", "\"<tbody/>\"", ")", ";", "var", "$nodeRow", "=", "$", "(", "\"<tr/>\"", ")", ".", "addClass", "(", "\"node-cells\"", ")", ";", "var", "$nodeCell", "=", "$", "(", "\"<td/>\"", ")", ".", "addClass", "(", "\"node-cell\"", ")", ".", "attr", "(", "\"colspan\"", ",", "2", ")", ";", "var", "$childNodes", "=", "$node", ".", "children", "(", "\"ul:first\"", ")", ".", "children", "(", "\"li\"", ")", ";", "var", "$nodeDiv", ";", "if", "(", "$childNodes", ".", "length", ">", "1", ")", "{", "$nodeCell", ".", "attr", "(", "\"colspan\"", ",", "$childNodes", ".", "length", "*", "2", ")", ";", "}", "var", "$nodeContent", "=", "$node", ".", "clone", "(", ")", ".", "children", "(", "\"ul,li\"", ")", ".", "remove", "(", ")", ".", "end", "(", ")", ".", "html", "(", ")", ";", "var", "new_node_id", "=", "$node", ".", "attr", "(", "\"id\"", ")", ";", "if", "(", "typeof", "new_node_id", "!==", "'undefined'", "&&", "new_node_id", "!==", "false", ")", "{", "$nodeDiv", "=", "$", "(", "\"<div>\"", ")", ".", "addClass", "(", "\"node\"", ")", ".", "attr", "(", "\"id\"", ",", "$node", ".", "attr", "(", "\"id\"", ")", ")", ".", "append", "(", "$nodeContent", ")", ";", "}", "else", "{", "$nodeDiv", "=", "$", "(", "\"<div>\"", ")", ".", "addClass", "(", "\"node\"", ")", ".", "append", "(", "$nodeContent", ")", ";", "}", "if", "(", "$childNodes", ".", "length", ">", "0", ")", "{", "$nodeDiv", ".", "click", "(", "function", "(", ")", "{", "var", "$this", "=", "$", "(", "this", ")", ";", "var", "$tr", "=", "$this", ".", "closest", "(", "\"tr\"", ")", ";", "$tr", ".", "nextAll", "(", "\"tr\"", ")", ".", "fadeToggle", "(", "\"fast\"", ")", ";", "if", "(", "$tr", ".", "hasClass", "(", "'contracted'", ")", ")", "{", "$this", ".", "css", "(", "'cursor'", ",", "'n-resize'", ")", ";", "$tr", ".", "removeClass", "(", "'contracted'", ")", ";", "$tr", ".", "addClass", "(", "'expanded'", ")", ";", "}", "else", "{", "$this", ".", "css", "(", "'cursor'", ",", "'s-resize'", ")", ";", "$tr", ".", "removeClass", "(", "'expanded'", ")", ";", "$tr", ".", "addClass", "(", "'contracted'", ")", ";", "}", "}", ")", ";", "}", "$nodeCell", ".", "append", "(", "$nodeDiv", ")", ";", "$nodeRow", ".", "append", "(", "$nodeCell", ")", ";", "$tbody", ".", "append", "(", "$nodeRow", ")", ";", "if", "(", "$childNodes", ".", "length", ">", "0", ")", "{", "$nodeDiv", ".", "css", "(", "'cursor'", ",", "'n-resize'", ")", ".", "addClass", "(", "'expanded'", ")", ";", "if", "(", "opts", ".", "depth", "==", "-", "1", "||", "(", "level", "+", "1", "<", "opts", ".", "depth", ")", ")", "{", "var", "$downLineRow", "=", "$", "(", "\"<tr/>\"", ")", ";", "var", "$downLineCell", "=", "$", "(", "\"<td/>\"", ")", ".", "attr", "(", "\"colspan\"", ",", "$childNodes", ".", "length", "*", "2", ")", ";", "$downLineRow", ".", "append", "(", "$downLineCell", ")", ";", "$downLine", "=", "$", "(", "\"<div></div>\"", ")", ".", "addClass", "(", "\"line down\"", ")", ";", "$downLineCell", ".", "append", "(", "$downLine", ")", ";", "$tbody", ".", "append", "(", "$downLineRow", ")", ";", "var", "$linesRow", "=", "$", "(", "\"<tr/>\"", ")", ";", "$childNodes", ".", "each", "(", "function", "(", ")", "{", "var", "$left", "=", "$", "(", "\"<td>&nbsp;</td>\"", ")", ".", "addClass", "(", "\"line left top\"", ")", ";", "var", "$right", "=", "$", "(", "\"<td>&nbsp;</td>\"", ")", ".", "addClass", "(", "\"line right top\"", ")", ";", "$linesRow", ".", "append", "(", "$left", ")", ".", "append", "(", "$right", ")", ";", "}", ")", ";", "$linesRow", ".", "find", "(", "\"td:first\"", ")", ".", "removeClass", "(", "\"top\"", ")", ".", "end", "(", ")", ".", "find", "(", "\"td:last\"", ")", ".", "removeClass", "(", "\"top\"", ")", ";", "$tbody", ".", "append", "(", "$linesRow", ")", ";", "var", "$childNodesRow", "=", "$", "(", "\"<tr/>\"", ")", ";", "$childNodes", ".", "each", "(", "function", "(", ")", "{", "var", "$td", "=", "$", "(", "\"<td class='node-container'/>\"", ")", ";", "$td", ".", "attr", "(", "\"colspan\"", ",", "2", ")", ";", "buildNode", "(", "$", "(", "this", ")", ",", "$td", ",", "level", "+", "1", ",", "opts", ")", ";", "$childNodesRow", ".", "append", "(", "$td", ")", ";", "}", ")", ";", "}", "$tbody", ".", "append", "(", "$childNodesRow", ")", ";", "}", "if", "(", "$node", ".", "attr", "(", "'class'", ")", "!=", "undefined", ")", "{", "var", "classList", "=", "$node", ".", "attr", "(", "'class'", ")", ".", "split", "(", "/", "\\s+", "/", ")", ";", "$", ".", "each", "(", "classList", ",", "function", "(", "index", ",", "item", ")", "{", "if", "(", "item", "==", "'collapsed'", ")", "{", "$nodeRow", ".", "nextAll", "(", "'tr'", ")", ".", "css", "(", "'display'", ",", "'none'", ")", ";", "$nodeRow", ".", "removeClass", "(", "'expanded'", ")", ";", "$nodeRow", ".", "addClass", "(", "'contracted'", ")", ";", "$nodeDiv", ".", "css", "(", "'cursor'", ",", "'s-resize'", ")", ";", "}", "else", "{", "$nodeDiv", ".", "addClass", "(", "item", ")", ";", "}", "}", ")", ";", "}", "$table", ".", "append", "(", "$tbody", ")", ";", "$appendTo", ".", "append", "(", "$table", ")", ";", "}"], "original_docstring": "// Method that recursively builds the tree", "comment": ["// Construct the node container(s)", "// Draw the node", "// Get the contents - any markup except li and ul allowed", "// Expand and contract nodes", "// if it can be expanded then change the cursor", "// recurse until leaves found (-1) or to the level specified", "// draw the connecting line from the parent node to the horizontal line ", "// Draw the horizontal lines", "// horizontal line shouldn't extend beyond the first and last child branches", "// recurse through children lists and items", "// any classes on the LI element get copied to the relevant node in the tree", "// apart from the special 'collapsed' class, which collapses the sub-tree at this point", "/* Prevent trees collapsing if a link inside a node is clicked \n    $nodeDiv.children('a').click(function(e){\n        console.log(e);\n        e.stopPropagation();\n    });\n    */"], "docstring_tokens": ["Method", "that", "recursively", "builds", "the", "tree"], "docstring": "Method that recursively builds the tree", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "$node", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "$appendTo", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "level", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "opts", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Method that recursively builds the tree", "short_docstring_tokens": ["Method", "that", "recursively", "builds", "the", "tree"], "original_string": "function buildNode($node, $appendTo, level, opts) {\n\t\n    var $table = $(\"<table cellpadding='0' cellspacing='0' border='0'/>\");\n    var $tbody = $(\"<tbody/>\");\n\n\t// Construct the node container(s)\n    var $nodeRow = $(\"<tr/>\").addClass(\"node-cells\");\n    var $nodeCell = $(\"<td/>\").addClass(\"node-cell\").attr(\"colspan\", 2);\n    var $childNodes = $node.children(\"ul:first\").children(\"li\");\n    var $nodeDiv;\n\t\n    if($childNodes.length > 1) {\n      $nodeCell.attr(\"colspan\", $childNodes.length * 2);\n    }\n\t// Draw the node\n\t// Get the contents - any markup except li and ul allowed\n\tvar $nodeContent = $node.clone()\n\t\t\t\t\t\t\t.children(\"ul,li\")\n\t\t\t\t\t\t\t.remove()\n\t\t\t\t\t\t.end()\n\t\t\t\t\t\t.html();\n\t\t\t\t\t\t\n    var new_node_id = $node.attr(\"id\");\n    if (typeof new_node_id !== 'undefined' && new_node_id !== false) {\n        $nodeDiv = $(\"<div>\").addClass(\"node\").attr(\"id\", $node.attr(\"id\")).append($nodeContent);\n    }else{\n        $nodeDiv = $(\"<div>\").addClass(\"node\").append($nodeContent);\n    }\n\n\t// Expand and contract nodes\n    if ($childNodes.length > 0) {\n      $nodeDiv.click(function() {\n         var $this = $(this);\n         var $tr = $this.closest(\"tr\");\n         $tr.nextAll(\"tr\").fadeToggle(\"fast\");\n\n         if($tr.hasClass('contracted')){\n           $this.css('cursor','n-resize');\n           $tr.removeClass('contracted');\n           $tr.addClass('expanded');\n         }else{\n           $this.css('cursor','s-resize');\n           $tr.removeClass('expanded');\n           $tr.addClass('contracted');\n         }\n      });\n    }\n\t\n    $nodeCell.append($nodeDiv);\n    $nodeRow.append($nodeCell);\n    $tbody.append($nodeRow);\n\n    if($childNodes.length > 0) {\n\t  // if it can be expanded then change the cursor\n\t  $nodeDiv.css('cursor','n-resize').addClass('expanded');\n\t\n\t  // recurse until leaves found (-1) or to the level specified\n      if(opts.depth == -1 || (level+1 < opts.depth)) { \n        var $downLineRow = $(\"<tr/>\");\n        var $downLineCell = $(\"<td/>\").attr(\"colspan\", $childNodes.length*2);\n        $downLineRow.append($downLineCell);\n        \n\t\t// draw the connecting line from the parent node to the horizontal line \n\t\t$downLine = $(\"<div></div>\").addClass(\"line down\");\n\t\t$downLineCell.append($downLine);\n        $tbody.append($downLineRow);\n\n        // Draw the horizontal lines\n        var $linesRow = $(\"<tr/>\");\n        $childNodes.each(function() {\n          var $left = $(\"<td>&nbsp;</td>\").addClass(\"line left top\");\n          var $right = $(\"<td>&nbsp;</td>\").addClass(\"line right top\");\n          $linesRow.append($left).append($right);\n        });\n\n\t\t// horizontal line shouldn't extend beyond the first and last child branches\n        $linesRow.find(\"td:first\")\n\t\t\t\t\t.removeClass(\"top\")\n\t\t\t\t .end()\n\t\t\t\t .find(\"td:last\")\n\t\t\t\t\t.removeClass(\"top\");\n\n        $tbody.append($linesRow);\n        var $childNodesRow = $(\"<tr/>\");\n        $childNodes.each(function() {\n           var $td = $(\"<td class='node-container'/>\");\n           $td.attr(\"colspan\", 2);\n\t\t   // recurse through children lists and items\n           buildNode($(this), $td, level+1, opts);\n           $childNodesRow.append($td);\n        });\n\n      }\n      $tbody.append($childNodesRow);\n    }\n\n    // any classes on the LI element get copied to the relevant node in the tree\n    // apart from the special 'collapsed' class, which collapses the sub-tree at this point\n    if ($node.attr('class') != undefined) {\n        var classList = $node.attr('class').split(/\\s+/);\n        $.each(classList, function(index,item) {\n            if (item == 'collapsed') {\n                $nodeRow.nextAll('tr').css('display', 'none');\n                $nodeRow.removeClass('expanded');\n                $nodeRow.addClass('contracted');\n                $nodeDiv.css('cursor','s-resize');\n            } else {\n                $nodeDiv.addClass(item);\n            }\n        });\n    }\n\n    $table.append($tbody);\n    $appendTo.append($table);\n    \n    /* Prevent trees collapsing if a link inside a node is clicked \n    $nodeDiv.children('a').click(function(e){\n        console.log(e);\n        e.stopPropagation();\n    });\n    */\n    \n  }", "id": "b0603908aeae3cd5f2f021ede336b5d15370c185ae346ebe79d69a10d427ea6a"}
{"identifier": "run", "parameters": {"data": null}, "return_type": "<not_specific>", "repo": "tormozz48/2do2go.ru", "path": "src/task1/transformers/base.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "781c6050e65588cf46377f98d2dece365bf4a5de", "ext": "js", "size": 1699, "code": "run(data) {\n        debug(`run transformer: ${this.constructor.name}`);\n        data = this.transform(data);\n        return this._next ? this._next.run(data) : data;\n    }", "code_tokens": ["run", "(", "data", ")", "{", "debug", "(", "`", "${", "this", ".", "constructor", ".", "name", "}", "`", ")", ";", "data", "=", "this", ".", "transform", "(", "data", ")", ";", "return", "this", ".", "_next", "?", "this", ".", "_next", ".", "run", "(", "data", ")", ":", "data", ";", "}"], "original_docstring": "/**\n     * Executes tranformer with given data\n     * @param {any} data \n     * @returns \n     * @memberof BaseTransformer\n     */", "comment": [], "docstring_tokens": ["Executes", "tranformer", "with", "given", "data", "@param", "{", "any", "}", "data", "@returns", "@memberof", "BaseTransformer"], "docstring": "Executes tranformer with given data\n@param {any} data\n@returns\n@memberof BaseTransformer", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "data", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Executes tranformer with given data\n @param {any} data\n @returns\n @memberof BaseTransformer", "short_docstring_tokens": ["Executes", "tranformer", "with", "given", "data", "@param", "{", "any", "}", "data", "@returns", "@memberof", "BaseTransformer"], "original_string": "run(data) {\n        debug(`run transformer: ${this.constructor.name}`);\n\n        data = this.transform(data);\n        return this._next ? this._next.run(data) : data;\n    }", "id": "365bead71c5d65aa993c8a992f2b41cca622fd1125065bb70fae6038d69d508c"}
{"identifier": "next", "parameters": {"transformer": null}, "return_type": "<not_specific>", "repo": "tormozz48/2do2go.ru", "path": "src/task1/transformers/base.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "781c6050e65588cf46377f98d2dece365bf4a5de", "ext": "js", "size": 1699, "code": "next(transformer) {\n        debug(`${this.constructor.name} set next ${transformer.constructor.name}`);\n        this._lastInStack \n            ? this._lastInStack.next(transformer)\n            : this._next = transformer;\n        this._lastInStack = transformer;\n        return this;\n    }", "code_tokens": ["next", "(", "transformer", ")", "{", "debug", "(", "`", "${", "this", ".", "constructor", ".", "name", "}", "${", "transformer", ".", "constructor", ".", "name", "}", "`", ")", ";", "this", ".", "_lastInStack", "?", "this", ".", "_lastInStack", ".", "next", "(", "transformer", ")", ":", "this", ".", "_next", "=", "transformer", ";", "this", ".", "_lastInStack", "=", "transformer", ";", "return", "this", ";", "}"], "original_docstring": "/**\n     * Sets transformer which should be executed next\n     * @param {BaseTransformer} transformer \n     * @returns\n     * @memberof BaseTransformer\n     */", "comment": [], "docstring_tokens": ["Sets", "transformer", "which", "should", "be", "executed", "next", "@param", "{", "BaseTransformer", "}", "transformer", "@returns", "@memberof", "BaseTransformer"], "docstring": "Sets transformer which should be executed next\n@param {BaseTransformer} transformer\n@returns\n@memberof BaseTransformer", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "transformer", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Sets transformer which should be executed next\n @param {BaseTransformer} transformer\n @returns\n @memberof BaseTransformer", "short_docstring_tokens": ["Sets", "transformer", "which", "should", "be", "executed", "next", "@param", "{", "BaseTransformer", "}", "transformer", "@returns", "@memberof", "BaseTransformer"], "original_string": "next(transformer) {\n        debug(`${this.constructor.name} set next ${transformer.constructor.name}`);\n\n        this._lastInStack \n            ? this._lastInStack.next(transformer)\n            : this._next = transformer;\n\n        this._lastInStack = transformer;\n\n        return this;\n    }", "id": "5483bcadf0839046b8c4cdc3285f71e9b98cefacaa1831a5ea1746f3269f2e78"}
{"identifier": "validator", "parameters": {"allRules": null}, "return_type": "<not_specific>", "repo": "OntimeLengo/ontime-layout", "path": "src/libs/validate/libs/validator.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "e8d9db1ccc2c086af7e6546f01aa4ae0655e2f74", "ext": "js", "size": 1808, "code": "function validator(allRules = {}) {\n  const allRulesKeys = Object.keys(allRules);\n  return async function(data = {}, onlyOne) {\n    const errors = {};\n    let keys;\n    if (onlyOne) {\n      if (allRules[onlyOne]) {\n        keys = [onlyOne];\n      } else {\n        return true;\n      }\n    } else {\n      keys = allRulesKeys;\n    }\n    for (let i = 0; keys[i]; i++) {\n      const name = keys[i];\n      const rules = allRules[name];\n      const value = data[name];\n      const rulesKeys = Object.keys(rules);\n      for (let k = 0; rulesKeys[k]; k++) {\n        const ruleName = rulesKeys[k];\n        const rule = rules[ruleName];\n        let fn;\n        if (typeof rule === 'function') {\n          fn = rule;\n        } else if (validators[ruleName]) {\n          fn = validators[ruleName];\n        } else {\n          break;\n        }\n        if (ruleName === 'confirm') {\n          try {\n            await fn(value, data[rule], data);\n          } catch (err) {\n            (!errors[name]) && (errors[name] = []);\n            errors[name].push(err);\n          }\n        } else if (typeof rule === 'function') {\n          try {\n            await fn(value, data);\n          } catch (err) {\n            (!errors[name]) && (errors[name] = []);\n            errors[name].push(err);\n          }\n        } else {\n          try {\n            await fn(value, rule, data);\n          } catch (err) {\n            (!errors[name]) && (errors[name] = []);\n            errors[name].push(err);\n          }\n        }\n      }\n    }\n    if (Object.keys(errors).length === 0) {\n      return true;\n    } else {\n      throw errors;\n    }\n  }\n}", "code_tokens": ["function", "validator", "(", "allRules", "=", "{", "}", ")", "{", "const", "allRulesKeys", "=", "Object", ".", "keys", "(", "allRules", ")", ";", "return", "async", "function", "(", "data", "=", "{", "}", ",", "onlyOne", ")", "{", "const", "errors", "=", "{", "}", ";", "let", "keys", ";", "if", "(", "onlyOne", ")", "{", "if", "(", "allRules", "[", "onlyOne", "]", ")", "{", "keys", "=", "[", "onlyOne", "]", ";", "}", "else", "{", "return", "true", ";", "}", "}", "else", "{", "keys", "=", "allRulesKeys", ";", "}", "for", "(", "let", "i", "=", "0", ";", "keys", "[", "i", "]", ";", "i", "++", ")", "{", "const", "name", "=", "keys", "[", "i", "]", ";", "const", "rules", "=", "allRules", "[", "name", "]", ";", "const", "value", "=", "data", "[", "name", "]", ";", "const", "rulesKeys", "=", "Object", ".", "keys", "(", "rules", ")", ";", "for", "(", "let", "k", "=", "0", ";", "rulesKeys", "[", "k", "]", ";", "k", "++", ")", "{", "const", "ruleName", "=", "rulesKeys", "[", "k", "]", ";", "const", "rule", "=", "rules", "[", "ruleName", "]", ";", "let", "fn", ";", "if", "(", "typeof", "rule", "===", "'function'", ")", "{", "fn", "=", "rule", ";", "}", "else", "if", "(", "validators", "[", "ruleName", "]", ")", "{", "fn", "=", "validators", "[", "ruleName", "]", ";", "}", "else", "{", "break", ";", "}", "if", "(", "ruleName", "===", "'confirm'", ")", "{", "try", "{", "await", "fn", "(", "value", ",", "data", "[", "rule", "]", ",", "data", ")", ";", "}", "catch", "(", "err", ")", "{", "(", "!", "errors", "[", "name", "]", ")", "&&", "(", "errors", "[", "name", "]", "=", "[", "]", ")", ";", "errors", "[", "name", "]", ".", "push", "(", "err", ")", ";", "}", "}", "else", "if", "(", "typeof", "rule", "===", "'function'", ")", "{", "try", "{", "await", "fn", "(", "value", ",", "data", ")", ";", "}", "catch", "(", "err", ")", "{", "(", "!", "errors", "[", "name", "]", ")", "&&", "(", "errors", "[", "name", "]", "=", "[", "]", ")", ";", "errors", "[", "name", "]", ".", "push", "(", "err", ")", ";", "}", "}", "else", "{", "try", "{", "await", "fn", "(", "value", ",", "rule", ",", "data", ")", ";", "}", "catch", "(", "err", ")", "{", "(", "!", "errors", "[", "name", "]", ")", "&&", "(", "errors", "[", "name", "]", "=", "[", "]", ")", ";", "errors", "[", "name", "]", ".", "push", "(", "err", ")", ";", "}", "}", "}", "}", "if", "(", "Object", ".", "keys", "(", "errors", ")", ".", "length", "===", "0", ")", "{", "return", "true", ";", "}", "else", "{", "throw", "errors", ";", "}", "}", "}"], "original_docstring": "/**\n * validator\n *\n * @author Olena Gotowska\n * @description Use for validate values\n */", "comment": [], "docstring_tokens": ["validator", "@author", "Olena", "Gotowska", "@description", "Use", "for", "validate", "values"], "docstring": "validator\n@author Olena Gotowska\n@description Use for validate values", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "allRules", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "validator\n @author Olena Gotowska\n @description Use for validate values", "short_docstring_tokens": ["validator", "@author", "Olena", "Gotowska", "@description", "Use", "for", "validate", "values"], "original_string": "function validator(allRules = {}) {\n  const allRulesKeys = Object.keys(allRules);\n\n  return async function(data = {}, onlyOne) {\n    const errors = {};\n\n    let keys;\n\n    if (onlyOne) {\n      if (allRules[onlyOne]) {\n        keys = [onlyOne];\n      } else {\n        return true;\n      }\n    } else {\n      keys = allRulesKeys;\n    }\n\n    for (let i = 0; keys[i]; i++) {\n      const name = keys[i];\n      const rules = allRules[name];\n      const value = data[name];\n      const rulesKeys = Object.keys(rules);\n\n      for (let k = 0; rulesKeys[k]; k++) {\n        const ruleName = rulesKeys[k];\n        const rule = rules[ruleName];\n\n        let fn;\n\n        if (typeof rule === 'function') {\n          fn = rule;\n        } else if (validators[ruleName]) {\n          fn = validators[ruleName];\n        } else {\n          break;\n        }\n\n        if (ruleName === 'confirm') {\n          try {\n            await fn(value, data[rule], data);\n          } catch (err) {\n            (!errors[name]) && (errors[name] = []);\n            \n            errors[name].push(err);\n          }\n        } else if (typeof rule === 'function') {\n          try {\n            await fn(value, data);\n          } catch (err) {\n            (!errors[name]) && (errors[name] = []);\n            \n            errors[name].push(err);\n          }\n        } else {\n          try {\n            await fn(value, rule, data);\n          } catch (err) {\n            (!errors[name]) && (errors[name] = []);\n            \n            errors[name].push(err);\n          }\n        }\n      }\n    }\n\n    if (Object.keys(errors).length === 0) {\n      return true;\n    } else {\n      throw errors;\n    }\n  }\n}", "id": "dc63616bef15fe5a5d56efe2b6f69bd9dd35057394d89f3293a872ab4f93a580"}
{"identifier": "brushed", "parameters": {}, "return_type": "<not_specific>", "repo": "QLightman/ChinaVis2018", "path": "javascripts/draw_view5.js", "language": "JavaScript", "stars_count": 6.0, "issues_count": NaN, "forks_count": 2.0, "license": ["MIT"], "hexsha": "6823675a06269b9b34e08ac0a15d01e708e0a364", "ext": "js", "size": 10130, "code": "function brushed() {\n            if (d3.event.sourceEvent && d3.event.sourceEvent.type === \"zoom\") return; \n            var s = d3.event.selection || x2.range();\n            x.domain(s.map(x2.invert, x2));\n            var result = self.get_time_domain(x.domain());\n            self.time_text\n                .text(\"Time duraction: \" + result[0] + \"----\" + result[1]);\n            focus.selectAll(\".message\")\n                .attr(\"x\", function(d) {\n                    return x(d.day);\n                })\n                .attr(\"y\", function(d) {\n                    return y(d.count);\n                })\n            focus.select(\".x-axis\").call(xAxis);\n            self.view.select(\".zoom\").call(zoom.transform, d3.zoomIdentity\n                .scale(self.width / (s[1] - s[0]))\n                .translate(-s[0], 0));\n        }", "code_tokens": ["function", "brushed", "(", ")", "{", "if", "(", "d3", ".", "event", ".", "sourceEvent", "&&", "d3", ".", "event", ".", "sourceEvent", ".", "type", "===", "\"zoom\"", ")", "return", ";", "var", "s", "=", "d3", ".", "event", ".", "selection", "||", "x2", ".", "range", "(", ")", ";", "x", ".", "domain", "(", "s", ".", "map", "(", "x2", ".", "invert", ",", "x2", ")", ")", ";", "var", "result", "=", "self", ".", "get_time_domain", "(", "x", ".", "domain", "(", ")", ")", ";", "self", ".", "time_text", ".", "text", "(", "\"Time duraction: \"", "+", "result", "[", "0", "]", "+", "\"----\"", "+", "result", "[", "1", "]", ")", ";", "focus", ".", "selectAll", "(", "\".message\"", ")", ".", "attr", "(", "\"x\"", ",", "function", "(", "d", ")", "{", "return", "x", "(", "d", ".", "day", ")", ";", "}", ")", ".", "attr", "(", "\"y\"", ",", "function", "(", "d", ")", "{", "return", "y", "(", "d", ".", "count", ")", ";", "}", ")", "focus", ".", "select", "(", "\".x-axis\"", ")", ".", "call", "(", "xAxis", ")", ";", "self", ".", "view", ".", "select", "(", "\".zoom\"", ")", ".", "call", "(", "zoom", ".", "transform", ",", "d3", ".", "zoomIdentity", ".", "scale", "(", "self", ".", "width", "/", "(", "s", "[", "1", "]", "-", "s", "[", "0", "]", ")", ")", ".", "translate", "(", "-", "s", "[", "0", "]", ",", "0", ")", ")", ";", "}"], "original_docstring": "//create brush function redraw scatterplot with selection", "comment": ["// ignore brush-by-zoom"], "docstring_tokens": ["create", "brush", "function", "redraw", "scatterplot", "with", "selection"], "docstring": "create brush function redraw scatterplot with selection", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "create brush function redraw scatterplot with selection", "short_docstring_tokens": ["create", "brush", "function", "redraw", "scatterplot", "with", "selection"], "original_string": "function brushed() {\n            if (d3.event.sourceEvent && d3.event.sourceEvent.type === \"zoom\") return; // ignore brush-by-zoom\n            var s = d3.event.selection || x2.range();\n            x.domain(s.map(x2.invert, x2));\n            var result = self.get_time_domain(x.domain());\n            self.time_text\n                .text(\"Time duraction: \" + result[0] + \"----\" + result[1]);\n            focus.selectAll(\".message\")\n                .attr(\"x\", function(d) {\n                    return x(d.day);\n                })\n                .attr(\"y\", function(d) {\n                    return y(d.count);\n                })\n            focus.select(\".x-axis\").call(xAxis);\n            self.view.select(\".zoom\").call(zoom.transform, d3.zoomIdentity\n                .scale(self.width / (s[1] - s[0]))\n                .translate(-s[0], 0));\n        }", "id": "7df8febca50c60af1bb094f59f68c7eab8e28ddf15f25757e759d22b96f4e3f6"}
{"identifier": "_displayAccount", "parameters": {}, "return_type": null, "repo": "electricimp/impTest", "path": "src/lib/Commands/InitCommand.js", "language": "JavaScript", "stars_count": 2.0, "issues_count": 38.0, "forks_count": 4.0, "license": ["MIT"], "hexsha": "30f73f187430a1958a75d2fbd8bb0d45a1a8f2c5", "ext": "js", "size": 13006, "code": "_displayAccount() {\n    const table = new CliTable({\n      head: [\n        c.blue('Device ID'),\n        c.blue('Device Name'),\n        c.blue('Model ID'),\n        c.blue('Model Name'),\n        c.blue('State')\n      ]\n    });\n    for (const modelId in this._models) {\n      for (const deviceId of  this._models[modelId].devices) {\n        table.push([\n          deviceId                     || \"\",\n          this._devices[deviceId].name || \"\",\n          this._models[modelId].id     || \"\",\n          this._models[modelId].name   || \"\",\n          this._devices[deviceId].powerstate === 'online'\n            ? c.green(this._devices[deviceId].powerstate)\n            : c.red(this._devices[deviceId].powerstate)\n        ]);\n      }\n    }\n    this._info(table.toString());\n  }", "code_tokens": ["_displayAccount", "(", ")", "{", "const", "table", "=", "new", "CliTable", "(", "{", "head", ":", "[", "c", ".", "blue", "(", "'Device ID'", ")", ",", "c", ".", "blue", "(", "'Device Name'", ")", ",", "c", ".", "blue", "(", "'Model ID'", ")", ",", "c", ".", "blue", "(", "'Model Name'", ")", ",", "c", ".", "blue", "(", "'State'", ")", "]", "}", ")", ";", "for", "(", "const", "modelId", "in", "this", ".", "_models", ")", "{", "for", "(", "const", "deviceId", "of", "this", ".", "_models", "[", "modelId", "]", ".", "devices", ")", "{", "table", ".", "push", "(", "[", "deviceId", "||", "\"\"", ",", "this", ".", "_devices", "[", "deviceId", "]", ".", "name", "||", "\"\"", ",", "this", ".", "_models", "[", "modelId", "]", ".", "id", "||", "\"\"", ",", "this", ".", "_models", "[", "modelId", "]", ".", "name", "||", "\"\"", ",", "this", ".", "_devices", "[", "deviceId", "]", ".", "powerstate", "===", "'online'", "?", "c", ".", "green", "(", "this", ".", "_devices", "[", "deviceId", "]", ".", "powerstate", ")", ":", "c", ".", "red", "(", "this", ".", "_devices", "[", "deviceId", "]", ".", "powerstate", ")", "]", ")", ";", "}", "}", "this", ".", "_info", "(", "table", ".", "toString", "(", ")", ")", ";", "}"], "original_docstring": "/**\n   * Display account devices/models\n   * @private\n   */", "comment": [], "docstring_tokens": ["Display", "account", "devices", "/", "models", "@private"], "docstring": "Display account devices/models\n@private", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Display account devices/models\n @private", "short_docstring_tokens": ["Display", "account", "devices", "/", "models", "@private"], "original_string": "_displayAccount() {\n    const table = new CliTable({\n      head: [\n        c.blue('Device ID'),\n        c.blue('Device Name'),\n        c.blue('Model ID'),\n        c.blue('Model Name'),\n        c.blue('State')\n      ]\n    });\n\n    for (const modelId in this._models) {\n      for (const deviceId of  this._models[modelId].devices) {\n        table.push([\n          deviceId                     || \"\",\n          this._devices[deviceId].name || \"\",\n          this._models[modelId].id     || \"\",\n          this._models[modelId].name   || \"\",\n          this._devices[deviceId].powerstate === 'online'\n            ? c.green(this._devices[deviceId].powerstate)\n            : c.red(this._devices[deviceId].powerstate)\n        ]);\n      }\n    }\n\n    this._info(table.toString());\n  }", "id": "feb42817002ae2453d788a9c61de481f628f296bc558f176ca63329fa97e53ef"}
{"identifier": "convertToPids", "parameters": {"tickers": null, "securities": null}, "return_type": "<not_specific>", "repo": "crosal-research/realtime_quotes", "path": "src/helpers.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "acdce7ed4296c9d30779161dcb3b3d501649ad24", "ext": "js", "size": 1044, "code": "function convertToPids(tickers, securities) {\n     let pids = []\n    securities.forEach(s => {\n        if (tickers.includes(s.ticker)){\n            pids.push(s.pid)\n        }\n    })\n    return pids\n}", "code_tokens": ["function", "convertToPids", "(", "tickers", ",", "securities", ")", "{", "let", "pids", "=", "[", "]", "securities", ".", "forEach", "(", "s", "=>", "{", "if", "(", "tickers", ".", "includes", "(", "s", ".", "ticker", ")", ")", "{", "pids", ".", "push", "(", "s", ".", "pid", ")", "}", "}", ")", "return", "pids", "}"], "original_docstring": "/**\n * converts from human readtalbe ticker to pids\n * @param {Array} tickers - ticker in human readable notation\n * @param {Array} securites - Objets where pids are keys\n * @return {Array} \n */", "comment": [], "docstring_tokens": ["converts", "from", "human", "readtalbe", "ticker", "to", "pids", "@param", "{", "Array", "}", "tickers", "-", "ticker", "in", "human", "readable", "notation", "@param", "{", "Array", "}", "securites", "-", "Objets", "where", "pids", "are", "keys", "@return", "{", "Array", "}"], "docstring": "converts from human readtalbe ticker to pids\n@param {Array} tickers - ticker in human readable notation\n@param {Array} securites - Objets where pids are keys\n@return {Array}", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "tickers", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "securities", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "converts from human readtalbe ticker to pids\n @param {Array} tickers - ticker in human readable notation\n @param {Array} securites - Objets where pids are keys\n @return {Array}", "short_docstring_tokens": ["converts", "from", "human", "readtalbe", "ticker", "to", "pids", "@param", "{", "Array", "}", "tickers", "-", "ticker", "in", "human", "readable", "notation", "@param", "{", "Array", "}", "securites", "-", "Objets", "where", "pids", "are", "keys", "@return", "{", "Array", "}"], "original_string": "function convertToPids(tickers, securities) {\n     let pids = []\n    securities.forEach(s => {\n        if (tickers.includes(s.ticker)){\n            pids.push(s.pid)\n        }\n    })\n    return pids\n}", "id": "e96765f8aac7811638d546ac2253794c064cc1351a3464d0a8fffa28772dc69a"}
{"identifier": "secToDict", "parameters": {"securities": null}, "return_type": "<not_specific>", "repo": "crosal-research/realtime_quotes", "path": "src/helpers.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "acdce7ed4296c9d30779161dcb3b3d501649ad24", "ext": "js", "size": 1044, "code": "function secToDict(securities){\n    let dictSec = {}\n    securities.forEach(s => dictSec[s.pid] = s)\n    return dictSec\n}", "code_tokens": ["function", "secToDict", "(", "securities", ")", "{", "let", "dictSec", "=", "{", "}", "securities", ".", "forEach", "(", "s", "=>", "dictSec", "[", "s", ".", "pid", "]", "=", "s", ")", "return", "dictSec", "}"], "original_docstring": "/**\n * Generates Objet with keys give by pids and values are securites\n * @param {Array} securites - Objets where pids are keys\n * @return {Object} \n */", "comment": [], "docstring_tokens": ["Generates", "Objet", "with", "keys", "give", "by", "pids", "and", "values", "are", "securites", "@param", "{", "Array", "}", "securites", "-", "Objets", "where", "pids", "are", "keys", "@return", "{", "Object", "}"], "docstring": "Generates Objet with keys give by pids and values are securites\n@param {Array} securites - Objets where pids are keys\n@return {Object}", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "securities", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Generates Objet with keys give by pids and values are securites\n @param {Array} securites - Objets where pids are keys\n @return {Object}", "short_docstring_tokens": ["Generates", "Objet", "with", "keys", "give", "by", "pids", "and", "values", "are", "securites", "@param", "{", "Array", "}", "securites", "-", "Objets", "where", "pids", "are", "keys", "@return", "{", "Object", "}"], "original_string": "function secToDict(securities){\n    let dictSec = {}\n    securities.forEach(s => dictSec[s.pid] = s)\n    return dictSec\n}", "id": "7147056198088d37240ab0332eef70e5fd3a17acec54e6b97334c2ac7164380c"}
{"identifier": "initApproveForm", "parameters": {}, "return_type": "<not_specific>", "repo": "ThePrior/Scripts", "path": "ApproveForm.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "25965357e4490637967fc0a006166a44d8cd31a9", "ext": "js", "size": 11573, "code": "function initApproveForm() {\n    var pdfPath = _spPageContextInfo.webServerRelativeUrl + \"PDFs\"\n    if (typeof initApproveForm.counter === 'undefined') {\n        initApproveForm.counter = 0;\n        console.log(\"in initApproveForm: updating hrefs - \" + initApproveForm.counter++);\n        $(\"a[href$='.pdf']\").attr(\"target\", \"_blank\");\n        $(\"a[href$='.pdf']\").click(function () {\n            viewFormPDF($(this).attr(\"href\"));\n            return true;\n        });\n        $(\"img[id^='RejectForm_']\").click(function () {\n            rejectFormNew($(this).data(\"fhuid\"));\n            return true;\n        });\n        $(\"img[id^='ApproveForm_']\").click(function () {\n            approveFormNew($(this).data(\"fhuid\"));\n            return true;\n        });\n        $(\"img[id^='FlagForm_']\").click(function () {\n            flagFormForReviewNew($(this).data(\"fhuid\"));\n            return true;\n        });\n        $(\"a[href$='.txt']\").attr('href', function () { return this.href.replace(\"Forms\", \"PDFs\").replace(\".txt\", \".pdf\"); });\n    }\n}", "code_tokens": ["function", "initApproveForm", "(", ")", "{", "var", "pdfPath", "=", "_spPageContextInfo", ".", "webServerRelativeUrl", "+", "\"PDFs\"", "if", "(", "typeof", "initApproveForm", ".", "counter", "===", "'undefined'", ")", "{", "initApproveForm", ".", "counter", "=", "0", ";", "console", ".", "log", "(", "\"in initApproveForm: updating hrefs - \"", "+", "initApproveForm", ".", "counter", "++", ")", ";", "$", "(", "\"a[href$='.pdf']\"", ")", ".", "attr", "(", "\"target\"", ",", "\"_blank\"", ")", ";", "$", "(", "\"a[href$='.pdf']\"", ")", ".", "click", "(", "function", "(", ")", "{", "viewFormPDF", "(", "$", "(", "this", ")", ".", "attr", "(", "\"href\"", ")", ")", ";", "return", "true", ";", "}", ")", ";", "$", "(", "\"img[id^='RejectForm_']\"", ")", ".", "click", "(", "function", "(", ")", "{", "rejectFormNew", "(", "$", "(", "this", ")", ".", "data", "(", "\"fhuid\"", ")", ")", ";", "return", "true", ";", "}", ")", ";", "$", "(", "\"img[id^='ApproveForm_']\"", ")", ".", "click", "(", "function", "(", ")", "{", "approveFormNew", "(", "$", "(", "this", ")", ".", "data", "(", "\"fhuid\"", ")", ")", ";", "return", "true", ";", "}", ")", ";", "$", "(", "\"img[id^='FlagForm_']\"", ")", ".", "click", "(", "function", "(", ")", "{", "flagFormForReviewNew", "(", "$", "(", "this", ")", ".", "data", "(", "\"fhuid\"", ")", ")", ";", "return", "true", ";", "}", ")", ";", "$", "(", "\"a[href$='.txt']\"", ")", ".", "attr", "(", "'href'", ",", "function", "(", ")", "{", "return", "this", ".", "href", ".", "replace", "(", "\"Forms\"", ",", "\"PDFs\"", ")", ".", "replace", "(", "\".txt\"", ",", "\".pdf\"", ")", ";", "}", ")", ";", "}", "}"], "original_docstring": "//TODO: maybe better to use a button. This href has some weird behaviour.\r", "comment": ["//alert(_spPageContextInfo.webServerRelativeUrl);\r", "//$(\"ms-cellstyle ms-vb2\").find(); //TODO: restrict the query.\r", "//Flag to ensure only called once per page load.\r", "// It has not... perform the initialization\r", "// Replace href: /emr/SITE/Forms/223822.txt with link to PDFs\r", "// CRQ-101749: New href will end with WRSPatientID_PatientLastName_PatientFirstName_PatientDOB_FHUid (fields from EMT_Template content type)\r", "// CRQ-101749: e.g. 555_Ramsbottom_Douglas_12241983_358322.pdf \r", "//$(\"a[href$='.txt']\").attr(\"target\", \"_blank\");\t\t\r", "//$(\"a[href$='.txt']\").css(\"background-color\", \"yellow\");\r"], "docstring_tokens": ["maybe", "better", "to", "use", "a", "button", ".", "This", "href", "has", "some", "weird", "behaviour", "."], "docstring": "maybe better to use a button. This href has some weird behaviour.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "TODO: maybe better to use a button.", "short_docstring_tokens": ["TODO", ":", "maybe", "better", "to", "use", "a", "button", "."], "original_string": "function initApproveForm() {\r\n    //alert(_spPageContextInfo.webServerRelativeUrl);\r\n    var pdfPath = _spPageContextInfo.webServerRelativeUrl + \"PDFs\"\r\n\r\n    //$(\"ms-cellstyle ms-vb2\").find(); //TODO: restrict the query.\r\n\r\n    //Flag to ensure only called once per page load.\r\n    if (typeof initApproveForm.counter === 'undefined') {\r\n        // It has not... perform the initialization\r\n        initApproveForm.counter = 0;\r\n\r\n        console.log(\"in initApproveForm: updating hrefs - \" + initApproveForm.counter++);\r\n\r\n        $(\"a[href$='.pdf']\").attr(\"target\", \"_blank\");\r\n        $(\"a[href$='.pdf']\").click(function () {\r\n            viewFormPDF($(this).attr(\"href\"));\r\n            return true;\r\n        });\r\n\r\n        $(\"img[id^='RejectForm_']\").click(function () {\r\n            rejectFormNew($(this).data(\"fhuid\"));\r\n            return true;\r\n        });\r\n\r\n        $(\"img[id^='ApproveForm_']\").click(function () {\r\n            approveFormNew($(this).data(\"fhuid\"));\r\n            return true;\r\n        });\r\n\r\n        $(\"img[id^='FlagForm_']\").click(function () {\r\n            flagFormForReviewNew($(this).data(\"fhuid\"));\r\n            return true;\r\n        });\r\n\r\n        // Replace href: /emr/SITE/Forms/223822.txt with link to PDFs\r\n        // CRQ-101749: New href will end with WRSPatientID_PatientLastName_PatientFirstName_PatientDOB_FHUid (fields from EMT_Template content type)\r\n        // CRQ-101749: e.g. 555_Ramsbottom_Douglas_12241983_358322.pdf \r\n        //$(\"a[href$='.txt']\").attr(\"target\", \"_blank\");\t\t\r\n        $(\"a[href$='.txt']\").attr('href', function () { return this.href.replace(\"Forms\", \"PDFs\").replace(\".txt\", \".pdf\"); });\r\n\r\n    }\r\n\r\n    //$(\"a[href$='.txt']\").css(\"background-color\", \"yellow\");\r\n}", "id": "8bd4c7a81a326aeb1b572123186e5dafa76ff4d6ab97c20a9443136424fa4a00"}
{"identifier": "initBatchPrint", "parameters": {}, "return_type": "<not_specific>", "repo": "ThePrior/Scripts", "path": "BatchPrint.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "b7b136bbf9a58e83bb5ce25371d6822ff031784f", "ext": "js", "size": 25667, "code": "function initBatchPrint() {\n    if (typeof initBatchPrint.counter === 'undefined') {\n        initBatchPrint.counter = 0;\n        console.log(\"in initBatchPrint: updating hrefs - \" + initBatchPrint.counter++);\n        $(\"img[id^='SelectSchedule_']\").click(function () {\n            togglePrint($(this).attr('id'));\n            return true;\n        });\n        $(\"img[id^='DeselectSchedule_']\").click(function () {\n            togglePrint($(this).attr('id'));\n            return true;\n        });\n        $(\"img[id^='DownloadPDF']\").click(function () {\n            downloadPDF($(this).attr('id'));\n            return true;\n        });\n        $(\"img[id^='ErrorSchedule_']\").click(function () {\n            clearError($(this).attr('id'));\n            return true;\n        });\n        $(window).on('beforeunload', function () {\n            return confirmPageReload();\n        });\n        ExecuteOrDelayUntilScriptLoaded(initialiseAllEmptyStatusFields, \"sp.js\");\n    }\n}", "code_tokens": ["function", "initBatchPrint", "(", ")", "{", "if", "(", "typeof", "initBatchPrint", ".", "counter", "===", "'undefined'", ")", "{", "initBatchPrint", ".", "counter", "=", "0", ";", "console", ".", "log", "(", "\"in initBatchPrint: updating hrefs - \"", "+", "initBatchPrint", ".", "counter", "++", ")", ";", "$", "(", "\"img[id^='SelectSchedule_']\"", ")", ".", "click", "(", "function", "(", ")", "{", "togglePrint", "(", "$", "(", "this", ")", ".", "attr", "(", "'id'", ")", ")", ";", "return", "true", ";", "}", ")", ";", "$", "(", "\"img[id^='DeselectSchedule_']\"", ")", ".", "click", "(", "function", "(", ")", "{", "togglePrint", "(", "$", "(", "this", ")", ".", "attr", "(", "'id'", ")", ")", ";", "return", "true", ";", "}", ")", ";", "$", "(", "\"img[id^='DownloadPDF']\"", ")", ".", "click", "(", "function", "(", ")", "{", "downloadPDF", "(", "$", "(", "this", ")", ".", "attr", "(", "'id'", ")", ")", ";", "return", "true", ";", "}", ")", ";", "$", "(", "\"img[id^='ErrorSchedule_']\"", ")", ".", "click", "(", "function", "(", ")", "{", "clearError", "(", "$", "(", "this", ")", ".", "attr", "(", "'id'", ")", ")", ";", "return", "true", ";", "}", ")", ";", "$", "(", "window", ")", ".", "on", "(", "'beforeunload'", ",", "function", "(", ")", "{", "return", "confirmPageReload", "(", ")", ";", "}", ")", ";", "ExecuteOrDelayUntilScriptLoaded", "(", "initialiseAllEmptyStatusFields", ",", "\"sp.js\"", ")", ";", "}", "}"], "original_docstring": "//Initialise onClick events for the different Print Set Status Values\r", "comment": ["//Flag to ensure only called once per page load.\r", "// It has not... perform the initialization\r", "//togglePrint($(this).data(\"apptid\"), $(this).data(\"set\"));\r", "// We want to detect if the user refreshes or navigates away from the page.\r", "//$(\"a[href$='.txt']\").css(\"background-color\", \"yellow\");\r"], "docstring_tokens": ["Initialise", "onClick", "events", "for", "the", "different", "Print", "Set", "Status", "Values"], "docstring": "Initialise onClick events for the different Print Set Status Values", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Initialise onClick events for the different Print Set Status Values", "short_docstring_tokens": ["Initialise", "onClick", "events", "for", "the", "different", "Print", "Set", "Status", "Values"], "original_string": "function initBatchPrint() {\r\n    //Flag to ensure only called once per page load.\r\n    if (typeof initBatchPrint.counter === 'undefined') {\r\n        // It has not... perform the initialization\r\n        initBatchPrint.counter = 0;\r\n\r\n        console.log(\"in initBatchPrint: updating hrefs - \" + initBatchPrint.counter++);\r\n\r\n        $(\"img[id^='SelectSchedule_']\").click(function () {\r\n            //togglePrint($(this).data(\"apptid\"), $(this).data(\"set\"));\r\n            togglePrint($(this).attr('id'));\r\n            return true;\r\n        });\r\n\r\n        $(\"img[id^='DeselectSchedule_']\").click(function () {\r\n            togglePrint($(this).attr('id'));\r\n            return true;\r\n        });\r\n\r\n        $(\"img[id^='DownloadPDF']\").click(function () {\r\n            downloadPDF($(this).attr('id'));\r\n            return true;\r\n        });\r\n\r\n        $(\"img[id^='ErrorSchedule_']\").click(function () {\r\n            clearError($(this).attr('id'));\r\n            return true;\r\n        });\r\n\r\n        // We want to detect if the user refreshes or navigates away from the page.\r\n        $(window).on('beforeunload', function () {\r\n            return confirmPageReload();\r\n        });\r\n\r\n        ExecuteOrDelayUntilScriptLoaded(initialiseAllEmptyStatusFields, \"sp.js\");\r\n    }\r\n\r\n    //$(\"a[href$='.txt']\").css(\"background-color\", \"yellow\");\r\n}", "id": "7d81e05b22e8602d63264d75cacd33509cab8d5529323ae02fb5bededfb0ac5e"}
{"identifier": "selectAll", "parameters": {}, "return_type": "<not_specific>", "repo": "ThePrior/Scripts", "path": "BatchPrint.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "b7b136bbf9a58e83bb5ce25371d6822ff031784f", "ext": "js", "size": 25667, "code": "function selectAll() {\n    var usefulData = {};\n    usefulData.lockId = \"toggleAll\";\n    if (!getMasterLock(usefulData.lockId)) {\n        alert(\"Waiting for server to update schedules. Please try again in a few moments.\");\n        console.log(\"Cannot get lock - ignored toggle all event\");\n        return;\n    }\n    var found = false;\n    var selectedApptIDs = [];\n    $(\"img[data-action='Not Set']\").each(function () {\n        setImgSelected($(this));\n        selectedApptIDs.push($(this).data(\"apptid\"));\n        found = true;\n        return;\n    });\n    if (!found) {\n        SP.UI.Notify.addNotification(\"No items displayed in current view to select.\", false);\n        releaseLock(usefulData.lockId);\n        return;\n    }\n    var formSets = getAllFormSets();\n    console.log(formSets);\n    console.log(selectedApptIDs);\n    toggleAllStatus(selectedApptIDs, formSets, \"Not Set\", \"Queued\", usefulData);\n}", "code_tokens": ["function", "selectAll", "(", ")", "{", "var", "usefulData", "=", "{", "}", ";", "usefulData", ".", "lockId", "=", "\"toggleAll\"", ";", "if", "(", "!", "getMasterLock", "(", "usefulData", ".", "lockId", ")", ")", "{", "alert", "(", "\"Waiting for server to update schedules. Please try again in a few moments.\"", ")", ";", "console", ".", "log", "(", "\"Cannot get lock - ignored toggle all event\"", ")", ";", "return", ";", "}", "var", "found", "=", "false", ";", "var", "selectedApptIDs", "=", "[", "]", ";", "$", "(", "\"img[data-action='Not Set']\"", ")", ".", "each", "(", "function", "(", ")", "{", "setImgSelected", "(", "$", "(", "this", ")", ")", ";", "selectedApptIDs", ".", "push", "(", "$", "(", "this", ")", ".", "data", "(", "\"apptid\"", ")", ")", ";", "found", "=", "true", ";", "return", ";", "}", ")", ";", "if", "(", "!", "found", ")", "{", "SP", ".", "UI", ".", "Notify", ".", "addNotification", "(", "\"No items displayed in current view to select.\"", ",", "false", ")", ";", "releaseLock", "(", "usefulData", ".", "lockId", ")", ";", "return", ";", "}", "var", "formSets", "=", "getAllFormSets", "(", ")", ";", "console", ".", "log", "(", "formSets", ")", ";", "console", ".", "log", "(", "selectedApptIDs", ")", ";", "toggleAllStatus", "(", "selectedApptIDs", ",", "formSets", ",", "\"Not Set\"", ",", "\"Queued\"", ",", "usefulData", ")", ";", "}"], "original_docstring": "//       This is different to the Download Today's behaviour which matches all schedules on date.\r", "comment": ["//Need to get a master lock i.e. make sure no other JSOM calls are still updating items.\r", "//Note: The UI may not have been up to date with the server. \r", "//      We can no longer make a JSOM call to update all items,\r", "//      since Select all now works on current displayed schedules only.\r", "//      Instead let's just do a page refresh.\r", "//We need to find ALL the form sets on this page (not just Queued or Not Set). This is because\r", "//subsequent JSOM calls want to find schedules that may not be visible in this page of the current view.\r"], "docstring_tokens": ["This", "is", "different", "to", "the", "Download", "Today", "'", "s", "behaviour", "which", "matches", "all", "schedules", "on", "date", "."], "docstring": "This is different to the Download Today's behaviour which matches all schedules on date.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "This is different to the Download Today's behaviour which matches all schedules on date.", "short_docstring_tokens": ["This", "is", "different", "to", "the", "Download", "Today", "'", "s", "behaviour", "which", "matches", "all", "schedules", "on", "date", "."], "original_string": "function selectAll() {\r\n    var usefulData = {};\r\n    usefulData.lockId = \"toggleAll\";\r\n\r\n    //Need to get a master lock i.e. make sure no other JSOM calls are still updating items.\r\n    if (!getMasterLock(usefulData.lockId)) {\r\n        alert(\"Waiting for server to update schedules. Please try again in a few moments.\");\r\n        console.log(\"Cannot get lock - ignored toggle all event\");\r\n        return;\r\n    }\r\n\r\n    var found = false;\r\n    var selectedApptIDs = [];\r\n    $(\"img[data-action='Not Set']\").each(function () {\r\n        setImgSelected($(this));\r\n        selectedApptIDs.push($(this).data(\"apptid\"));\r\n        found = true;\r\n        return;\r\n    });\r\n\r\n    //Note: The UI may not have been up to date with the server. \r\n    //      We can no longer make a JSOM call to update all items,\r\n    //      since Select all now works on current displayed schedules only.\r\n    //      Instead let's just do a page refresh.\r\n    if (!found) {\r\n        SP.UI.Notify.addNotification(\"No items displayed in current view to select.\", false);\r\n        releaseLock(usefulData.lockId);\r\n        return;\r\n    }\r\n\r\n    //We need to find ALL the form sets on this page (not just Queued or Not Set). This is because\r\n    //subsequent JSOM calls want to find schedules that may not be visible in this page of the current view.\r\n    var formSets = getAllFormSets();\r\n\r\n    console.log(formSets);\r\n    console.log(selectedApptIDs);\r\n    toggleAllStatus(selectedApptIDs, formSets, \"Not Set\", \"Queued\", usefulData);\r\n}", "id": "b9aeab0629cad242ac0669388fba79359ef3ff0b5a8195946c5cf56dced3371e"}
{"identifier": "initialiseAllEmptyStatusFields", "parameters": {}, "return_type": "<not_specific>", "repo": "ThePrior/Scripts", "path": "BatchPrint.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "b7b136bbf9a58e83bb5ce25371d6822ff031784f", "ext": "js", "size": 25667, "code": "function initialiseAllEmptyStatusFields() {\n    var usefulData = {};\n    usefulData.lockId = \"initialiseAll\";\n    if (!getMasterLock(usefulData.lockId)) {\n        console.log(\"Cannot get lock - ignored toggle all event\");\n        return;\n    }\n    var found = false;\n    var deselectedApptIDs = [];\n    $(\"img[data-action='Not Set']\").each(function () {\n        setImgNotSelected($(this));\n        deselectedApptIDs.push($(this).data(\"apptid\"));\n        found = true;\n        return;\n    });\n    if (!found) {\n        releaseLock(usefulData.lockId);\n        return;\n    }\n    var formSets = getAllFormSets();\n    console.log(formSets);\n    console.log(deselectedApptIDs);\n    toggleAllStatus(deselectedApptIDs, formSets, null, \"Not Set\", usefulData);\n}", "code_tokens": ["function", "initialiseAllEmptyStatusFields", "(", ")", "{", "var", "usefulData", "=", "{", "}", ";", "usefulData", ".", "lockId", "=", "\"initialiseAll\"", ";", "if", "(", "!", "getMasterLock", "(", "usefulData", ".", "lockId", ")", ")", "{", "console", ".", "log", "(", "\"Cannot get lock - ignored toggle all event\"", ")", ";", "return", ";", "}", "var", "found", "=", "false", ";", "var", "deselectedApptIDs", "=", "[", "]", ";", "$", "(", "\"img[data-action='Not Set']\"", ")", ".", "each", "(", "function", "(", ")", "{", "setImgNotSelected", "(", "$", "(", "this", ")", ")", ";", "deselectedApptIDs", ".", "push", "(", "$", "(", "this", ")", ".", "data", "(", "\"apptid\"", ")", ")", ";", "found", "=", "true", ";", "return", ";", "}", ")", ";", "if", "(", "!", "found", ")", "{", "releaseLock", "(", "usefulData", ".", "lockId", ")", ";", "return", ";", "}", "var", "formSets", "=", "getAllFormSets", "(", ")", ";", "console", ".", "log", "(", "formSets", ")", ";", "console", ".", "log", "(", "deselectedApptIDs", ")", ";", "toggleAllStatus", "(", "deselectedApptIDs", ",", "formSets", ",", "null", ",", "\"Not Set\"", ",", "usefulData", ")", ";", "}"], "original_docstring": "//does not populate the the EMR_BathPrint ct default fields.\r", "comment": ["//Need to get a master lock i.e. make sure no other JSOM calls are still updating items.\r", "//Note: The UI may not have been up to date with the server. \r", "//      We can no longer make a JSOM call to update all items,\r", "//      since Select all now works on current displayed schedules only.\r", "//We need to find ALL the form sets on THIS page (not just Queued or Not Set). This is because\r", "//subsequent JSOM calls want to find schedules that may not be visible in this page of the current view.\r"], "docstring_tokens": ["does", "not", "populate", "the", "the", "EMR_BathPrint", "ct", "default", "fields", "."], "docstring": "does not populate the the EMR_BathPrint ct default fields.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "does not populate the the EMR_BathPrint ct default fields.", "short_docstring_tokens": ["does", "not", "populate", "the", "the", "EMR_BathPrint", "ct", "default", "fields", "."], "original_string": "function initialiseAllEmptyStatusFields() {\r\n    var usefulData = {};\r\n    usefulData.lockId = \"initialiseAll\";\r\n\r\n    //Need to get a master lock i.e. make sure no other JSOM calls are still updating items.\r\n    if (!getMasterLock(usefulData.lockId)) {\r\n        console.log(\"Cannot get lock - ignored toggle all event\");\r\n        return;\r\n    }\r\n\r\n    var found = false;\r\n    var deselectedApptIDs = [];\r\n    $(\"img[data-action='Not Set']\").each(function () {\r\n        setImgNotSelected($(this));\r\n        deselectedApptIDs.push($(this).data(\"apptid\"));\r\n        found = true;\r\n        return;\r\n    });\r\n\r\n    //Note: The UI may not have been up to date with the server. \r\n    //      We can no longer make a JSOM call to update all items,\r\n    //      since Select all now works on current displayed schedules only.\r\n    if (!found) {\r\n        releaseLock(usefulData.lockId);\r\n        return;\r\n    }\r\n\r\n    //We need to find ALL the form sets on THIS page (not just Queued or Not Set). This is because\r\n    //subsequent JSOM calls want to find schedules that may not be visible in this page of the current view.\r\n    var formSets = getAllFormSets();\r\n\r\n    console.log(formSets);\r\n    console.log(deselectedApptIDs);\r\n    toggleAllStatus(deselectedApptIDs, formSets, null, \"Not Set\", usefulData);\r\n}", "id": "da8b4a3d847441d0406fc9d16a48bc08922a1d4f92056f14555a14fee5d2e7ce"}
{"identifier": "OLD_downloadTodays", "parameters": {}, "return_type": null, "repo": "ThePrior/Scripts", "path": "BatchPrint.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "b7b136bbf9a58e83bb5ce25371d6822ff031784f", "ext": "js", "size": 25667, "code": "function OLD_downloadTodays() {\n    var apptIDs = [];\n    var apptIDsParam = JSON.stringify(apptIDs);\n    downloadAll('Today', apptIDsParam);\n}", "code_tokens": ["function", "OLD_downloadTodays", "(", ")", "{", "var", "apptIDs", "=", "[", "]", ";", "var", "apptIDsParam", "=", "JSON", ".", "stringify", "(", "apptIDs", ")", ";", "downloadAll", "(", "'Today'", ",", "apptIDsParam", ")", ";", "}"], "original_docstring": "// No longer used, since need to check if thre is anything available to download first.\r", "comment": ["// An empty set of apptIDs means ALL\r", "//TODO: We may need to work out the number of form pages per ready formset and then just request the \r", "//TODO: appropriate number of schedules' PDFs, so as not to overload the server - not easy to do - or the client printing.\r"], "docstring_tokens": ["No", "longer", "used", "since", "need", "to", "check", "if", "thre", "is", "anything", "available", "to", "download", "first", "."], "docstring": "No longer used, since need to check if thre is anything available to download first.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "No longer used, since need to check if thre is anything available to download first.", "short_docstring_tokens": ["No", "longer", "used", "since", "need", "to", "check", "if", "thre", "is", "anything", "available", "to", "download", "first", "."], "original_string": "function OLD_downloadTodays() {\r\n    // An empty set of apptIDs means ALL\r\n    //TODO: We may need to work out the number of form pages per ready formset and then just request the \r\n    //TODO: appropriate number of schedules' PDFs, so as not to overload the server - not easy to do - or the client printing.\r\n    var apptIDs = [];\r\n    var apptIDsParam = JSON.stringify(apptIDs);\r\n\r\n    downloadAll('Today', apptIDsParam);\r\n}", "id": "be08c13fb1264c36417b44ac162e5d2ba4224b7241d28c5b59ce437e139a325e"}
{"identifier": "toggleAllStatus", "parameters": {"apptIDs": null, "formSets": null, "oldStatus": null, "newStatus": null, "usefulData": null}, "return_type": null, "repo": "ThePrior/Scripts", "path": "BatchPrint.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "b7b136bbf9a58e83bb5ce25371d6822ff031784f", "ext": "js", "size": 25667, "code": "function toggleAllStatus(apptIDs, formSets, oldStatus, newStatus, usefulData) {\n    var listId = _spPageContextInfo.pageListId;\n    var fieldProperties = getFieldProperties(formSets, newStatus);\n    var fieldNames = buildStatusFieldNames(formSets);\n    console.log(fieldNames);\n    var apptIDsQueryString = buildApptIdQueryString(apptIDs);\n    console.log(apptIDsQueryString);\n    var fieldStatusQueryString = buildStatusQueryString(fieldNames, oldStatus, '', true);\n    console.log(fieldStatusQueryString);\n    var fullQueryString = \"<View><Query><Where><And>\" + apptIDsQueryString + fieldStatusQueryString + \"</And></Where></View></Query>\";\n    console.log(fullQueryString);\n    var camlQuery = new SP.CamlQuery();\n    camlQuery.set_viewXml(fullQueryString);\n    getListItemsCamlQuery(listId, camlQuery, fieldProperties, usefulData)\n    .then(processSchedule)\n    .then(handleSuccess, handleFailure);\n}", "code_tokens": ["function", "toggleAllStatus", "(", "apptIDs", ",", "formSets", ",", "oldStatus", ",", "newStatus", ",", "usefulData", ")", "{", "var", "listId", "=", "_spPageContextInfo", ".", "pageListId", ";", "var", "fieldProperties", "=", "getFieldProperties", "(", "formSets", ",", "newStatus", ")", ";", "var", "fieldNames", "=", "buildStatusFieldNames", "(", "formSets", ")", ";", "console", ".", "log", "(", "fieldNames", ")", ";", "var", "apptIDsQueryString", "=", "buildApptIdQueryString", "(", "apptIDs", ")", ";", "console", ".", "log", "(", "apptIDsQueryString", ")", ";", "var", "fieldStatusQueryString", "=", "buildStatusQueryString", "(", "fieldNames", ",", "oldStatus", ",", "''", ",", "true", ")", ";", "console", ".", "log", "(", "fieldStatusQueryString", ")", ";", "var", "fullQueryString", "=", "\"<View><Query><Where><And>\"", "+", "apptIDsQueryString", "+", "fieldStatusQueryString", "+", "\"</And></Where></View></Query>\"", ";", "console", ".", "log", "(", "fullQueryString", ")", ";", "var", "camlQuery", "=", "new", "SP", ".", "CamlQuery", "(", ")", ";", "camlQuery", ".", "set_viewXml", "(", "fullQueryString", ")", ";", "getListItemsCamlQuery", "(", "listId", ",", "camlQuery", ",", "fieldProperties", ",", "usefulData", ")", ".", "then", "(", "processSchedule", ")", ".", "then", "(", "handleSuccess", ",", "handleFailure", ")", ";", "}"], "original_docstring": "// and have at least one schedule that needs updating.\r", "comment": [], "docstring_tokens": ["and", "have", "at", "least", "one", "schedule", "that", "needs", "updating", "."], "docstring": "and have at least one schedule that needs updating.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "apptIDs", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "formSets", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "oldStatus", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "newStatus", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "usefulData", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "and have at least one schedule that needs updating.", "short_docstring_tokens": ["and", "have", "at", "least", "one", "schedule", "that", "needs", "updating", "."], "original_string": "function toggleAllStatus(apptIDs, formSets, oldStatus, newStatus, usefulData) {\r\n    var listId = _spPageContextInfo.pageListId;\r\n\r\n    var fieldProperties = getFieldProperties(formSets, newStatus);\r\n    var fieldNames = buildStatusFieldNames(formSets);\r\n\r\n    console.log(fieldNames);\r\n\r\n    var apptIDsQueryString = buildApptIdQueryString(apptIDs);\r\n    console.log(apptIDsQueryString);\r\n\r\n    var fieldStatusQueryString = buildStatusQueryString(fieldNames, oldStatus, '', true);\r\n    console.log(fieldStatusQueryString);\r\n\r\n    var fullQueryString = \"<View><Query><Where><And>\" + apptIDsQueryString + fieldStatusQueryString + \"</And></Where></View></Query>\";\r\n    console.log(fullQueryString);\r\n\r\n    var camlQuery = new SP.CamlQuery();\r\n    camlQuery.set_viewXml(fullQueryString);\r\n\r\n    getListItemsCamlQuery(listId, camlQuery, fieldProperties, usefulData)\r\n    .then(processSchedule)\r\n    .then(handleSuccess, handleFailure);\r\n}", "id": "050256effc22d55c2cc4a119f8cc66cc9fd6740367a40c4034e430c5a90cfbfd"}
{"identifier": "generatePatientIntakeForms", "parameters": {"itemId": null, "listId": null, "siteUrl": null}, "return_type": "<not_specific>", "repo": "ThePrior/Scripts", "path": "PrefillPatientFormExtended.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "594fef9e5365f98d9bb8de6cbf4920318f24062e", "ext": "js", "size": 39300, "code": "function generatePatientIntakeForms(itemId, listId, siteUrl) {\n    console.log(\"generatePatientIntakeForms - ItemId = \" + itemId + \", ListId = \" + listId + \", SiteUrl = \" + siteUrl);\n    var ctx = SP.ClientContext.get_current();\n    var selectedItems = SP.ListOperation.Selection.getSelectedItems(ctx);\n    var myItems = '';\n    if (selectedItems.length === 0) {\n        selectedItems[0] = { id: itemId };\n    }\n    var siteServerRelativeUrl = _spPageContextInfo.siteServerRelativeUrl;\n    var webServerRelativeUrl = _spPageContextInfo.webServerRelativeUrl;\n    var myData = initialiseMyData(siteUrl, webServerRelativeUrl, siteServerRelativeUrl);\n    if (myData.siteCode.length === 0) {\n        alert(\"Unable to determine susbsite code.\");\n        return;\n    }\n    var concurrentPrintRequests = 0;\n    var dfd = $.Deferred().resolve();\n    selectedItems.forEach(function (selectedItem) {\n        var myData = initialiseMyData(siteUrl, webServerRelativeUrl, siteServerRelativeUrl);\n        dfd = dfd.then(function () {\n            return getPatientAndFormDetails(selectedItem.id, listId, myData, siteServerRelativeUrl, webServerRelativeUrl)\n\t\t\t\t.then(function () {\n\t\t\t\t    var waitModal;\n\t\t\t\t    dfd = dfd.then(function () {\n\t\t\t\t        if (concurrentPrintRequests) {\n\t\t\t\t            waitModal = showGeneratingFormsDialog(myData, \"\");\n\t\t\t\t            return printPatientIntakeFormsConcurrent(myData);\n\t\t\t\t        } else {\n\t\t\t\t            return printPatientIntakeForms(myData);\n\t\t\t\t        }\n\t\t\t\t    });\n\t\t\t\t    dfd.done(function () {\n\t\t\t\t        if (concurrentPrintRequests) {\n\t\t\t\t            waitModal.close();\n\t\t\t\t        }\n\t\t\t\t    });\n\t\t\t\t});\n        });\n    });\n}", "code_tokens": ["function", "generatePatientIntakeForms", "(", "itemId", ",", "listId", ",", "siteUrl", ")", "{", "console", ".", "log", "(", "\"generatePatientIntakeForms - ItemId = \"", "+", "itemId", "+", "\", ListId = \"", "+", "listId", "+", "\", SiteUrl = \"", "+", "siteUrl", ")", ";", "var", "ctx", "=", "SP", ".", "ClientContext", ".", "get_current", "(", ")", ";", "var", "selectedItems", "=", "SP", ".", "ListOperation", ".", "Selection", ".", "getSelectedItems", "(", "ctx", ")", ";", "var", "myItems", "=", "''", ";", "if", "(", "selectedItems", ".", "length", "===", "0", ")", "{", "selectedItems", "[", "0", "]", "=", "{", "id", ":", "itemId", "}", ";", "}", "var", "siteServerRelativeUrl", "=", "_spPageContextInfo", ".", "siteServerRelativeUrl", ";", "var", "webServerRelativeUrl", "=", "_spPageContextInfo", ".", "webServerRelativeUrl", ";", "var", "myData", "=", "initialiseMyData", "(", "siteUrl", ",", "webServerRelativeUrl", ",", "siteServerRelativeUrl", ")", ";", "if", "(", "myData", ".", "siteCode", ".", "length", "===", "0", ")", "{", "alert", "(", "\"Unable to determine susbsite code.\"", ")", ";", "return", ";", "}", "var", "concurrentPrintRequests", "=", "0", ";", "var", "dfd", "=", "$", ".", "Deferred", "(", ")", ".", "resolve", "(", ")", ";", "selectedItems", ".", "forEach", "(", "function", "(", "selectedItem", ")", "{", "var", "myData", "=", "initialiseMyData", "(", "siteUrl", ",", "webServerRelativeUrl", ",", "siteServerRelativeUrl", ")", ";", "dfd", "=", "dfd", ".", "then", "(", "function", "(", ")", "{", "return", "getPatientAndFormDetails", "(", "selectedItem", ".", "id", ",", "listId", ",", "myData", ",", "siteServerRelativeUrl", ",", "webServerRelativeUrl", ")", ".", "then", "(", "function", "(", ")", "{", "var", "waitModal", ";", "dfd", "=", "dfd", ".", "then", "(", "function", "(", ")", "{", "if", "(", "concurrentPrintRequests", ")", "{", "waitModal", "=", "showGeneratingFormsDialog", "(", "myData", ",", "\"\"", ")", ";", "return", "printPatientIntakeFormsConcurrent", "(", "myData", ")", ";", "}", "else", "{", "return", "printPatientIntakeForms", "(", "myData", ")", ";", "}", "}", ")", ";", "dfd", ".", "done", "(", "function", "(", ")", "{", "if", "(", "concurrentPrintRequests", ")", "{", "waitModal", ".", "close", "(", ")", ";", "}", "}", ")", ";", "}", ")", ";", "}", ")", ";", "}", ")", ";", "}"], "original_docstring": "// Create corresponding items in the FormsToPrint document library.\r", "comment": ["//NOTE: To batch print using an intermediate document libray use addItemToFormsToPrint()\r", "//Need async 'waterfall loop' to submit print requests for all forms for each patient, one patient at a time.\r", "//See: http://stackoverflow.com/questions/15504921/asynchronous-loop-of-jquery-deferreds-promises\r", "//This functionality (concurrent print requests) is available in case the print server is ever scaled out to multiple servers.\r", "//begin the chain by resolving a new $.Deferred\r", "// use a forEach to create a closure freezing selectedItem\r", "//Another closure this time freezing myData...\r", "// add to the $.Deferred chain with $.then() and re-assign\r", "// add to the $.Deferred chain with $.then() and re-assign\r", "// perform async operation and return its promise\r"], "docstring_tokens": ["Create", "corresponding", "items", "in", "the", "FormsToPrint", "document", "library", "."], "docstring": "Create corresponding items in the FormsToPrint document library.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "itemId", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "listId", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "siteUrl", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Create corresponding items in the FormsToPrint document library.", "short_docstring_tokens": ["Create", "corresponding", "items", "in", "the", "FormsToPrint", "document", "library", "."], "original_string": "function generatePatientIntakeForms(itemId, listId, siteUrl) {\r\n    console.log(\"generatePatientIntakeForms - ItemId = \" + itemId + \", ListId = \" + listId + \", SiteUrl = \" + siteUrl);\r\n\r\n    var ctx = SP.ClientContext.get_current();\r\n    var selectedItems = SP.ListOperation.Selection.getSelectedItems(ctx);\r\n\r\n    var myItems = '';\r\n    if (selectedItems.length === 0) {\r\n        selectedItems[0] = { id: itemId };\r\n    }\r\n\r\n    var siteServerRelativeUrl = _spPageContextInfo.siteServerRelativeUrl;\r\n    var webServerRelativeUrl = _spPageContextInfo.webServerRelativeUrl;\r\n\r\n    var myData = initialiseMyData(siteUrl, webServerRelativeUrl, siteServerRelativeUrl);\r\n\r\n    if (myData.siteCode.length === 0) {\r\n        alert(\"Unable to determine susbsite code.\");\r\n        return;\r\n    }\r\n\r\n    //NOTE: To batch print using an intermediate document libray use addItemToFormsToPrint()\r\n\r\n    //Need async 'waterfall loop' to submit print requests for all forms for each patient, one patient at a time.\r\n    //See: http://stackoverflow.com/questions/15504921/asynchronous-loop-of-jquery-deferreds-promises\r\n\r\n    //This functionality (concurrent print requests) is available in case the print server is ever scaled out to multiple servers.\r\n    var concurrentPrintRequests = 0;\r\n\r\n    //begin the chain by resolving a new $.Deferred\r\n    var dfd = $.Deferred().resolve();\r\n\r\n    // use a forEach to create a closure freezing selectedItem\r\n    selectedItems.forEach(function (selectedItem) {\r\n\r\n        //Another closure this time freezing myData...\r\n        var myData = initialiseMyData(siteUrl, webServerRelativeUrl, siteServerRelativeUrl);\r\n\r\n        // add to the $.Deferred chain with $.then() and re-assign\r\n        dfd = dfd.then(function () {\r\n            return getPatientAndFormDetails(selectedItem.id, listId, myData, siteServerRelativeUrl, webServerRelativeUrl)\r\n\t\t\t\t.then(function () {\r\n\t\t\t\t    var waitModal;\r\n\r\n\t\t\t\t    // add to the $.Deferred chain with $.then() and re-assign\r\n\t\t\t\t    dfd = dfd.then(function () {\r\n\t\t\t\t        if (concurrentPrintRequests) {\r\n\t\t\t\t            waitModal = showGeneratingFormsDialog(myData, \"\");\r\n\t\t\t\t            return printPatientIntakeFormsConcurrent(myData);\r\n\t\t\t\t        } else {\r\n\t\t\t\t            // perform async operation and return its promise\r\n\t\t\t\t            return printPatientIntakeForms(myData);\r\n\t\t\t\t        }\r\n\t\t\t\t    });\r\n\r\n\t\t\t\t    dfd.done(function () {\r\n\t\t\t\t        if (concurrentPrintRequests) {\r\n\t\t\t\t            waitModal.close();\r\n\t\t\t\t        }\r\n\t\t\t\t    });\r\n\t\t\t\t});\r\n        });\r\n    });\r\n\r\n}", "id": "8ca7e55ff3c0f701b7727d24d35ad647cc8b0ac3e6c070537869ac3c63c8f389"}
{"identifier": "printPatientIntakeFormsConcurrent", "parameters": {"myData": null}, "return_type": "<not_specific>", "repo": "ThePrior/Scripts", "path": "PrefillPatientFormExtended.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "594fef9e5365f98d9bb8de6cbf4920318f24062e", "ext": "js", "size": 39300, "code": "function printPatientIntakeFormsConcurrent(myData) {\n    console.log(\"in printPatientIntakeFormsConcurrent\");\n    var deferreds = [];\n    for (var i = 0; i < myData.forms.length; i++) {\n        var formValue = myData.forms[i];\n        var formId = formValue.get_lookupValue();\n        deferreds.push(callPrefillPatt(myData, formId));\n    }\n    return $.when.apply($, deferreds);\n}", "code_tokens": ["function", "printPatientIntakeFormsConcurrent", "(", "myData", ")", "{", "console", ".", "log", "(", "\"in printPatientIntakeFormsConcurrent\"", ")", ";", "var", "deferreds", "=", "[", "]", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "myData", ".", "forms", ".", "length", ";", "i", "++", ")", "{", "var", "formValue", "=", "myData", ".", "forms", "[", "i", "]", ";", "var", "formId", "=", "formValue", ".", "get_lookupValue", "(", ")", ";", "deferreds", ".", "push", "(", "callPrefillPatt", "(", "myData", ",", "formId", ")", ")", ";", "}", "return", "$", ".", "when", ".", "apply", "(", "$", ",", "deferreds", ")", ";", "}"], "original_docstring": "// Issues multiple print requests for a patient concurrently\r", "comment": [], "docstring_tokens": ["Issues", "multiple", "print", "requests", "for", "a", "patient", "concurrently"], "docstring": "Issues multiple print requests for a patient concurrently", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "myData", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Issues multiple print requests for a patient concurrently", "short_docstring_tokens": ["Issues", "multiple", "print", "requests", "for", "a", "patient", "concurrently"], "original_string": "function printPatientIntakeFormsConcurrent(myData) {\r\n    console.log(\"in printPatientIntakeFormsConcurrent\");\r\n\r\n    var deferreds = [];\r\n    for (var i = 0; i < myData.forms.length; i++) {\r\n        var formValue = myData.forms[i];\r\n        var formId = formValue.get_lookupValue();\r\n        deferreds.push(callPrefillPatt(myData, formId));\r\n    }\r\n\r\n    return $.when.apply($, deferreds);\r\n}", "id": "062447480b9987238deead8b626fa8fabda0ea4beae20f60e19e0ad7ff3dc60a"}
{"identifier": "printPatientIntakeForms", "parameters": {"myData": null}, "return_type": "<not_specific>", "repo": "ThePrior/Scripts", "path": "PrefillPatientFormExtended.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "594fef9e5365f98d9bb8de6cbf4920318f24062e", "ext": "js", "size": 39300, "code": "function printPatientIntakeForms(myData) {\n    console.log(\"in printPatientIntakeForms\");\n    var waitModal;\n    var dfd = $.Deferred().resolve();\n    myData.forms.forEach(function (formValue) {\n        var formId = formValue.get_lookupValue();\n        dfd = dfd.then(function () {\n            var friendlyName = findFriendlyName(myData, formId);\n            waitModal = showGeneratingFormsDialog(myData, friendlyName);\n            return callPrefillPatt(myData, formId);\n        });\n        dfd.done(function () {\n            waitModal.close();\n        });\n        dfd.fail(function () {\n            waitModal.close();\n        });\n    });\n    return dfd;\n}", "code_tokens": ["function", "printPatientIntakeForms", "(", "myData", ")", "{", "console", ".", "log", "(", "\"in printPatientIntakeForms\"", ")", ";", "var", "waitModal", ";", "var", "dfd", "=", "$", ".", "Deferred", "(", ")", ".", "resolve", "(", ")", ";", "myData", ".", "forms", ".", "forEach", "(", "function", "(", "formValue", ")", "{", "var", "formId", "=", "formValue", ".", "get_lookupValue", "(", ")", ";", "dfd", "=", "dfd", ".", "then", "(", "function", "(", ")", "{", "var", "friendlyName", "=", "findFriendlyName", "(", "myData", ",", "formId", ")", ";", "waitModal", "=", "showGeneratingFormsDialog", "(", "myData", ",", "friendlyName", ")", ";", "return", "callPrefillPatt", "(", "myData", ",", "formId", ")", ";", "}", ")", ";", "dfd", ".", "done", "(", "function", "(", ")", "{", "waitModal", ".", "close", "(", ")", ";", "}", ")", ";", "dfd", ".", "fail", "(", "function", "(", ")", "{", "waitModal", ".", "close", "(", ")", ";", "}", ")", ";", "}", ")", ";", "return", "dfd", ";", "}"], "original_docstring": "// Issues multiple print requests for a patient one form at a time (to reduce risk of server timeouts)\r", "comment": ["//Need async 'waterfall loop' to submit print requests for each form one at a time.\r", "//See: http://stackoverflow.com/questions/15504921/asynchronous-loop-of-jquery-deferreds-promises\r"], "docstring_tokens": ["Issues", "multiple", "print", "requests", "for", "a", "patient", "one", "form", "at", "a", "time", "(", "to", "reduce", "risk", "of", "server", "timeouts", ")"], "docstring": "Issues multiple print requests for a patient one form at a time (to reduce risk of server timeouts)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "myData", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Issues multiple print requests for a patient one form at a time (to reduce risk of server timeouts)", "short_docstring_tokens": ["Issues", "multiple", "print", "requests", "for", "a", "patient", "one", "form", "at", "a", "time", "(", "to", "reduce", "risk", "of", "server", "timeouts", ")"], "original_string": "function printPatientIntakeForms(myData) {\r\n    console.log(\"in printPatientIntakeForms\");\r\n\r\n    //Need async 'waterfall loop' to submit print requests for each form one at a time.\r\n    //See: http://stackoverflow.com/questions/15504921/asynchronous-loop-of-jquery-deferreds-promises\r\n    var waitModal;\r\n\r\n    var dfd = $.Deferred().resolve();\r\n    myData.forms.forEach(function (formValue) {\r\n\r\n        var formId = formValue.get_lookupValue();\r\n\r\n        dfd = dfd.then(function () {\r\n\r\n            var friendlyName = findFriendlyName(myData, formId);\r\n            waitModal = showGeneratingFormsDialog(myData, friendlyName);\r\n\r\n            return callPrefillPatt(myData, formId);\r\n        });\r\n\r\n        dfd.done(function () {\r\n            waitModal.close();\r\n        });\r\n\r\n        dfd.fail(function () {\r\n            waitModal.close();\r\n        });\r\n\r\n    });\r\n\r\n    return dfd;\r\n}", "id": "e811e08404d3be215c0091544816ea8fd99819cd3d4e28010c284d4578161119"}
{"identifier": "deleteItemsFromFormsToPrintDocumentLibrary", "parameters": {"myData": null, "webServerRelativeUrl": null}, "return_type": "<not_specific>", "repo": "ThePrior/Scripts", "path": "PrefillPatientFormExtended.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "594fef9e5365f98d9bb8de6cbf4920318f24062e", "ext": "js", "size": 39300, "code": "function deleteItemsFromFormsToPrintDocumentLibrary(myData, webServerRelativeUrl) {\n    var clientContext = SP.ClientContext.get_current();\n    var oWebsite = clientContext.get_web();\n    myData.filesToDelete = [];\n    for (var i = 0; i < myData.forms.length; i++) {\n        var formValue = myData.forms[i];\n        var formId = formValue.get_lookupValue();\n        console.log(\"formId = \" + formId + \", lookupId = \" + formValue.get_lookupId());\n        deleteSingleItemFromFormsToPrint(clientContext, myData, formId, oWebsite, webServerRelativeUrl);\n    }\n    var deferred = $.Deferred();\n    clientContext.executeQueryAsync(function () {\n        deferred.resolve();\n    },\n\t\tfunction (sender, args) {\n\t\t    deferred.reject(args.get_message());\n\t\t}\n\t);\n    return deferred.promise();\n}", "code_tokens": ["function", "deleteItemsFromFormsToPrintDocumentLibrary", "(", "myData", ",", "webServerRelativeUrl", ")", "{", "var", "clientContext", "=", "SP", ".", "ClientContext", ".", "get_current", "(", ")", ";", "var", "oWebsite", "=", "clientContext", ".", "get_web", "(", ")", ";", "myData", ".", "filesToDelete", "=", "[", "]", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "myData", ".", "forms", ".", "length", ";", "i", "++", ")", "{", "var", "formValue", "=", "myData", ".", "forms", "[", "i", "]", ";", "var", "formId", "=", "formValue", ".", "get_lookupValue", "(", ")", ";", "console", ".", "log", "(", "\"formId = \"", "+", "formId", "+", "\", lookupId = \"", "+", "formValue", ".", "get_lookupId", "(", ")", ")", ";", "deleteSingleItemFromFormsToPrint", "(", "clientContext", ",", "myData", ",", "formId", ",", "oWebsite", ",", "webServerRelativeUrl", ")", ";", "}", "var", "deferred", "=", "$", ".", "Deferred", "(", ")", ";", "clientContext", ".", "executeQueryAsync", "(", "function", "(", ")", "{", "deferred", ".", "resolve", "(", ")", ";", "}", ",", "function", "(", "sender", ",", "args", ")", "{", "deferred", ".", "reject", "(", "args", ".", "get_message", "(", ")", ")", ";", "}", ")", ";", "return", "deferred", ".", "promise", "(", ")", ";", "}"], "original_docstring": "// Delete any exisiting print requests for the same form and patient.\r", "comment": ["//TODO: Get form names from daily list.\r"], "docstring_tokens": ["Delete", "any", "exisiting", "print", "requests", "for", "the", "same", "form", "and", "patient", "."], "docstring": "Delete any exisiting print requests for the same form and patient.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "myData", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "webServerRelativeUrl", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Delete any exisiting print requests for the same form and patient.", "short_docstring_tokens": ["Delete", "any", "exisiting", "print", "requests", "for", "the", "same", "form", "and", "patient", "."], "original_string": "function deleteItemsFromFormsToPrintDocumentLibrary(myData, webServerRelativeUrl) {\r\n    var clientContext = SP.ClientContext.get_current();\r\n    var oWebsite = clientContext.get_web();\r\n\r\n    myData.filesToDelete = [];\r\n\r\n    //TODO: Get form names from daily list.\r\n    for (var i = 0; i < myData.forms.length; i++) {\r\n        var formValue = myData.forms[i];\r\n        var formId = formValue.get_lookupValue();\r\n\r\n        console.log(\"formId = \" + formId + \", lookupId = \" + formValue.get_lookupId());\r\n        deleteSingleItemFromFormsToPrint(clientContext, myData, formId, oWebsite, webServerRelativeUrl);\r\n    }\r\n\r\n    var deferred = $.Deferred();\r\n    clientContext.executeQueryAsync(function () {\r\n        deferred.resolve();\r\n    },\r\n\t\tfunction (sender, args) {\r\n\t\t    deferred.reject(args.get_message());\r\n\t\t}\r\n\t);\r\n\r\n    return deferred.promise();\r\n}", "id": "dc75c9c7b167e8276ba3c5373abe203699b81c127202d3f64667a57219c5bebc"}
{"identifier": "showFormsToSelect", "parameters": {"myData": null}, "return_type": "<not_specific>", "repo": "ThePrior/Scripts", "path": "PrefillPatientFormExtended.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "594fef9e5365f98d9bb8de6cbf4920318f24062e", "ext": "js", "size": 39300, "code": "function showFormsToSelect(myData) {\n    var reAddClonedFormWrapper = (function () {\n        var privatecopyOfPrintSelectedForms = $(\"#divPrintSelectedFormsContainer\").clone(true, true);\n        var execute = function () {\n            jQuery('#s4-bodyContainer').append(privatecopyOfPrintSelectedForms);\n        };\n        return {\n            execute: execute\n        }\n    })();\n    var output = [];\n    for (var i = 0; i < myData.forms.length; i++) {\n        var formValue = myData.forms[i];\n        var formId = formValue.get_lookupValue();\n        var friendlyName = findFriendlyName(myData, formId);\n        output.push('<option value=\"' + formId + '\">' + friendlyName + '</option>');\n        console.log(\"formId = \" + formId);\n    }\n    $('#selectForms').html(output.join(''));\n    var selectHeight = parseInt($(\"#selectForms option\").length + 1) * 30;\n    var dialogHeight = selectHeight + 40;\n    divPrintSelectedFormsContainer.style.display = \"inline\";\n    var options = {\n        html: divPrintSelectedFormsContainer,\n        title: 'Print Patient Forms',\n        width: 380,\n        height: dialogHeight,\n        args: JSON.stringify(myData),\n        autoSize: false,\n        dialogReturnValueCallback: reAddClonedFormWrapper.execute\n    };\n    modalDialog = SP.UI.ModalDialog.showModalDialog(options);\n    var mySelectForms = $('#selectForms').chosen({\n        placeholder_text_multiple: \"Select forms...\",\n    });\n}", "code_tokens": ["function", "showFormsToSelect", "(", "myData", ")", "{", "var", "reAddClonedFormWrapper", "=", "(", "function", "(", ")", "{", "var", "privatecopyOfPrintSelectedForms", "=", "$", "(", "\"#divPrintSelectedFormsContainer\"", ")", ".", "clone", "(", "true", ",", "true", ")", ";", "var", "execute", "=", "function", "(", ")", "{", "jQuery", "(", "'#s4-bodyContainer'", ")", ".", "append", "(", "privatecopyOfPrintSelectedForms", ")", ";", "}", ";", "return", "{", "execute", ":", "execute", "}", "}", ")", "(", ")", ";", "var", "output", "=", "[", "]", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "myData", ".", "forms", ".", "length", ";", "i", "++", ")", "{", "var", "formValue", "=", "myData", ".", "forms", "[", "i", "]", ";", "var", "formId", "=", "formValue", ".", "get_lookupValue", "(", ")", ";", "var", "friendlyName", "=", "findFriendlyName", "(", "myData", ",", "formId", ")", ";", "output", ".", "push", "(", "'<option value=\"'", "+", "formId", "+", "'\">'", "+", "friendlyName", "+", "'</option>'", ")", ";", "console", ".", "log", "(", "\"formId = \"", "+", "formId", ")", ";", "}", "$", "(", "'#selectForms'", ")", ".", "html", "(", "output", ".", "join", "(", "''", ")", ")", ";", "var", "selectHeight", "=", "parseInt", "(", "$", "(", "\"#selectForms option\"", ")", ".", "length", "+", "1", ")", "*", "30", ";", "var", "dialogHeight", "=", "selectHeight", "+", "40", ";", "divPrintSelectedFormsContainer", ".", "style", ".", "display", "=", "\"inline\"", ";", "var", "options", "=", "{", "html", ":", "divPrintSelectedFormsContainer", ",", "title", ":", "'Print Patient Forms'", ",", "width", ":", "380", ",", "height", ":", "dialogHeight", ",", "args", ":", "JSON", ".", "stringify", "(", "myData", ")", ",", "autoSize", ":", "false", ",", "dialogReturnValueCallback", ":", "reAddClonedFormWrapper", ".", "execute", "}", ";", "modalDialog", "=", "SP", ".", "UI", ".", "ModalDialog", ".", "showModalDialog", "(", "options", ")", ";", "var", "mySelectForms", "=", "$", "(", "'#selectForms'", ")", ".", "chosen", "(", "{", "placeholder_text_multiple", ":", "\"Select forms...\"", ",", "}", ")", ";", "}"], "original_docstring": "/* Show a modalDialog with the contents of divPrintSelectedFormsContainer */", "comment": ["// showModalDialog removes the element passed in from the DOM\r", "// so we save a copy in a closure to add back later\r", "/*\r\n        var selectValues = {\r\n            \"test 1\": \"test 1\",\r\n            \"test 2\": \"test 2\",\r\n            \"test 3\": \"test 3\",\r\n            \"test 4\": \"test 4\",\r\n            \"test 5\": \"test 1\",\r\n            \"test 6\": \"test 2\",\r\n            \"test 7\": \"test 3\",\r\n            \"test 8\": \"test 4\"\r\n        };\r\n    \r\n        $.each(selectValues, function (key, value) {\r\n            output.push('<option value=\"' + key + '\">' + value + '</option>');\r\n        });\r\n    */", "// See http://stackoverflow.com/questions/12640828/setting-a-multiselect-chosen-boxs-height to improve behaviour of height.\r", "/*\r\n\t$('#selectForms').on('change', function(evt, params) {\r\n\t\t_resizeModalDialog(evt, params);\r\n\t});\r\n\t*/"], "docstring_tokens": ["Show", "a", "modalDialog", "with", "the", "contents", "of", "divPrintSelectedFormsContainer"], "docstring": "Show a modalDialog with the contents of divPrintSelectedFormsContainer", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "myData", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Show a modalDialog with the contents of divPrintSelectedFormsContainer", "short_docstring_tokens": ["Show", "a", "modalDialog", "with", "the", "contents", "of", "divPrintSelectedFormsContainer"], "original_string": "function showFormsToSelect(myData) {\r\n    // showModalDialog removes the element passed in from the DOM\r\n    // so we save a copy in a closure to add back later\r\n    var reAddClonedFormWrapper = (function () {\r\n        var privatecopyOfPrintSelectedForms = $(\"#divPrintSelectedFormsContainer\").clone(true, true);\r\n        var execute = function () {\r\n            jQuery('#s4-bodyContainer').append(privatecopyOfPrintSelectedForms);\r\n        };\r\n\r\n        return {\r\n            execute: execute\r\n        }\r\n    })();\r\n\r\n    var output = [];\r\n\r\n    /*\r\n        var selectValues = {\r\n            \"test 1\": \"test 1\",\r\n            \"test 2\": \"test 2\",\r\n            \"test 3\": \"test 3\",\r\n            \"test 4\": \"test 4\",\r\n            \"test 5\": \"test 1\",\r\n            \"test 6\": \"test 2\",\r\n            \"test 7\": \"test 3\",\r\n            \"test 8\": \"test 4\"\r\n        };\r\n    \r\n        $.each(selectValues, function (key, value) {\r\n            output.push('<option value=\"' + key + '\">' + value + '</option>');\r\n        });\r\n    */\r\n\r\n    for (var i = 0; i < myData.forms.length; i++) {\r\n        var formValue = myData.forms[i];\r\n        var formId = formValue.get_lookupValue();\r\n\r\n        var friendlyName = findFriendlyName(myData, formId);\r\n        output.push('<option value=\"' + formId + '\">' + friendlyName + '</option>');\r\n\r\n        console.log(\"formId = \" + formId);\r\n    }\r\n\r\n    $('#selectForms').html(output.join(''));\r\n\r\n    var selectHeight = parseInt($(\"#selectForms option\").length + 1) * 30;\r\n    var dialogHeight = selectHeight + 40;\r\n\r\n    divPrintSelectedFormsContainer.style.display = \"inline\";\r\n\r\n    var options = {\r\n        html: divPrintSelectedFormsContainer,\r\n        title: 'Print Patient Forms',\r\n        width: 380,\r\n        height: dialogHeight,\r\n        args: JSON.stringify(myData),\r\n        autoSize: false,\r\n        dialogReturnValueCallback: reAddClonedFormWrapper.execute\r\n    };\r\n\r\n    modalDialog = SP.UI.ModalDialog.showModalDialog(options);\r\n\r\n    // See http://stackoverflow.com/questions/12640828/setting-a-multiselect-chosen-boxs-height to improve behaviour of height.\r\n    var mySelectForms = $('#selectForms').chosen({\r\n        placeholder_text_multiple: \"Select forms...\",\r\n    });\r\n\r\n    /*\r\n\t$('#selectForms').on('change', function(evt, params) {\r\n\t\t_resizeModalDialog(evt, params);\r\n\t});\r\n\t*/\r\n\r\n}", "id": "f23198e3bd978321ef6db5361fbd8f4c3544f5135e524cd59b26484aae0d22f2"}
{"identifier": "printSelectedFormsConcurrent", "parameters": {"data": null}, "return_type": null, "repo": "ThePrior/Scripts", "path": "PrefillPatientFormExtended.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "594fef9e5365f98d9bb8de6cbf4920318f24062e", "ext": "js", "size": 39300, "code": "function printSelectedFormsConcurrent(data) {\n    var myData = JSON.parse(data);\n    var selectedFormsArray = $(\"#selectForms\").val() || [];\n    console.log(\"selected forms: \" + selectedFormsArray.join());\n    SP.UI.ModalDialog.commonModalDialogClose(SP.UI.DialogResult.OK);\n    var msg;\n    if (selectedFormsArray.length === 1) {\n        msg = \"Generating form for \" + myData.EMR_PatientName;\n    } else {\n        msg = \"Generating \" + selectedFormsArray.length + \" forms for \" + myData.EMR_PatientName;\n    }\n    var waitModal = SP.UI.ModalDialog.showWaitScreenWithNoClose(\"Please wait...\", msg);\n    var deferreds = [];\n    for (var i = 0; i < selectedFormsArray.length; i++) {\n        deferreds.push(callPrefillPatt(myData, selectedFormsArray[i]));\n    }\n    $.when.apply($, deferreds).done(function () {\n        waitModal.close();\n    }\n\t);\n}", "code_tokens": ["function", "printSelectedFormsConcurrent", "(", "data", ")", "{", "var", "myData", "=", "JSON", ".", "parse", "(", "data", ")", ";", "var", "selectedFormsArray", "=", "$", "(", "\"#selectForms\"", ")", ".", "val", "(", ")", "||", "[", "]", ";", "console", ".", "log", "(", "\"selected forms: \"", "+", "selectedFormsArray", ".", "join", "(", ")", ")", ";", "SP", ".", "UI", ".", "ModalDialog", ".", "commonModalDialogClose", "(", "SP", ".", "UI", ".", "DialogResult", ".", "OK", ")", ";", "var", "msg", ";", "if", "(", "selectedFormsArray", ".", "length", "===", "1", ")", "{", "msg", "=", "\"Generating form for \"", "+", "myData", ".", "EMR_PatientName", ";", "}", "else", "{", "msg", "=", "\"Generating \"", "+", "selectedFormsArray", ".", "length", "+", "\" forms for \"", "+", "myData", ".", "EMR_PatientName", ";", "}", "var", "waitModal", "=", "SP", ".", "UI", ".", "ModalDialog", ".", "showWaitScreenWithNoClose", "(", "\"Please wait...\"", ",", "msg", ")", ";", "var", "deferreds", "=", "[", "]", ";", "for", "(", "var", "i", "=", "0", ";", "i", "<", "selectedFormsArray", ".", "length", ";", "i", "++", ")", "{", "deferreds", ".", "push", "(", "callPrefillPatt", "(", "myData", ",", "selectedFormsArray", "[", "i", "]", ")", ")", ";", "}", "$", ".", "when", ".", "apply", "(", "$", ",", "deferreds", ")", ".", "done", "(", "function", "(", ")", "{", "waitModal", ".", "close", "(", ")", ";", "}", ")", ";", "}"], "original_docstring": "//This version left in in case we ever scale out to multiple print servers.\r", "comment": ["//console.log(myData);\r", "//For each selected form make ajax call to print server. TODO: Needs testing!\r", "//TODO: async behaviour may give better UX. See: e.g. https://developers.google.com/web/fundamentals/getting-started/primers/promises, https://elgervanboxtel.nl/site/blog/xmlhttprequest-extended-with-promises\r"], "docstring_tokens": ["This", "version", "left", "in", "in", "case", "we", "ever", "scale", "out", "to", "multiple", "print", "servers", "."], "docstring": "This version left in in case we ever scale out to multiple print servers.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "data", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "This version left in in case we ever scale out to multiple print servers.", "short_docstring_tokens": ["This", "version", "left", "in", "in", "case", "we", "ever", "scale", "out", "to", "multiple", "print", "servers", "."], "original_string": "function printSelectedFormsConcurrent(data) {\r\n\r\n    var myData = JSON.parse(data);\r\n    //console.log(myData);\r\n\r\n    var selectedFormsArray = $(\"#selectForms\").val() || [];\r\n    console.log(\"selected forms: \" + selectedFormsArray.join());\r\n\r\n    SP.UI.ModalDialog.commonModalDialogClose(SP.UI.DialogResult.OK);\r\n\r\n    //For each selected form make ajax call to print server. TODO: Needs testing!\r\n    //TODO: async behaviour may give better UX. See: e.g. https://developers.google.com/web/fundamentals/getting-started/primers/promises, https://elgervanboxtel.nl/site/blog/xmlhttprequest-extended-with-promises\r\n\r\n    var msg;\r\n    if (selectedFormsArray.length === 1) {\r\n        msg = \"Generating form for \" + myData.EMR_PatientName;\r\n    } else {\r\n        msg = \"Generating \" + selectedFormsArray.length + \" forms for \" + myData.EMR_PatientName;\r\n    }\r\n\r\n    var waitModal = SP.UI.ModalDialog.showWaitScreenWithNoClose(\"Please wait...\", msg);\r\n\r\n    var deferreds = [];\r\n    for (var i = 0; i < selectedFormsArray.length; i++) {\r\n        deferreds.push(callPrefillPatt(myData, selectedFormsArray[i]));\r\n    }\r\n\r\n    $.when.apply($, deferreds).done(function () {\r\n        waitModal.close();\r\n    }\r\n\t);\r\n}", "id": "18944dd1fef40309119d90f6983981695b838844c5d036be22a0545721abae8d"}
{"identifier": "_resizeModalDialog", "parameters": {}, "return_type": null, "repo": "ThePrior/Scripts", "path": "PrefillPatientFormExtended.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "594fef9e5365f98d9bb8de6cbf4920318f24062e", "ext": "js", "size": 39300, "code": "function _resizeModalDialog() {\n    console.log(\"in _resizeModalDialog\");\n    var dlg = SP.UI.ModalDialog.get_childDialog();\n    if (dlg != null) {\n        if (!dlg.$Q_0 && dlg.get_$b_0()) {\n            dlg.autoSize();\n            var xPos, yPos, \n                win = SP.UI.Dialog.get_$1(), \n                xScroll = SP.UI.Dialog.$1x(win), \n                yScroll = SP.UI.Dialog.$20(win); \n            xPos = ((SP.UI.Dialog.$1P(win) - dlg.$3_0.offsetWidth) / 2) + xScroll;\n            if (xPos < xScroll + 10) { xPos = xScroll + 10; }\n            yPos = ((SP.UI.Dialog.$1O(win) - dlg.$3_0.offsetHeight) / 2) + yScroll;\n            if (yPos < yScroll + 10) { yPos = yScroll + 10; }\n            dlg.$K_0 = xPos;\n            dlg.$W_0 = yPos;\n            dlg.$p_0(dlg.$K_0, dlg.$W_0);\n            dlg.$1b_0();\n            dlg.$27_0();\n        }\n    }\n}", "code_tokens": ["function", "_resizeModalDialog", "(", ")", "{", "console", ".", "log", "(", "\"in _resizeModalDialog\"", ")", ";", "var", "dlg", "=", "SP", ".", "UI", ".", "ModalDialog", ".", "get_childDialog", "(", ")", ";", "if", "(", "dlg", "!=", "null", ")", "{", "if", "(", "!", "dlg", ".", "$Q_0", "&&", "dlg", ".", "get_$b_0", "(", ")", ")", "{", "dlg", ".", "autoSize", "(", ")", ";", "var", "xPos", ",", "yPos", ",", "win", "=", "SP", ".", "UI", ".", "Dialog", ".", "get_$1", "(", ")", ",", "xScroll", "=", "SP", ".", "UI", ".", "Dialog", ".", "$1x", "(", "win", ")", ",", "yScroll", "=", "SP", ".", "UI", ".", "Dialog", ".", "$20", "(", "win", ")", ";", "xPos", "=", "(", "(", "SP", ".", "UI", ".", "Dialog", ".", "$1P", "(", "win", ")", "-", "dlg", ".", "$3_0", ".", "offsetWidth", ")", "/", "2", ")", "+", "xScroll", ";", "if", "(", "xPos", "<", "xScroll", "+", "10", ")", "{", "xPos", "=", "xScroll", "+", "10", ";", "}", "yPos", "=", "(", "(", "SP", ".", "UI", ".", "Dialog", ".", "$1O", "(", "win", ")", "-", "dlg", ".", "$3_0", ".", "offsetHeight", ")", "/", "2", ")", "+", "yScroll", ";", "if", "(", "yPos", "<", "yScroll", "+", "10", ")", "{", "yPos", "=", "yScroll", "+", "10", ";", "}", "dlg", ".", "$K_0", "=", "xPos", ";", "dlg", ".", "$W_0", "=", "yPos", ";", "dlg", ".", "$p_0", "(", "dlg", ".", "$K_0", ",", "dlg", ".", "$W_0", ")", ";", "dlg", ".", "$1b_0", "(", ")", ";", "dlg", ".", "$27_0", "(", ")", ";", "}", "}", "}"], "original_docstring": "//NOT TESTED (uses private MS functions)\r", "comment": ["// get the top-most dialog\r", "// dlg.$Q_0 - is dialog maximized\r", "// dlg.get_$b_0() - is dialog a modal\r", "// resize the dialog\r", "//x & y co-ordinates to move modal to...\r", "// the very bottom browser window object\r", "// browser x-scroll pos\r", "// browser y-scroll pos\r", "//SP.UI.Dialog.$1P(win) - get browser viewport width         \r", "//SP.UI.Dialog.$1O(win) - get browser viewport height\r", "//dlg.$3_0 - modal's DOM element\r", "// calculate x-pos based on viewport and dialog width\r", "// if x-pos is out of view (content too wide), re-position to left edge + 10px\r", "// calculate y-pos based on viewport and dialog height\r", "// if x-pos is out of view (content too high), re-position to top edge + 10px\r", "// store dialog's new x-y co-ordinates\r", "// move dialog to x-y pos\r", "// set dialog title bar text width\r", "// size down the dialog width/height if it's larger than browser viewport\r"], "docstring_tokens": ["NOT", "TESTED", "(", "uses", "private", "MS", "functions", ")"], "docstring": "NOT TESTED (uses private MS functions)", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "NOT TESTED (uses private MS functions)", "short_docstring_tokens": ["NOT", "TESTED", "(", "uses", "private", "MS", "functions", ")"], "original_string": "function _resizeModalDialog() {\r\n    console.log(\"in _resizeModalDialog\");\r\n\r\n    // get the top-most dialog\r\n    var dlg = SP.UI.ModalDialog.get_childDialog();\r\n\r\n    if (dlg != null) {\r\n        // dlg.$Q_0 - is dialog maximized\r\n        // dlg.get_$b_0() - is dialog a modal\r\n\r\n        if (!dlg.$Q_0 && dlg.get_$b_0()) {\r\n            // resize the dialog\r\n            dlg.autoSize();\r\n\r\n            var xPos, yPos, //x & y co-ordinates to move modal to...\r\n                win = SP.UI.Dialog.get_$1(), // the very bottom browser window object\r\n                xScroll = SP.UI.Dialog.$1x(win), // browser x-scroll pos\r\n                yScroll = SP.UI.Dialog.$20(win); // browser y-scroll pos\r\n\r\n            //SP.UI.Dialog.$1P(win) - get browser viewport width         \r\n            //SP.UI.Dialog.$1O(win) - get browser viewport height\r\n            //dlg.$3_0 - modal's DOM element\r\n\r\n            // calculate x-pos based on viewport and dialog width\r\n            xPos = ((SP.UI.Dialog.$1P(win) - dlg.$3_0.offsetWidth) / 2) + xScroll;\r\n\r\n            // if x-pos is out of view (content too wide), re-position to left edge + 10px\r\n            if (xPos < xScroll + 10) { xPos = xScroll + 10; }\r\n\r\n            // calculate y-pos based on viewport and dialog height\r\n            yPos = ((SP.UI.Dialog.$1O(win) - dlg.$3_0.offsetHeight) / 2) + yScroll;\r\n\r\n            // if x-pos is out of view (content too high), re-position to top edge + 10px\r\n            if (yPos < yScroll + 10) { yPos = yScroll + 10; }\r\n\r\n            // store dialog's new x-y co-ordinates\r\n            dlg.$K_0 = xPos;\r\n            dlg.$W_0 = yPos;\r\n\r\n            // move dialog to x-y pos\r\n            dlg.$p_0(dlg.$K_0, dlg.$W_0);\r\n\r\n            // set dialog title bar text width\r\n            dlg.$1b_0();\r\n\r\n            // size down the dialog width/height if it's larger than browser viewport\r\n            dlg.$27_0();\r\n        }\r\n    }\r\n}", "id": "c6c459d29ae088d003cc00ef7f7abc86889f6fec2c82329d37781c197ac3142c"}
{"identifier": "activate", "parameters": {"context": null}, "return_type": null, "repo": "matt-deboer/vscode-head-file-guard", "path": "extension.js", "language": "JavaScript", "stars_count": 2.0, "issues_count": 4.0, "forks_count": 6.0, "license": ["MIT"], "hexsha": "36eef652158a1e44eec17d9ba8104cca647c12d0", "ext": "js", "size": 1183, "code": "function activate(context) {\n    console.log('Congratulations, your extension \"insertHeadFileGuard\" is now active!');\n    var disposable = vscode.commands.registerCommand('extension.headFileGuard.insertHeadFileGuard', command.insertFileHeaderGuard);\n    context.subscriptions.push(disposable);\n}", "code_tokens": ["function", "activate", "(", "context", ")", "{", "console", ".", "log", "(", "'Congratulations, your extension \"insertHeadFileGuard\" is now active!'", ")", ";", "var", "disposable", "=", "vscode", ".", "commands", ".", "registerCommand", "(", "'extension.headFileGuard.insertHeadFileGuard'", ",", "command", ".", "insertFileHeaderGuard", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "disposable", ")", ";", "}"], "original_docstring": "// your extension is activated the very first time the command is executed", "comment": ["// Use the console to output diagnostic information (console.log) and errors (console.error)", "// This line of code will only be executed once when your extension is activated", "// The command has been defined in the package.json file", "// Now provide the implementation of the command with  registerCommand", "// The commandId parameter must match the command field in package.json"], "docstring_tokens": ["your", "extension", "is", "activated", "the", "very", "first", "time", "the", "command", "is", "executed"], "docstring": "your extension is activated the very first time the command is executed", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "context", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "your extension is activated the very first time the command is executed", "short_docstring_tokens": ["your", "extension", "is", "activated", "the", "very", "first", "time", "the", "command", "is", "executed"], "original_string": "function activate(context) {\n\n    // Use the console to output diagnostic information (console.log) and errors (console.error)\n    // This line of code will only be executed once when your extension is activated\n    console.log('Congratulations, your extension \"insertHeadFileGuard\" is now active!');\n\n    // The command has been defined in the package.json file\n    // Now provide the implementation of the command with  registerCommand\n    // The commandId parameter must match the command field in package.json\n    var disposable = vscode.commands.registerCommand('extension.headFileGuard.insertHeadFileGuard', command.insertFileHeaderGuard);\n\n    context.subscriptions.push(disposable);\n}", "id": "57b7165740245c44b5a5e02c1b161ffd414f31e46ec7ef562aee3baf8d172d96"}
{"identifier": "emit", "parameters": {"ev": null, "msg": null, "cb": null}, "return_type": "<not_specific>", "repo": "yanzhiwei147/iAppSlicing", "path": "lib/tools.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": 1.0, "forks_count": NaN, "license": ["MIT"], "hexsha": "997b46f15ed543175f6fc17b9cb5d748c2948b79", "ext": "js", "size": 19738, "code": "emit(ev, msg, cb) {\n        this.events.emit(ev, msg);\n        if (typeof cb === 'function') {\n            return cb(msg);\n        }\n    }", "code_tokens": ["emit", "(", "ev", ",", "msg", ",", "cb", ")", "{", "this", ".", "events", ".", "emit", "(", "ev", ",", "msg", ")", ";", "if", "(", "typeof", "cb", "===", "'function'", ")", "{", "return", "cb", "(", "msg", ")", ";", "}", "}"], "original_docstring": "/* Event Wrapper API with cb support */", "comment": [], "docstring_tokens": ["Event", "Wrapper", "API", "with", "cb", "support"], "docstring": "Event Wrapper API with cb support", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "ev", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "msg", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "cb", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Event Wrapper API with cb support", "short_docstring_tokens": ["Event", "Wrapper", "API", "with", "cb", "support"], "original_string": "emit(ev, msg, cb) {\n        this.events.emit(ev, msg);\n        if (typeof cb === 'function') {\n            return cb(msg);\n        }\n    }", "id": "820a9c9ef308a990e8e08842a7d6cd7d9cd82113061c5748984c223d387b5692"}
{"identifier": "confirmUnsavedChanges", "parameters": {"onConfirm": null}, "return_type": null, "repo": "dnesov/editor", "path": "src/scripts/actions.js", "language": "JavaScript", "stars_count": 31.0, "issues_count": 35.0, "forks_count": 12.0, "license": ["MIT"], "hexsha": "8b2c8c31cfe48bff2c768f2a0c47bdfb6e3908f1", "ext": "js", "size": 16827, "code": "function confirmUnsavedChanges(onConfirm) {\n    if(util.getUnsavedChanges()) {\n        util.confirm(\n            'unsavedChangesConfirm', 'Hold Up!', \n            'There are unsaved changes in your level! Are you sure you want to quit?',\n            { buttonYes: 'Yes', buttonNo: 'No', onConfirm: onConfirm }\n        );\n    } else {\n        onConfirm(true);\n    }\n}", "code_tokens": ["function", "confirmUnsavedChanges", "(", "onConfirm", ")", "{", "if", "(", "util", ".", "getUnsavedChanges", "(", ")", ")", "{", "util", ".", "confirm", "(", "'unsavedChangesConfirm'", ",", "'Hold Up!'", ",", "'There are unsaved changes in your level! Are you sure you want to quit?'", ",", "{", "buttonYes", ":", "'Yes'", ",", "buttonNo", ":", "'No'", ",", "onConfirm", ":", "onConfirm", "}", ")", ";", "}", "else", "{", "onConfirm", "(", "true", ")", ";", "}", "}"], "original_docstring": "// and calls the \"onConfirm\" function with the first argument set to whether the user confirms or not", "comment": [], "docstring_tokens": ["and", "calls", "the", "\"", "onConfirm", "\"", "function", "with", "the", "first", "argument", "set", "to", "whether", "the", "user", "confirms", "or", "not"], "docstring": "and calls the \"onConfirm\" function with the first argument set to whether the user confirms or not", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "onConfirm", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "and calls the \"onConfirm\" function with the first argument set to whether the user confirms or not", "short_docstring_tokens": ["and", "calls", "the", "\"", "onConfirm", "\"", "function", "with", "the", "first", "argument", "set", "to", "whether", "the", "user", "confirms", "or", "not"], "original_string": "function confirmUnsavedChanges(onConfirm) {\n    if(util.getUnsavedChanges()) {\n        util.confirm(\n            'unsavedChangesConfirm', 'Hold Up!', \n            'There are unsaved changes in your level! Are you sure you want to quit?',\n            { buttonYes: 'Yes', buttonNo: 'No', onConfirm: onConfirm }\n        );\n    } else {\n        onConfirm(true);\n    }\n}", "id": "4c052bc7aefb3bcc0a3ceed23de9a5bae1edbaeff55818bf3c78c4afe965a7ae"}
{"identifier": "addRandomGreeting", "parameters": {}, "return_type": null, "repo": "tora20/sps", "path": "portfolio/src/main/webapp/script.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "3137ea3582966f7a2a5d6bcbb6344e6148fcd002", "ext": "js", "size": 1187, "code": "function addRandomGreeting() {\n  const facts =\n      ['I walked a full 20 miles in one day in support of the Walk for Hunger.',\n       'I was on TV before!', 'I love colorful Colorado (:', \n       'I enjoy kpop dance with college friends', 'I also go by Tora!',\n    'I can rollerblade and iceskate backwards'];\n  const randomFact = facts[Math.floor(Math.random() * facts.length)];\n  const greetingContainer = document.getElementById('greeting-container');\n  greetingContainer.innerText = randomFact;\n}", "code_tokens": ["function", "addRandomGreeting", "(", ")", "{", "const", "facts", "=", "[", "'I walked a full 20 miles in one day in support of the Walk for Hunger.'", ",", "'I was on TV before!'", ",", "'I love colorful Colorado (:'", ",", "'I enjoy kpop dance with college friends'", ",", "'I also go by Tora!'", ",", "'I can rollerblade and iceskate backwards'", "]", ";", "const", "randomFact", "=", "facts", "[", "Math", ".", "floor", "(", "Math", ".", "random", "(", ")", "*", "facts", ".", "length", ")", "]", ";", "const", "greetingContainer", "=", "document", ".", "getElementById", "(", "'greeting-container'", ")", ";", "greetingContainer", ".", "innerText", "=", "randomFact", ";", "}"], "original_docstring": "/**\n * Adds a random fact to the page.\n */", "comment": ["// Pick a random fact.", "// Add it to the page."], "docstring_tokens": ["Adds", "a", "random", "fact", "to", "the", "page", "."], "docstring": "Adds a random fact to the page.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Adds a random fact to the page.", "short_docstring_tokens": ["Adds", "a", "random", "fact", "to", "the", "page", "."], "original_string": "function addRandomGreeting() {\n  const facts =\n      ['I walked a full 20 miles in one day in support of the Walk for Hunger.',\n       'I was on TV before!', 'I love colorful Colorado (:', \n       'I enjoy kpop dance with college friends', 'I also go by Tora!',\n    'I can rollerblade and iceskate backwards'];\n\n  // Pick a random fact.\n  const randomFact = facts[Math.floor(Math.random() * facts.length)];\n\n  // Add it to the page.\n  const greetingContainer = document.getElementById('greeting-container');\n  greetingContainer.innerText = randomFact;\n}", "id": "b432726985fcea28a6e2ab3e9a38532f47a54a7233b86d2ad1133b10f5169a3d"}
{"identifier": "openViewer", "parameters": {}, "return_type": null, "repo": "wilsonify/Interactive_Data_Editor", "path": "src/js/functions.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["MIT"], "hexsha": "ee29bfbb875a47c91245c8594c794960afd9dd97", "ext": "js", "size": 26857, "code": "function openViewer() {\n    viewerWindow = new BrowserWindow({\n        show: false,\n        title: \"Interactive Data Editor\",\n        minWidth: 1200,\n        webPreferences: {\n            nodeIntegration: true,\n            enableRemoteModule: true\n        }\n    });\n    viewerWindow.maximize();\n    viewerWindow.loadURL(url.format({\n        pathname: path.join(__dirname, '3D_Viewer.html'),\n        protocol: 'file:',\n        slashes: true\n    }));\n    viewerWindow.on(\"closed\", function () { viewerWindow = null; exportAll=false })\n    viewerWindow.show();\n    viewerWindow.setMenuBarVisibility(false);\n    viewerWindow.webContents.once(\"dom-ready\", updateOnServer)\n}", "code_tokens": ["function", "openViewer", "(", ")", "{", "viewerWindow", "=", "new", "BrowserWindow", "(", "{", "show", ":", "false", ",", "title", ":", "\"Interactive Data Editor\"", ",", "minWidth", ":", "1200", ",", "webPreferences", ":", "{", "nodeIntegration", ":", "true", ",", "enableRemoteModule", ":", "true", "}", "}", ")", ";", "viewerWindow", ".", "maximize", "(", ")", ";", "viewerWindow", ".", "loadURL", "(", "url", ".", "format", "(", "{", "pathname", ":", "path", ".", "join", "(", "__dirname", ",", "'3D_Viewer.html'", ")", ",", "protocol", ":", "'file:'", ",", "slashes", ":", "true", "}", ")", ")", ";", "viewerWindow", ".", "on", "(", "\"closed\"", ",", "function", "(", ")", "{", "viewerWindow", "=", "null", ";", "exportAll", "=", "false", "}", ")", "viewerWindow", ".", "show", "(", ")", ";", "viewerWindow", ".", "setMenuBarVisibility", "(", "false", ")", ";", "viewerWindow", ".", "webContents", ".", "once", "(", "\"dom-ready\"", ",", "updateOnServer", ")", "}"], "original_docstring": "// this variable is used inside the update on server function", "comment": ["// if (!app.isPackaged) viewerWindow.webContents.openDevTools();"], "docstring_tokens": ["this", "variable", "is", "used", "inside", "the", "update", "on", "server", "function"], "docstring": "this variable is used inside the update on server function", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "this variable is used inside the update on server function", "short_docstring_tokens": ["this", "variable", "is", "used", "inside", "the", "update", "on", "server", "function"], "original_string": "function openViewer() {\n    viewerWindow = new BrowserWindow({\n        show: false,\n        title: \"Interactive Data Editor\",\n        minWidth: 1200,\n        webPreferences: {\n            nodeIntegration: true,\n            enableRemoteModule: true\n        }\n    });\n    viewerWindow.maximize();\n    viewerWindow.loadURL(url.format({\n        pathname: path.join(__dirname, '3D_Viewer.html'),\n        protocol: 'file:',\n        slashes: true\n    }));\n    viewerWindow.on(\"closed\", function () { viewerWindow = null; exportAll=false })\n    viewerWindow.show();\n    viewerWindow.setMenuBarVisibility(false);\n    // if (!app.isPackaged) viewerWindow.webContents.openDevTools();\n    viewerWindow.webContents.once(\"dom-ready\", updateOnServer)\n}", "id": "c173cad4cbc2057d581fcc19c5a84421267ce2fe17b30923191cac9db0d2fac4"}
{"identifier": "hypotenuse", "parameters": {"a": null, "b": null}, "return_type": "<not_specific>", "repo": "wilsonify/Interactive_Data_Editor", "path": "src/js/numeric.js", "language": "JavaScript", "stars_count": 25.0, "issues_count": 1.0, "forks_count": 6.0, "license": ["MIT"], "hexsha": "78a5abfa8b2edb9ef19e48e351cf2bb883256f21", "ext": "js", "size": 7792, "code": "function hypotenuse(a, b) {\n    var r = 0;\n    if (Math.abs(a) > Math.abs(b)) {\n      r = b / a;\n      return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n      r = a / b;\n      return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n}", "code_tokens": ["function", "hypotenuse", "(", "a", ",", "b", ")", "{", "var", "r", "=", "0", ";", "if", "(", "Math", ".", "abs", "(", "a", ")", ">", "Math", ".", "abs", "(", "b", ")", ")", "{", "r", "=", "b", "/", "a", ";", "return", "Math", ".", "abs", "(", "a", ")", "*", "Math", ".", "sqrt", "(", "1", "+", "r", "*", "r", ")", ";", "}", "if", "(", "b", "!==", "0", ")", "{", "r", "=", "a", "/", "b", ";", "return", "Math", ".", "abs", "(", "b", ")", "*", "Math", ".", "sqrt", "(", "1", "+", "r", "*", "r", ")", ";", "}", "return", "0", ";", "}"], "original_docstring": "//doesnot depend on the outside parameter, and solely depend on the given argument", "comment": [], "docstring_tokens": ["doesnot", "depend", "on", "the", "outside", "parameter", "and", "solely", "depend", "on", "the", "given", "argument"], "docstring": "doesnot depend on the outside parameter, and solely depend on the given argument", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "a", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "b", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "doesnot depend on the outside parameter, and solely depend on the given argument", "short_docstring_tokens": ["doesnot", "depend", "on", "the", "outside", "parameter", "and", "solely", "depend", "on", "the", "given", "argument"], "original_string": "function hypotenuse(a, b) {\n    var r = 0;\n    if (Math.abs(a) > Math.abs(b)) {\n      r = b / a;\n      return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n      r = a / b;\n      return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n}", "id": "df60056b286314dd27d135e9dfbf4aafed9cf9b6f232961d8145d197afb40711"}
{"identifier": "inverse", "parameters": {"A": null}, "return_type": "<not_specific>", "repo": "wilsonify/Interactive_Data_Editor", "path": "src/js/numeric.js", "language": "JavaScript", "stars_count": 25.0, "issues_count": 1.0, "forks_count": 6.0, "license": ["MIT"], "hexsha": "78a5abfa8b2edb9ef19e48e351cf2bb883256f21", "ext": "js", "size": 7792, "code": "function inverse(A){\n    var qr = JSON.parse(JSON.stringify(A))\n    var m = qr.length\n    var n = qr[0].length\n    var rdiag = new Array(n);\n    var i, j, k, s;\n    var X = new Array(m).fill(0).map(_ => new Array(m).fill(0))\n    for(let i =0; i<m;i++) X[i][i] = 1.0\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) nrm =hypotenuse(nrm, qr[i][k])\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) nrm = -nrm\n            for (i = k; i < m; i++) qr[i][k] /= nrm;\n            qr[k][k] +=1  \n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) s += qr[i][k] * qr[i][j];\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) qr[i][j] += s * qr[i][k] ;\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n    let count = X[0].length;\n    for (k = 0; k < n; k++) {\n        for (j = 0; j < count; j++) {\n            s = 0;\n            for (i = k; i < m; i++) s += qr[i][k] * X[i][j];\n            s = -s / qr[k][k];\n            for (i = k; i < m; i++) X[i][j] += s*qr[i][k]\n        }\n    }\n    for (k = n - 1; k >= 0; k--) {\n        for (j = 0; j < count; j++)  X[k][j] /= rdiag[k] \n        for (i = 0; i < k; i++) {\n            for (j = 0; j < count; j++) X[i][j] -=X[k][j]*qr[i][k]\n        }\n    }\n    return X\n}", "code_tokens": ["function", "inverse", "(", "A", ")", "{", "var", "qr", "=", "JSON", ".", "parse", "(", "JSON", ".", "stringify", "(", "A", ")", ")", "var", "m", "=", "qr", ".", "length", "var", "n", "=", "qr", "[", "0", "]", ".", "length", "var", "rdiag", "=", "new", "Array", "(", "n", ")", ";", "var", "i", ",", "j", ",", "k", ",", "s", ";", "var", "X", "=", "new", "Array", "(", "m", ")", ".", "fill", "(", "0", ")", ".", "map", "(", "_", "=>", "new", "Array", "(", "m", ")", ".", "fill", "(", "0", ")", ")", "for", "(", "let", "i", "=", "0", ";", "i", "<", "m", ";", "i", "++", ")", "X", "[", "i", "]", "[", "i", "]", "=", "1.0", "for", "(", "k", "=", "0", ";", "k", "<", "n", ";", "k", "++", ")", "{", "var", "nrm", "=", "0", ";", "for", "(", "i", "=", "k", ";", "i", "<", "m", ";", "i", "++", ")", "nrm", "=", "hypotenuse", "(", "nrm", ",", "qr", "[", "i", "]", "[", "k", "]", ")", "if", "(", "nrm", "!==", "0", ")", "{", "if", "(", "qr", "[", "k", "]", "[", "k", "]", "<", "0", ")", "nrm", "=", "-", "nrm", "for", "(", "i", "=", "k", ";", "i", "<", "m", ";", "i", "++", ")", "qr", "[", "i", "]", "[", "k", "]", "/=", "nrm", ";", "qr", "[", "k", "]", "[", "k", "]", "+=", "1", "for", "(", "j", "=", "k", "+", "1", ";", "j", "<", "n", ";", "j", "++", ")", "{", "s", "=", "0", ";", "for", "(", "i", "=", "k", ";", "i", "<", "m", ";", "i", "++", ")", "s", "+=", "qr", "[", "i", "]", "[", "k", "]", "*", "qr", "[", "i", "]", "[", "j", "]", ";", "s", "=", "-", "s", "/", "qr", "[", "k", "]", "[", "k", "]", ";", "for", "(", "i", "=", "k", ";", "i", "<", "m", ";", "i", "++", ")", "qr", "[", "i", "]", "[", "j", "]", "+=", "s", "*", "qr", "[", "i", "]", "[", "k", "]", ";", "}", "}", "rdiag", "[", "k", "]", "=", "-", "nrm", ";", "}", "let", "count", "=", "X", "[", "0", "]", ".", "length", ";", "for", "(", "k", "=", "0", ";", "k", "<", "n", ";", "k", "++", ")", "{", "for", "(", "j", "=", "0", ";", "j", "<", "count", ";", "j", "++", ")", "{", "s", "=", "0", ";", "for", "(", "i", "=", "k", ";", "i", "<", "m", ";", "i", "++", ")", "s", "+=", "qr", "[", "i", "]", "[", "k", "]", "*", "X", "[", "i", "]", "[", "j", "]", ";", "s", "=", "-", "s", "/", "qr", "[", "k", "]", "[", "k", "]", ";", "for", "(", "i", "=", "k", ";", "i", "<", "m", ";", "i", "++", ")", "X", "[", "i", "]", "[", "j", "]", "+=", "s", "*", "qr", "[", "i", "]", "[", "k", "]", "}", "}", "for", "(", "k", "=", "n", "-", "1", ";", "k", ">=", "0", ";", "k", "--", ")", "{", "for", "(", "j", "=", "0", ";", "j", "<", "count", ";", "j", "++", ")", "X", "[", "k", "]", "[", "j", "]", "/=", "rdiag", "[", "k", "]", "for", "(", "i", "=", "0", ";", "i", "<", "k", ";", "i", "++", ")", "{", "for", "(", "j", "=", "0", ";", "j", "<", "count", ";", "j", "++", ")", "X", "[", "i", "]", "[", "j", "]", "-=", "X", "[", "k", "]", "[", "j", "]", "*", "qr", "[", "i", "]", "[", "k", "]", "}", "}", "return", "X", "}"], "original_docstring": "// returns the inverse of A using QR decomposition", "comment": [], "docstring_tokens": ["returns", "the", "inverse", "of", "A", "using", "QR", "decomposition"], "docstring": "returns the inverse of A using QR decomposition", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "A", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "returns the inverse of A using QR decomposition", "short_docstring_tokens": ["returns", "the", "inverse", "of", "A", "using", "QR", "decomposition"], "original_string": "function inverse(A){\n    var qr = JSON.parse(JSON.stringify(A))\n    var m = qr.length\n    var n = qr[0].length\n    var rdiag = new Array(n);\n    var i, j, k, s;\n    var X = new Array(m).fill(0).map(_ => new Array(m).fill(0))\n    for(let i =0; i<m;i++) X[i][i] = 1.0\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) nrm =hypotenuse(nrm, qr[i][k])\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) nrm = -nrm\n            for (i = k; i < m; i++) qr[i][k] /= nrm;\n            qr[k][k] +=1  \n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) s += qr[i][k] * qr[i][j];\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) qr[i][j] += s * qr[i][k] ;\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    let count = X[0].length;\n\n    for (k = 0; k < n; k++) {\n        for (j = 0; j < count; j++) {\n            s = 0;\n            for (i = k; i < m; i++) s += qr[i][k] * X[i][j];\n            s = -s / qr[k][k];\n            for (i = k; i < m; i++) X[i][j] += s*qr[i][k]\n        }\n    }\n    for (k = n - 1; k >= 0; k--) {\n        for (j = 0; j < count; j++)  X[k][j] /= rdiag[k] \n        for (i = 0; i < k; i++) {\n            for (j = 0; j < count; j++) X[i][j] -=X[k][j]*qr[i][k]\n        }\n    }\n    return X\n}", "id": "39d6fa80a7cd04fe107b2c8224597f896081d95a1341e5f9d488a820d2b098f8"}
{"identifier": "Persona", "parameters": {"nombre": null, "apellido": null}, "return_type": "<not_specific>", "repo": "haroldSanchezb/clase", "path": "objetos/objetos5.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "d7848760912033b6eaf20010b0de983dc752fa5b", "ext": "js", "size": 1352, "code": "function Persona(nombre = '', apellido = '') {\n  const edad = 0;\n  this.nombre = nombre;\n  this.apellido = apellido;\n  this.nombreYApellido = function() {\n    return `${this.nombre} ${this.apellido}`;\n  }\n  this.soloNombre = () => {\n    return this.nombre;\n  }\n}", "code_tokens": ["function", "Persona", "(", "nombre", "=", "''", ",", "apellido", "=", "''", ")", "{", "const", "edad", "=", "0", ";", "this", ".", "nombre", "=", "nombre", ";", "this", ".", "apellido", "=", "apellido", ";", "this", ".", "nombreYApellido", "=", "function", "(", ")", "{", "return", "`", "${", "this", ".", "nombre", "}", "${", "this", ".", "apellido", "}", "`", ";", "}", "this", ".", "soloNombre", "=", "(", ")", "=>", "{", "return", "this", ".", "nombre", ";", "}", "}"], "original_docstring": "// nos permite tener un objeto personalizado", "comment": [], "docstring_tokens": ["nos", "permite", "tener", "un", "objeto", "personalizado"], "docstring": "nos permite tener un objeto personalizado", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "nombre", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "apellido", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "nos permite tener un objeto personalizado", "short_docstring_tokens": ["nos", "permite", "tener", "un", "objeto", "personalizado"], "original_string": "function Persona(nombre = '', apellido = '') {\n  const edad = 0;\n  this.nombre = nombre;\n  this.apellido = apellido;\n\n  this.nombreYApellido = function() {\n    return `${this.nombre} ${this.apellido}`;\n  }\n\n  this.soloNombre = () => {\n    return this.nombre;\n  }\n}", "id": "9a9d37976e62d7f1dc43f1f2a6f0fc4d43506926e66d9e8217424262a1ca4350"}
{"identifier": "createHighlightDirectiveLineTransformer", "parameters": {"languageCommentMap": null}, "return_type": "<not_specific>", "repo": "mdluo/gatsby-remark-vscode", "path": "src/transformers/highlightDirectiveLineTransformer.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "7c448aa13eb8c93e3d58981968acd3e8d7d4583a", "ext": "js", "size": 3323, "code": "function createHighlightDirectiveLineTransformer(languageCommentMap) {\n  return ({ line, language, state }) => {\n    const commentWrapper = getCommentForLanguage(language, languageCommentMap);\n    const isDirective = textIsHighlightDirective(line.text, commentWrapper);\n    if (isDirective('highlight-start')) {\n      return { state: { inHighlightRange: true } }; \n    }\n    if (isDirective('highlight-end')) {\n      return { state: { inHighlightRange: false } }; \n    }\n    if (isDirective('highlight-next-line')) {\n      return { state: { highlightNextLine: true } }; \n    }\n    if (\n      line.text.endsWith(commentWrapper('highlight-line')) ||\n      line.text.endsWith('// highlight-line') ||\n      (state && state.inHighlightRange)\n    ) {\n      return {\n        line: highlightLine(\n          line,\n          line.text.replace(commentWrapper('highlight-line'), '').replace('// highlight-line', '')\n        ),\n        state\n      };\n    }\n    if (state && state.highlightNextLine) {\n      return {\n        line: highlightLine(line),\n        state: { ...state, highlightNextLine: false }\n      };\n    }\n    return { line, state }; \n  };\n}", "code_tokens": ["function", "createHighlightDirectiveLineTransformer", "(", "languageCommentMap", ")", "{", "return", "(", "{", "line", ",", "language", ",", "state", "}", ")", "=>", "{", "const", "commentWrapper", "=", "getCommentForLanguage", "(", "language", ",", "languageCommentMap", ")", ";", "const", "isDirective", "=", "textIsHighlightDirective", "(", "line", ".", "text", ",", "commentWrapper", ")", ";", "if", "(", "isDirective", "(", "'highlight-start'", ")", ")", "{", "return", "{", "state", ":", "{", "inHighlightRange", ":", "true", "}", "}", ";", "}", "if", "(", "isDirective", "(", "'highlight-end'", ")", ")", "{", "return", "{", "state", ":", "{", "inHighlightRange", ":", "false", "}", "}", ";", "}", "if", "(", "isDirective", "(", "'highlight-next-line'", ")", ")", "{", "return", "{", "state", ":", "{", "highlightNextLine", ":", "true", "}", "}", ";", "}", "if", "(", "line", ".", "text", ".", "endsWith", "(", "commentWrapper", "(", "'highlight-line'", ")", ")", "||", "line", ".", "text", ".", "endsWith", "(", "'// highlight-line'", ")", "||", "(", "state", "&&", "state", ".", "inHighlightRange", ")", ")", "{", "return", "{", "line", ":", "highlightLine", "(", "line", ",", "line", ".", "text", ".", "replace", "(", "commentWrapper", "(", "'highlight-line'", ")", ",", "''", ")", ".", "replace", "(", "'// highlight-line'", ",", "''", ")", ")", ",", "state", "}", ";", "}", "if", "(", "state", "&&", "state", ".", "highlightNextLine", ")", "{", "return", "{", "line", ":", "highlightLine", "(", "line", ")", ",", "state", ":", "{", "...", "state", ",", "highlightNextLine", ":", "false", "}", "}", ";", "}", "return", "{", "line", ",", "state", "}", ";", "}", ";", "}"], "original_docstring": "/**\n * @param {object} languageCommentMap user-defined object mapping language keys to commenting functions\n * @returns {LineTransformer<HighlightCommentTransfomerState>}\n */", "comment": ["// no `line` - drop this line from output", "// again no `line`", "// again no `line`", "// return attrs with added class name, text with comment removed, current state", "// return unchanged text, attrs with added class name, and state with highlightNextLine set", "// to false but preserve inHighlightRange so that a misplaced 'highlight-next-line'", "// doesn't disrupt a highlight range", "// default: don\u2019t change anything, propagate state to next call"], "docstring_tokens": ["@param", "{", "object", "}", "languageCommentMap", "user", "-", "defined", "object", "mapping", "language", "keys", "to", "commenting", "functions", "@returns", "{", "LineTransformer", "}"], "docstring": "@param {object} languageCommentMap user-defined object mapping language keys to commenting functions\n@returns {LineTransformer}", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "languageCommentMap", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "@param {object} languageCommentMap user-defined object mapping language keys to commenting functions\n @returns {LineTransformer<HighlightCommentTransfomerState>}", "short_docstring_tokens": ["@param", "{", "object", "}", "languageCommentMap", "user", "-", "defined", "object", "mapping", "language", "keys", "to", "commenting", "functions", "@returns", "{", "LineTransformer<HighlightCommentTransfomerState", ">", "}"], "original_string": "function createHighlightDirectiveLineTransformer(languageCommentMap) {\n  return ({ line, language, state }) => {\n    const commentWrapper = getCommentForLanguage(language, languageCommentMap);\n    const isDirective = textIsHighlightDirective(line.text, commentWrapper);\n    if (isDirective('highlight-start')) {\n      return { state: { inHighlightRange: true } }; // no `line` - drop this line from output\n    }\n    if (isDirective('highlight-end')) {\n      return { state: { inHighlightRange: false } }; // again no `line`\n    }\n    if (isDirective('highlight-next-line')) {\n      return { state: { highlightNextLine: true } }; // again no `line`\n    }\n    if (\n      line.text.endsWith(commentWrapper('highlight-line')) ||\n      line.text.endsWith('// highlight-line') ||\n      (state && state.inHighlightRange)\n    ) {\n      // return attrs with added class name, text with comment removed, current state\n      return {\n        line: highlightLine(\n          line,\n          line.text.replace(commentWrapper('highlight-line'), '').replace('// highlight-line', '')\n        ),\n        state\n      };\n    }\n    if (state && state.highlightNextLine) {\n      // return unchanged text, attrs with added class name, and state with highlightNextLine set\n      // to false but preserve inHighlightRange so that a misplaced 'highlight-next-line'\n      // doesn't disrupt a highlight range\n      return {\n        line: highlightLine(line),\n        state: { ...state, highlightNextLine: false }\n      };\n    }\n    return { line, state }; // default: don\u2019t change anything, propagate state to next call\n  };\n}", "id": "b0f03148443ae772ecd3843055a518b90d415d08bb30810fa1805ac0930e472c"}
{"identifier": "ReAxios", "parameters": {}, "return_type": null, "repo": "SandeepVattapparambil/reaxios", "path": "dist/reAxios.js", "language": "JavaScript", "stars_count": 4.0, "issues_count": 18.0, "forks_count": NaN, "license": ["MIT"], "hexsha": "70a7e0b285dd42a50638b4f09d0cc5af2f7467b8", "ext": "js", "size": 12922, "code": "function ReAxios() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _classCallCheck(this, ReAxios);\n        this.options = Object.assign({}, options);\n        this.http = _axios2.default.create(options);\n    }", "code_tokens": ["function", "ReAxios", "(", ")", "{", "var", "options", "=", "arguments", ".", "length", ">", "0", "&&", "arguments", "[", "0", "]", "!==", "undefined", "?", "arguments", "[", "0", "]", ":", "{", "}", ";", "_classCallCheck", "(", "this", ",", "ReAxios", ")", ";", "this", ".", "options", "=", "Object", ".", "assign", "(", "{", "}", ",", "options", ")", ";", "this", ".", "http", "=", "_axios2", ".", "default", ".", "create", "(", "options", ")", ";", "}"], "original_docstring": "/**\n     * The class constructor\n     * @param {*} options - The options object for axios instance\n     */", "comment": [], "docstring_tokens": ["The", "class", "constructor", "@param", "{", "*", "}", "options", "-", "The", "options", "object", "for", "axios", "instance"], "docstring": "The class constructor\n@param {*} options - The options object for axios instance", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "The class constructor\n @param {*} options - The options object for axios instance", "short_docstring_tokens": ["The", "class", "constructor", "@param", "{", "*", "}", "options", "-", "The", "options", "object", "for", "axios", "instance"], "original_string": "function ReAxios() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        _classCallCheck(this, ReAxios);\n\n        this.options = Object.assign({}, options);\n        this.http = _axios2.default.create(options);\n    }", "id": "41d7f32e90dfd4fae63290d79fe79845f3497bb98b4f36b51ee670dc3daa7d5d"}
{"identifier": "defaults", "parameters": {"target": null, "src": null}, "return_type": "<not_specific>", "repo": "jeremyckahn/bezierizer", "path": "dist/shifty.js", "language": "JavaScript", "stars_count": 3.0, "issues_count": 2.0, "forks_count": 2.0, "license": ["MIT"], "hexsha": "edaaa80d0c849acd251e6e93126a9c0a47fa7b04", "ext": "js", "size": 40188, "code": "function defaults (target, src) {\n    each(src, function (prop) {\n      if (typeof target[prop] === 'undefined') {\n        target[prop] = src[prop];\n      }\n    });\n    return target;\n  }", "code_tokens": ["function", "defaults", "(", "target", ",", "src", ")", "{", "each", "(", "src", ",", "function", "(", "prop", ")", "{", "if", "(", "typeof", "target", "[", "prop", "]", "===", "'undefined'", ")", "{", "target", "[", "prop", "]", "=", "src", "[", "prop", "]", ";", "}", "}", ")", ";", "return", "target", ";", "}"], "original_docstring": "/*!\n   * Copies each property from src onto target, but only if the property to\n   * copy to target is undefined.\n   * @param {Object} target Missing properties in this Object are filled in\n   * @param {Object} src\n   */", "comment": [], "docstring_tokens": ["Copies", "each", "property", "from", "src", "onto", "target", "but", "only", "if", "the", "property", "to", "copy", "to", "target", "is", "undefined", ".", "@param", "{", "Object", "}", "target", "Missing", "properties", "in", "this", "Object", "are", "filled", "in", "@param", "{", "Object", "}", "src"], "docstring": "Copies each property from src onto target, but only if the property to\ncopy to target is undefined.\n@param {Object} target Missing properties in this Object are filled in\n@param {Object} src", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "target", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "src", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Copies each property from src onto target, but only if the property to\n copy to target is undefined.", "short_docstring_tokens": ["Copies", "each", "property", "from", "src", "onto", "target", "but", "only", "if", "the", "property", "to", "copy", "to", "target", "is", "undefined", "."], "original_string": "function defaults (target, src) {\n    each(src, function (prop) {\n      if (typeof target[prop] === 'undefined') {\n        target[prop] = src[prop];\n      }\n    });\n\n    return target;\n  }", "id": "29fde615d0a162ba78713e67ab9006dcec2e1d76499b1437b0bff8c40427dc02"}
{"identifier": "tweenProps", "parameters": {"forPosition": null, "currentState": null, "originalState": null, "targetState": null, "duration": null, "timestamp": null, "easing": null}, "return_type": "<not_specific>", "repo": "jeremyckahn/bezierizer", "path": "dist/shifty.js", "language": "JavaScript", "stars_count": 3.0, "issues_count": 2.0, "forks_count": 2.0, "license": ["MIT"], "hexsha": "edaaa80d0c849acd251e6e93126a9c0a47fa7b04", "ext": "js", "size": 40188, "code": "function tweenProps (forPosition, currentState, originalState, targetState,\n      duration, timestamp, easing) {\n    var normalizedPosition = (forPosition - timestamp) / duration;\n    var prop;\n    for (prop in currentState) {\n      if (currentState.hasOwnProperty(prop)) {\n          currentState[prop] = tweenProp(originalState[prop],\n              targetState[prop], formula[easing[prop]], normalizedPosition);\n      }\n    }\n    return currentState;\n  }", "code_tokens": ["function", "tweenProps", "(", "forPosition", ",", "currentState", ",", "originalState", ",", "targetState", ",", "duration", ",", "timestamp", ",", "easing", ")", "{", "var", "normalizedPosition", "=", "(", "forPosition", "-", "timestamp", ")", "/", "duration", ";", "var", "prop", ";", "for", "(", "prop", "in", "currentState", ")", "{", "if", "(", "currentState", ".", "hasOwnProperty", "(", "prop", ")", ")", "{", "currentState", "[", "prop", "]", "=", "tweenProp", "(", "originalState", "[", "prop", "]", ",", "targetState", "[", "prop", "]", ",", "formula", "[", "easing", "[", "prop", "]", "]", ",", "normalizedPosition", ")", ";", "}", "}", "return", "currentState", ";", "}"], "original_docstring": "/*!\n   * Calculates the interpolated tween values of an Object for a given\n   * timestamp.\n   * @param {Number} forPosition The position to compute the state for.\n   * @param {Object} currentState Current state properties.\n   * @param {Object} originalState: The original state properties the Object is\n   * tweening from.\n   * @param {Object} targetState: The destination state properties the Object\n   * is tweening to.\n   * @param {number} duration: The length of the tween in milliseconds.\n   * @param {number} timestamp: The UNIX epoch time at which the tween began.\n   * @param {Object} easing: This Object's keys must correspond to the keys in\n   * targetState.\n   */", "comment": [], "docstring_tokens": ["Calculates", "the", "interpolated", "tween", "values", "of", "an", "Object", "for", "a", "given", "timestamp", ".", "@param", "{", "Number", "}", "forPosition", "The", "position", "to", "compute", "the", "state", "for", ".", "@param", "{", "Object", "}", "currentState", "Current", "state", "properties", ".", "@param", "{", "Object", "}", "originalState", ":", "The", "original", "state", "properties", "the", "Object", "is", "tweening", "from", ".", "@param", "{", "Object", "}", "targetState", ":", "The", "destination", "state", "properties", "the", "Object", "is", "tweening", "to", ".", "@param", "{", "number", "}", "duration", ":", "The", "length", "of", "the", "tween", "in", "milliseconds", ".", "@param", "{", "number", "}", "timestamp", ":", "The", "UNIX", "epoch", "time", "at", "which", "the", "tween", "began", ".", "@param", "{", "Object", "}", "easing", ":", "This", "Object", "'", "s", "keys", "must", "correspond", "to", "the", "keys", "in", "targetState", "."], "docstring": "Calculates the interpolated tween values of an Object for a given\ntimestamp.\n@param {Number} forPosition The position to compute the state for.\n@param {Object} currentState Current state properties.\n@param {Object} originalState: The original state properties the Object is\ntweening from.\n@param {Object} targetState: The destination state properties the Object\nis tweening to.\n@param {number} duration: The length of the tween in milliseconds.\n@param {number} timestamp: The UNIX epoch time at which the tween began.\n@param {Object} easing: This Object's keys must correspond to the keys in\ntargetState.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "forPosition", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "currentState", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "originalState", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "targetState", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "duration", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "timestamp", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "easing", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Calculates the interpolated tween values of an Object for a given\n timestamp.", "short_docstring_tokens": ["Calculates", "the", "interpolated", "tween", "values", "of", "an", "Object", "for", "a", "given", "timestamp", "."], "original_string": "function tweenProps (forPosition, currentState, originalState, targetState,\n      duration, timestamp, easing) {\n    var normalizedPosition = (forPosition - timestamp) / duration;\n\n    var prop;\n    for (prop in currentState) {\n      if (currentState.hasOwnProperty(prop)) {\n          currentState[prop] = tweenProp(originalState[prop],\n              targetState[prop], formula[easing[prop]], normalizedPosition);\n      }\n    }\n\n    return currentState;\n  }", "id": "51fd5cfd2f5618c60f486b2d0d186424ec9dc642494f4df796f1312521543a8e"}
{"identifier": "applyFilter", "parameters": {"tweenable": null, "filterName": null, "args": null}, "return_type": null, "repo": "jeremyckahn/bezierizer", "path": "dist/shifty.js", "language": "JavaScript", "stars_count": 3.0, "issues_count": 2.0, "forks_count": 2.0, "license": ["MIT"], "hexsha": "edaaa80d0c849acd251e6e93126a9c0a47fa7b04", "ext": "js", "size": 40188, "code": "function applyFilter (tweenable, filterName, args) {\n    var filters = Tweenable.prototype.filter;\n    each(filters, function (name) {\n      if (filters[name][filterName]) {\n        filters[name][filterName].apply(tweenable, args);\n      }\n    });\n  }", "code_tokens": ["function", "applyFilter", "(", "tweenable", ",", "filterName", ",", "args", ")", "{", "var", "filters", "=", "Tweenable", ".", "prototype", ".", "filter", ";", "each", "(", "filters", ",", "function", "(", "name", ")", "{", "if", "(", "filters", "[", "name", "]", "[", "filterName", "]", ")", "{", "filters", "[", "name", "]", "[", "filterName", "]", ".", "apply", "(", "tweenable", ",", "args", ")", ";", "}", "}", ")", ";", "}"], "original_docstring": "/*!\n   * Applies a filter to Tweenable instance.\n   * @param {Tweenable} tweenable The `Tweenable` instance to call the filter\n   * upon.\n   * @param {String} filterName The name of the filter to apply.\n   * @param {Array} args The arguments to pass to the function in the specified\n   * filter.\n   */", "comment": [], "docstring_tokens": ["Applies", "a", "filter", "to", "Tweenable", "instance", ".", "@param", "{", "Tweenable", "}", "tweenable", "The", "`", "Tweenable", "`", "instance", "to", "call", "the", "filter", "upon", ".", "@param", "{", "String", "}", "filterName", "The", "name", "of", "the", "filter", "to", "apply", ".", "@param", "{", "Array", "}", "args", "The", "arguments", "to", "pass", "to", "the", "function", "in", "the", "specified", "filter", "."], "docstring": "Applies a filter to Tweenable instance.\n@param {Tweenable} tweenable The `Tweenable` instance to call the filter\nupon.\n@param {String} filterName The name of the filter to apply.\n@param {Array} args The arguments to pass to the function in the specified\nfilter.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "tweenable", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "filterName", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "args", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Applies a filter to Tweenable instance.", "short_docstring_tokens": ["Applies", "a", "filter", "to", "Tweenable", "instance", "."], "original_string": "function applyFilter (tweenable, filterName, args) {\n    var filters = Tweenable.prototype.filter;\n    each(filters, function (name) {\n      if (filters[name][filterName]) {\n        filters[name][filterName].apply(tweenable, args);\n      }\n    });\n  }", "id": "1b8df1b2ef47061be7f1faa5705c629efe4777deb79a322e16d3750da5102c88"}
{"identifier": "timeoutHandler", "parameters": {"tweenable": null, "timestamp": null, "duration": null, "currentState": null, "originalState": null, "targetState": null, "easing": null, "step": null}, "return_type": null, "repo": "jeremyckahn/bezierizer", "path": "dist/shifty.js", "language": "JavaScript", "stars_count": 3.0, "issues_count": 2.0, "forks_count": 2.0, "license": ["MIT"], "hexsha": "edaaa80d0c849acd251e6e93126a9c0a47fa7b04", "ext": "js", "size": 40188, "code": "function timeoutHandler (tweenable, timestamp, duration, currentState,\n      originalState, targetState, easing, step) {\n    timeoutHandler_endTime = timestamp + duration;\n    timeoutHandler_currentTime = Math.min(now(), timeoutHandler_endTime);\n    timeoutHandler_isEnded = timeoutHandler_currentTime >= timeoutHandler_endTime;\n    if (tweenable.isPlaying() && !timeoutHandler_isEnded) {\n      schedule(tweenable._timeoutHandler, UPDATE_TIME);\n      timeoutHandler_filterList.length = 0;\n      timeoutHandler_filterList.push(currentState);\n      timeoutHandler_filterList.push(originalState);\n      timeoutHandler_filterList.push(targetState);\n      timeoutHandler_filterList.push(easing);\n      applyFilter(tweenable, 'beforeTween', timeoutHandler_filterList);\n      tweenProps(timeoutHandler_currentTime, currentState, originalState,\n          targetState, duration, timestamp, easing);\n      applyFilter(tweenable, 'afterTween', timeoutHandler_filterList);\n      step(currentState);\n    } else if (timeoutHandler_isEnded) {\n      step(targetState);\n      tweenable.stop(true);\n    }\n  }", "code_tokens": ["function", "timeoutHandler", "(", "tweenable", ",", "timestamp", ",", "duration", ",", "currentState", ",", "originalState", ",", "targetState", ",", "easing", ",", "step", ")", "{", "timeoutHandler_endTime", "=", "timestamp", "+", "duration", ";", "timeoutHandler_currentTime", "=", "Math", ".", "min", "(", "now", "(", ")", ",", "timeoutHandler_endTime", ")", ";", "timeoutHandler_isEnded", "=", "timeoutHandler_currentTime", ">=", "timeoutHandler_endTime", ";", "if", "(", "tweenable", ".", "isPlaying", "(", ")", "&&", "!", "timeoutHandler_isEnded", ")", "{", "schedule", "(", "tweenable", ".", "_timeoutHandler", ",", "UPDATE_TIME", ")", ";", "timeoutHandler_filterList", ".", "length", "=", "0", ";", "timeoutHandler_filterList", ".", "push", "(", "currentState", ")", ";", "timeoutHandler_filterList", ".", "push", "(", "originalState", ")", ";", "timeoutHandler_filterList", ".", "push", "(", "targetState", ")", ";", "timeoutHandler_filterList", ".", "push", "(", "easing", ")", ";", "applyFilter", "(", "tweenable", ",", "'beforeTween'", ",", "timeoutHandler_filterList", ")", ";", "tweenProps", "(", "timeoutHandler_currentTime", ",", "currentState", ",", "originalState", ",", "targetState", ",", "duration", ",", "timestamp", ",", "easing", ")", ";", "applyFilter", "(", "tweenable", ",", "'afterTween'", ",", "timeoutHandler_filterList", ")", ";", "step", "(", "currentState", ")", ";", "}", "else", "if", "(", "timeoutHandler_isEnded", ")", "{", "step", "(", "targetState", ")", ";", "tweenable", ".", "stop", "(", "true", ")", ";", "}", "}"], "original_docstring": "/*!\n   * Handles the update logic for one step of a tween.\n   * @param {Tweenable} tweenable\n   * @param {number} timestamp\n   * @param {number} duration\n   * @param {Object} currentState\n   * @param {Object} originalState\n   * @param {Object} targetState\n   * @param {Object} easing\n   * @param {Function} step\n   */", "comment": [], "docstring_tokens": ["Handles", "the", "update", "logic", "for", "one", "step", "of", "a", "tween", "."], "docstring": "Handles the update logic for one step of a tween.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "tweenable", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "timestamp", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "duration", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "currentState", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "originalState", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "targetState", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "easing", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "step", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Handles the update logic for one step of a tween.", "short_docstring_tokens": ["Handles", "the", "update", "logic", "for", "one", "step", "of", "a", "tween", "."], "original_string": "function timeoutHandler (tweenable, timestamp, duration, currentState,\n      originalState, targetState, easing, step) {\n    timeoutHandler_endTime = timestamp + duration;\n    timeoutHandler_currentTime = Math.min(now(), timeoutHandler_endTime);\n    timeoutHandler_isEnded = timeoutHandler_currentTime >= timeoutHandler_endTime;\n\n    if (tweenable.isPlaying() && !timeoutHandler_isEnded) {\n      schedule(tweenable._timeoutHandler, UPDATE_TIME);\n\n      timeoutHandler_filterList.length = 0;\n      timeoutHandler_filterList.push(currentState);\n      timeoutHandler_filterList.push(originalState);\n      timeoutHandler_filterList.push(targetState);\n      timeoutHandler_filterList.push(easing);\n\n      applyFilter(tweenable, 'beforeTween', timeoutHandler_filterList);\n      tweenProps(timeoutHandler_currentTime, currentState, originalState,\n          targetState, duration, timestamp, easing);\n      applyFilter(tweenable, 'afterTween', timeoutHandler_filterList);\n\n      step(currentState);\n    } else if (timeoutHandler_isEnded) {\n      step(targetState);\n      tweenable.stop(true);\n    }\n\n  }", "id": "25a3bd8cb8f76c4bd1659a88b4c350dedbea29648baa6a0cf305517fb418740f"}
{"identifier": "Bezierizer", "parameters": {"container": null}, "return_type": null, "repo": "jeremyckahn/bezierizer", "path": "src/bezierizer.core.js", "language": "JavaScript", "stars_count": 3.0, "issues_count": 2.0, "forks_count": 2.0, "license": ["MIT"], "hexsha": "3ad502c98c4a2ea2eef88d6d19f691f3c2255867", "ext": "js", "size": 4952, "code": "function Bezierizer (container) {\n  this.$el = $(container);\n  this.$el.append($(HTML_TEMPLATE));\n  this._$canvasContainer = this.$el.find('.bezierizer-canvas-container');\n  this._$canvas = this._$canvasContainer.find('canvas');\n  this._$handleContainer = this.$el.find('.bezierizer-handle-container');\n  this._$handles = this._$handleContainer.find('.bezierizer-handle');\n  this._ctx = this._$canvas[0].getContext('2d');\n  this._$canvas[0].height = this._$canvas.height();\n  this._$canvas[0].width = this._$canvas.width();\n  this._$handles.dragon({\n    within: this._$handleContainer\n  });\n  this._points = {};\n  this.setHandlePositions({\n     x1: 0.25\n    ,y1: 0.5\n    ,x2: 0.75\n    ,y2: 0.5\n  });\n  this._initBindings();\n}", "code_tokens": ["function", "Bezierizer", "(", "container", ")", "{", "this", ".", "$el", "=", "$", "(", "container", ")", ";", "this", ".", "$el", ".", "append", "(", "$", "(", "HTML_TEMPLATE", ")", ")", ";", "this", ".", "_$canvasContainer", "=", "this", ".", "$el", ".", "find", "(", "'.bezierizer-canvas-container'", ")", ";", "this", ".", "_$canvas", "=", "this", ".", "_$canvasContainer", ".", "find", "(", "'canvas'", ")", ";", "this", ".", "_$handleContainer", "=", "this", ".", "$el", ".", "find", "(", "'.bezierizer-handle-container'", ")", ";", "this", ".", "_$handles", "=", "this", ".", "_$handleContainer", ".", "find", "(", "'.bezierizer-handle'", ")", ";", "this", ".", "_ctx", "=", "this", ".", "_$canvas", "[", "0", "]", ".", "getContext", "(", "'2d'", ")", ";", "this", ".", "_$canvas", "[", "0", "]", ".", "height", "=", "this", ".", "_$canvas", ".", "height", "(", ")", ";", "this", ".", "_$canvas", "[", "0", "]", ".", "width", "=", "this", ".", "_$canvas", ".", "width", "(", ")", ";", "this", ".", "_$handles", ".", "dragon", "(", "{", "within", ":", "this", ".", "_$handleContainer", "}", ")", ";", "this", ".", "_points", "=", "{", "}", ";", "this", ".", "setHandlePositions", "(", "{", "x1", ":", "0.25", ",", "y1", ":", "0.5", ",", "x2", ":", "0.75", ",", "y2", ":", "0.5", "}", ")", ";", "this", ".", "_initBindings", "(", ")", ";", "}"], "original_docstring": "/**\n * Creates a Bezierizer widget and inserts it into the DOM.\n * @param {Element} container The container element to insert the Bezierizer widget into.\n * @constructor\n */", "comment": [], "docstring_tokens": ["Creates", "a", "Bezierizer", "widget", "and", "inserts", "it", "into", "the", "DOM", ".", "@param", "{", "Element", "}", "container", "The", "container", "element", "to", "insert", "the", "Bezierizer", "widget", "into", ".", "@constructor"], "docstring": "Creates a Bezierizer widget and inserts it into the DOM.\n@param {Element} container The container element to insert the Bezierizer widget into.\n@constructor", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "container", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Creates a Bezierizer widget and inserts it into the DOM.", "short_docstring_tokens": ["Creates", "a", "Bezierizer", "widget", "and", "inserts", "it", "into", "the", "DOM", "."], "original_string": "function Bezierizer (container) {\n  this.$el = $(container);\n  this.$el.append($(HTML_TEMPLATE));\n\n  this._$canvasContainer = this.$el.find('.bezierizer-canvas-container');\n  this._$canvas = this._$canvasContainer.find('canvas');\n  this._$handleContainer = this.$el.find('.bezierizer-handle-container');\n  this._$handles = this._$handleContainer.find('.bezierizer-handle');\n\n  this._ctx = this._$canvas[0].getContext('2d');\n  this._$canvas[0].height = this._$canvas.height();\n  this._$canvas[0].width = this._$canvas.width();\n\n  this._$handles.dragon({\n    within: this._$handleContainer\n  });\n\n  this._points = {};\n  this.setHandlePositions({\n     x1: 0.25\n    ,y1: 0.5\n    ,x2: 0.75\n    ,y2: 0.5\n  });\n\n  this._initBindings();\n}", "id": "b099ed7198815b653e1ef490f3edefb0ab960b190381ea860d4c53593f93da39"}
{"identifier": "render", "parameters": {"elementArray": null}, "return_type": "<not_specific>", "repo": "bradlm/techday-pokedex", "path": "misc/render.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "f8bc7706f3e3395bfda29defa8e50951799427a5", "ext": "js", "size": 432, "code": "function render (elementArray = ['']) {\n  if(!Array.isArray(elementArray)) {\n    elementArray = [elementArray];\n  }\n  document.querySelector(\"#App\").innerHTML = `\n    <h1>Pokedex App</h1>\n    <div id=\"pokemon-info\">\n      ${\n        elementArray.reduce(function (a,b) {\n          return a + b;\n        })\n      }\n    </div>\n  `;\n}", "code_tokens": ["function", "render", "(", "elementArray", "=", "[", "''", "]", ")", "{", "if", "(", "!", "Array", ".", "isArray", "(", "elementArray", ")", ")", "{", "elementArray", "=", "[", "elementArray", "]", ";", "}", "document", ".", "querySelector", "(", "\"#App\"", ")", ".", "innerHTML", "=", "`", "${", "elementArray", ".", "reduce", "(", "function", "(", "a", ",", "b", ")", "{", "return", "a", "+", "b", ";", "}", ")", "}", "`", ";", "}"], "original_docstring": "/** \n * render prints, or 'renders', items to the screen\n * It can take an array or a single value */", "comment": [], "docstring_tokens": ["render", "prints", "or", "'", "renders", "'", "items", "to", "the", "screen", "It", "can", "take", "an", "array", "or", "a", "single", "value"], "docstring": "render prints, or 'renders', items to the screen\nIt can take an array or a single value", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "elementArray", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "render prints, or 'renders', items to the screen\n It can take an array or a single value", "short_docstring_tokens": ["render", "prints", "or", "'", "renders", "'", "items", "to", "the", "screen", "It", "can", "take", "an", "array", "or", "a", "single", "value"], "original_string": "function render (elementArray = ['']) {\n  if(!Array.isArray(elementArray)) {\n    elementArray = [elementArray];\n  }\n  document.querySelector(\"#App\").innerHTML = `\n    <h1>Pokedex App</h1>\n    <div id=\"pokemon-info\">\n      ${\n        elementArray.reduce(function (a,b) {\n          return a + b;\n        })\n      }\n    </div>\n  `;\n}", "id": "5fbcf32dade96efaf11b4f5e1f863f653ccfe73ace1b6f53a26431ac910d5c08"}
{"identifier": "rollback", "parameters": {}, "return_type": "<not_specific>", "repo": "bgentry/ember-concurrency-changeset", "path": "addon/utils/changeset.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ccbddeb1db23fd1f526f60876e2ee638f29ba861", "ext": "js", "size": 10998, "code": "rollback() {\n    let relayCache = get(this, RELAY_CACHE);\n    for (let key in relayCache) relayCache[key].rollback();\n    let keys = this._rollbackKeys();\n    set(this, RELAY_CACHE, {});\n    set(this, CHANGES, {});\n    set(this, ERRORS, {});\n    this._notifyVirtualProperties(keys);\n    this.trigger(AFTER_ROLLBACK_EVENT);\n    return this;\n  }", "code_tokens": ["rollback", "(", ")", "{", "let", "relayCache", "=", "get", "(", "this", ",", "RELAY_CACHE", ")", ";", "for", "(", "let", "key", "in", "relayCache", ")", "relayCache", "[", "key", "]", ".", "rollback", "(", ")", ";", "let", "keys", "=", "this", ".", "_rollbackKeys", "(", ")", ";", "set", "(", "this", ",", "RELAY_CACHE", ",", "{", "}", ")", ";", "set", "(", "this", ",", "CHANGES", ",", "{", "}", ")", ";", "set", "(", "this", ",", "ERRORS", ",", "{", "}", ")", ";", "this", ".", "_notifyVirtualProperties", "(", "keys", ")", ";", "this", ".", "trigger", "(", "AFTER_ROLLBACK_EVENT", ")", ";", "return", "this", ";", "}"], "original_docstring": "/**\n   * Returns the changeset to its pristine state, and discards changes and\n   * errors.\n   */", "comment": ["// Notify keys contained in relays.", "// Get keys before reset.", "// Reset."], "docstring_tokens": ["Returns", "the", "changeset", "to", "its", "pristine", "state", "and", "discards", "changes", "and", "errors", "."], "docstring": "Returns the changeset to its pristine state, and discards changes and\nerrors.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Returns the changeset to its pristine state, and discards changes and\n errors.", "short_docstring_tokens": ["Returns", "the", "changeset", "to", "its", "pristine", "state", "and", "discards", "changes", "and", "errors", "."], "original_string": "rollback() {\n    // Notify keys contained in relays.\n    let relayCache = get(this, RELAY_CACHE);\n    for (let key in relayCache) relayCache[key].rollback();\n\n    // Get keys before reset.\n    let keys = this._rollbackKeys();\n\n    // Reset.\n    set(this, RELAY_CACHE, {});\n    set(this, CHANGES, {});\n    set(this, ERRORS, {});\n    this._notifyVirtualProperties(keys);\n\n    this.trigger(AFTER_ROLLBACK_EVENT);\n    return this;\n  }", "id": "c2954d2911626699b53186f8ee365d7351e0d36e84fc0928eb6d787a8e1ea96c"}
{"identifier": "validate", "parameters": {"key": null}, "return_type": "<not_specific>", "repo": "bgentry/ember-concurrency-changeset", "path": "addon/utils/changeset.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ccbddeb1db23fd1f526f60876e2ee638f29ba861", "ext": "js", "size": 10998, "code": "validate(key) {\n    let validationMap = this[VALIDATION_MAP];\n    if (Object.keys(validationMap).length === 0) {\n      return resolve(null);\n    }\n    let c = this;\n    const isPlain = true;\n    if (isNone(key)) {\n      let allPromises = Object.keys(validationMap).map(validationKey => {\n        return c._validate(validationKey, c._valueFor(validationKey, isPlain));\n      });\n      return all(allPromises);\n    }\n    return c._validate(key, c._valueFor(key, isPlain));\n  }", "code_tokens": ["validate", "(", "key", ")", "{", "let", "validationMap", "=", "this", "[", "VALIDATION_MAP", "]", ";", "if", "(", "Object", ".", "keys", "(", "validationMap", ")", ".", "length", "===", "0", ")", "{", "return", "resolve", "(", "null", ")", ";", "}", "let", "c", "=", "this", ";", "const", "isPlain", "=", "true", ";", "if", "(", "isNone", "(", "key", ")", ")", "{", "let", "allPromises", "=", "Object", ".", "keys", "(", "validationMap", ")", ".", "map", "(", "validationKey", "=>", "{", "return", "c", ".", "_validate", "(", "validationKey", ",", "c", ".", "_valueFor", "(", "validationKey", ",", "isPlain", ")", ")", ";", "}", ")", ";", "return", "all", "(", "allPromises", ")", ";", "}", "return", "c", ".", "_validate", "(", "key", ",", "c", ".", "_valueFor", "(", "key", ",", "isPlain", ")", ")", ";", "}"], "original_docstring": "/**\n   * Validates the changeset immediately against the validationMap passed in.\n   * If no key is passed into this method, it will validate all fields on the\n   * validationMap and set errors accordingly. Will throw an error if no\n   * validationMap is present.\n   */", "comment": [], "docstring_tokens": ["Validates", "the", "changeset", "immediately", "against", "the", "validationMap", "passed", "in", ".", "If", "no", "key", "is", "passed", "into", "this", "method", "it", "will", "validate", "all", "fields", "on", "the", "validationMap", "and", "set", "errors", "accordingly", ".", "Will", "throw", "an", "error", "if", "no", "validationMap", "is", "present", "."], "docstring": "Validates the changeset immediately against the validationMap passed in.\nIf no key is passed into this method, it will validate all fields on the\nvalidationMap and set errors accordingly. Will throw an error if no\nvalidationMap is present.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "key", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Validates the changeset immediately against the validationMap passed in.", "short_docstring_tokens": ["Validates", "the", "changeset", "immediately", "against", "the", "validationMap", "passed", "in", "."], "original_string": "validate(key) {\n    let validationMap = this[VALIDATION_MAP];\n    if (Object.keys(validationMap).length === 0) {\n      return resolve(null);\n    }\n\n    let c = this;\n    const isPlain = true;\n\n    if (isNone(key)) {\n      let allPromises = Object.keys(validationMap).map(validationKey => {\n        return c._validate(validationKey, c._valueFor(validationKey, isPlain));\n      });\n\n      return all(allPromises);\n    }\n\n    return c._validate(key, c._valueFor(key, isPlain));\n  }", "id": "6c190fd7772294bf96348be5a6e6036f876a8a44a21d9c0c011aa73598f09326"}
{"identifier": "addError", "parameters": {"key": null, "error": null}, "return_type": "<not_specific>", "repo": "bgentry/ember-concurrency-changeset", "path": "addon/utils/changeset.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ccbddeb1db23fd1f526f60876e2ee638f29ba861", "ext": "js", "size": 10998, "code": "addError(key, error) {\n    let newError;\n    if (isObject(error)) {\n      let errorLike = error;\n      assert(\"Error must have value.\", errorLike.hasOwnProperty(\"value\"));\n      assert(\n        \"Error must have validation.\",\n        errorLike.hasOwnProperty(\"validation\")\n      );\n      newError = new Err(errorLike.value, errorLike.validation);\n    } else {\n      let validation = error;\n      newError = new Err(get(this, key), validation);\n    }\n    let c = this;\n    let errors = get(this, ERRORS);\n    setNestedProperty(errors, key, newError);\n    c.notifyPropertyChange(ERRORS);\n    c.notifyPropertyChange(key);\n    return error;\n  }", "code_tokens": ["addError", "(", "key", ",", "error", ")", "{", "let", "newError", ";", "if", "(", "isObject", "(", "error", ")", ")", "{", "let", "errorLike", "=", "error", ";", "assert", "(", "\"Error must have value.\"", ",", "errorLike", ".", "hasOwnProperty", "(", "\"value\"", ")", ")", ";", "assert", "(", "\"Error must have validation.\"", ",", "errorLike", ".", "hasOwnProperty", "(", "\"validation\"", ")", ")", ";", "newError", "=", "new", "Err", "(", "errorLike", ".", "value", ",", "errorLike", ".", "validation", ")", ";", "}", "else", "{", "let", "validation", "=", "error", ";", "newError", "=", "new", "Err", "(", "get", "(", "this", ",", "key", ")", ",", "validation", ")", ";", "}", "let", "c", "=", "this", ";", "let", "errors", "=", "get", "(", "this", ",", "ERRORS", ")", ";", "setNestedProperty", "(", "errors", ",", "key", ",", "newError", ")", ";", "c", ".", "notifyPropertyChange", "(", "ERRORS", ")", ";", "c", ".", "notifyPropertyChange", "(", "key", ")", ";", "return", "error", ";", "}"], "original_docstring": "/**\n   * Manually add an error to the changeset. If there is an existing\n   * error or change for `key`, it will be overwritten.\n   */", "comment": ["// Construct new `Err` instance.", "// Add `key` to errors map.", "// Notify that `key` has changed.", "// Return passed-in `error`."], "docstring_tokens": ["Manually", "add", "an", "error", "to", "the", "changeset", ".", "If", "there", "is", "an", "existing", "error", "or", "change", "for", "`", "key", "`", "it", "will", "be", "overwritten", "."], "docstring": "Manually add an error to the changeset. If there is an existing\nerror or change for `key`, it will be overwritten.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "key", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "error", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Manually add an error to the changeset.", "short_docstring_tokens": ["Manually", "add", "an", "error", "to", "the", "changeset", "."], "original_string": "addError(key, error) {\n    // Construct new `Err` instance.\n    let newError;\n    if (isObject(error)) {\n      let errorLike = error;\n      assert(\"Error must have value.\", errorLike.hasOwnProperty(\"value\"));\n      assert(\n        \"Error must have validation.\",\n        errorLike.hasOwnProperty(\"validation\")\n      );\n      newError = new Err(errorLike.value, errorLike.validation);\n    } else {\n      let validation = error;\n      newError = new Err(get(this, key), validation);\n    }\n\n    let c = this;\n\n    // Add `key` to errors map.\n    let errors = get(this, ERRORS);\n    setNestedProperty(errors, key, newError);\n    c.notifyPropertyChange(ERRORS);\n\n    // Notify that `key` has changed.\n    c.notifyPropertyChange(key);\n\n    // Return passed-in `error`.\n    return error;\n  }", "id": "428b0aa78390419f6cde6b2e8d6ab996094019439f5ef5fe3c12e3875a240b15"}
{"identifier": "pushErrors", "parameters": {"key": null, "newErrors": null}, "return_type": "<not_specific>", "repo": "bgentry/ember-concurrency-changeset", "path": "addon/utils/changeset.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ccbddeb1db23fd1f526f60876e2ee638f29ba861", "ext": "js", "size": 10998, "code": "pushErrors(key, ...newErrors) {\n    let errors = get(this, ERRORS);\n    let existingError = errors[key] || new Err(null, []);\n    let validation = existingError.validation;\n    let value = get(this, key);\n    if (!isArray(validation) && isPresent(validation)) {\n      let v = existingError.validation;\n      existingError.validation = [v];\n    }\n    let v = existingError.validation;\n    validation = [...v, ...newErrors];\n    let c = this;\n    c.notifyPropertyChange(ERRORS);\n    c.notifyPropertyChange(key);\n    errors[key] = new Err(value, validation);\n    return { value, validation };\n  }", "code_tokens": ["pushErrors", "(", "key", ",", "...", "newErrors", ")", "{", "let", "errors", "=", "get", "(", "this", ",", "ERRORS", ")", ";", "let", "existingError", "=", "errors", "[", "key", "]", "||", "new", "Err", "(", "null", ",", "[", "]", ")", ";", "let", "validation", "=", "existingError", ".", "validation", ";", "let", "value", "=", "get", "(", "this", ",", "key", ")", ";", "if", "(", "!", "isArray", "(", "validation", ")", "&&", "isPresent", "(", "validation", ")", ")", "{", "let", "v", "=", "existingError", ".", "validation", ";", "existingError", ".", "validation", "=", "[", "v", "]", ";", "}", "let", "v", "=", "existingError", ".", "validation", ";", "validation", "=", "[", "...", "v", ",", "...", "newErrors", "]", ";", "let", "c", "=", "this", ";", "c", ".", "notifyPropertyChange", "(", "ERRORS", ")", ";", "c", ".", "notifyPropertyChange", "(", "key", ")", ";", "errors", "[", "key", "]", "=", "new", "Err", "(", "value", ",", "validation", ")", ";", "return", "{", "value", ",", "validation", "}", ";", "}"], "original_docstring": "/**\n   * Manually push multiple errors to the changeset as an array. If there is\n   * an existing error or change for `key`. it will be overwritten.\n   */", "comment": [], "docstring_tokens": ["Manually", "push", "multiple", "errors", "to", "the", "changeset", "as", "an", "array", ".", "If", "there", "is", "an", "existing", "error", "or", "change", "for", "`", "key", "`", ".", "it", "will", "be", "overwritten", "."], "docstring": "Manually push multiple errors to the changeset as an array. If there is\nan existing error or change for `key`. it will be overwritten.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "key", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "newErrors", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Manually push multiple errors to the changeset as an array.", "short_docstring_tokens": ["Manually", "push", "multiple", "errors", "to", "the", "changeset", "as", "an", "array", "."], "original_string": "pushErrors(key, ...newErrors) {\n    let errors = get(this, ERRORS);\n    let existingError = errors[key] || new Err(null, []);\n    let validation = existingError.validation;\n    let value = get(this, key);\n\n    if (!isArray(validation) && isPresent(validation)) {\n      let v = existingError.validation;\n      existingError.validation = [v];\n    }\n\n    let v = existingError.validation;\n    validation = [...v, ...newErrors];\n\n    let c = this;\n    c.notifyPropertyChange(ERRORS);\n    c.notifyPropertyChange(key);\n\n    errors[key] = new Err(value, validation);\n    return { value, validation };\n  }", "id": "d02e924a6ce601463975b92e0d0fe7a80918b70fca48bb0e45b8cdacfa41cf96"}
{"identifier": "_valueFor", "parameters": {"key": null, "plainValue": null}, "return_type": "<not_specific>", "repo": "bgentry/ember-concurrency-changeset", "path": "addon/utils/changeset.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ccbddeb1db23fd1f526f60876e2ee638f29ba861", "ext": "js", "size": 10998, "code": "_valueFor(key, plainValue = false) {\n    let changes = get(this, CHANGES);\n    let errors = get(this, ERRORS);\n    let content = get(this, CONTENT);\n    if (errors.hasOwnProperty(key)) {\n      let e = errors[key];\n      return e.value;\n    }\n    if (changes.hasOwnProperty(key)) {\n      let c = changes[key];\n      return c.value;\n    }\n    let original = get(content, key);\n    if (isObject(original) && !plainValue) {\n      let c = this;\n      let o = original;\n      return c._relayFor(key, o);\n    }\n    return original;\n  }", "code_tokens": ["_valueFor", "(", "key", ",", "plainValue", "=", "false", ")", "{", "let", "changes", "=", "get", "(", "this", ",", "CHANGES", ")", ";", "let", "errors", "=", "get", "(", "this", ",", "ERRORS", ")", ";", "let", "content", "=", "get", "(", "this", ",", "CONTENT", ")", ";", "if", "(", "errors", ".", "hasOwnProperty", "(", "key", ")", ")", "{", "let", "e", "=", "errors", "[", "key", "]", ";", "return", "e", ".", "value", ";", "}", "if", "(", "changes", ".", "hasOwnProperty", "(", "key", ")", ")", "{", "let", "c", "=", "changes", "[", "key", "]", ";", "return", "c", ".", "value", ";", "}", "let", "original", "=", "get", "(", "content", ",", "key", ")", ";", "if", "(", "isObject", "(", "original", ")", "&&", "!", "plainValue", ")", "{", "let", "c", "=", "this", ";", "let", "o", "=", "original", ";", "return", "c", ".", "_relayFor", "(", "key", ",", "o", ")", ";", "}", "return", "original", ";", "}"], "original_docstring": "/**\n   * Value for change or the original value.\n   */", "comment": [], "docstring_tokens": ["Value", "for", "change", "or", "the", "original", "value", "."], "docstring": "Value for change or the original value.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "key", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "plainValue", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Value for change or the original value.", "short_docstring_tokens": ["Value", "for", "change", "or", "the", "original", "value", "."], "original_string": "_valueFor(key, plainValue = false) {\n    let changes = get(this, CHANGES);\n    let errors = get(this, ERRORS);\n    let content = get(this, CONTENT);\n\n    if (errors.hasOwnProperty(key)) {\n      let e = errors[key];\n      return e.value;\n    }\n\n    if (changes.hasOwnProperty(key)) {\n      let c = changes[key];\n      return c.value;\n    }\n\n    let original = get(content, key);\n    if (isObject(original) && !plainValue) {\n      let c = this;\n      let o = original;\n      return c._relayFor(key, o);\n    }\n\n    return original;\n  }", "id": "0f59df7452bd305e2cb49abed663a4bb971fef605f624fdd25ab0d518a300e35"}
{"identifier": "_relayFor", "parameters": {"key": null, "value": null}, "return_type": "<not_specific>", "repo": "bgentry/ember-concurrency-changeset", "path": "addon/utils/changeset.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ccbddeb1db23fd1f526f60876e2ee638f29ba861", "ext": "js", "size": 10998, "code": "_relayFor(key, value) {\n    let cache = get(this, RELAY_CACHE);\n    if (!(key in cache)) {\n      cache[key] = Relay.create({ key, changeset: this, content: value });\n    }\n    return cache[key];\n  }", "code_tokens": ["_relayFor", "(", "key", ",", "value", ")", "{", "let", "cache", "=", "get", "(", "this", ",", "RELAY_CACHE", ")", ";", "if", "(", "!", "(", "key", "in", "cache", ")", ")", "{", "cache", "[", "key", "]", "=", "Relay", ".", "create", "(", "{", "key", ",", "changeset", ":", "this", ",", "content", ":", "value", "}", ")", ";", "}", "return", "cache", "[", "key", "]", ";", "}"], "original_docstring": "/**\n   * Construct a Relay instance for an object.\n   */", "comment": [], "docstring_tokens": ["Construct", "a", "Relay", "instance", "for", "an", "object", "."], "docstring": "Construct a Relay instance for an object.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "key", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "value", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Construct a Relay instance for an object.", "short_docstring_tokens": ["Construct", "a", "Relay", "instance", "for", "an", "object", "."], "original_string": "_relayFor(key, value) {\n    let cache = get(this, RELAY_CACHE);\n\n    if (!(key in cache)) {\n      cache[key] = Relay.create({ key, changeset: this, content: value });\n    }\n\n    return cache[key];\n  }", "id": "5bda33646526bfdb92d2c2ccbd56b8168c54dac301bf0be2582ac8ec299d84c1"}
{"identifier": "_rollbackKeys", "parameters": {}, "return_type": "<not_specific>", "repo": "bgentry/ember-concurrency-changeset", "path": "addon/utils/changeset.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ccbddeb1db23fd1f526f60876e2ee638f29ba861", "ext": "js", "size": 10998, "code": "_rollbackKeys() {\n    let changes = get(this, CHANGES);\n    let errors = get(this, ERRORS);\n    return emberArray([...Object.keys(changes), ...Object.keys(errors)]).uniq();\n  }", "code_tokens": ["_rollbackKeys", "(", ")", "{", "let", "changes", "=", "get", "(", "this", ",", "CHANGES", ")", ";", "let", "errors", "=", "get", "(", "this", ",", "ERRORS", ")", ";", "return", "emberArray", "(", "[", "...", "Object", ".", "keys", "(", "changes", ")", ",", "...", "Object", ".", "keys", "(", "errors", ")", "]", ")", ".", "uniq", "(", ")", ";", "}"], "original_docstring": "/**\n   * Gets the changes and error keys.\n   */", "comment": [], "docstring_tokens": ["Gets", "the", "changes", "and", "error", "keys", "."], "docstring": "Gets the changes and error keys.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Gets the changes and error keys.", "short_docstring_tokens": ["Gets", "the", "changes", "and", "error", "keys", "."], "original_string": "_rollbackKeys() {\n    let changes = get(this, CHANGES);\n    let errors = get(this, ERRORS);\n    return emberArray([...Object.keys(changes), ...Object.keys(errors)]).uniq();\n  }", "id": "fcb055b74f4d8328232af8cec4ce44e0576f27a5553c77d5ea617f39523fe9ee"}
{"identifier": "deepEqual", "parameters": {"obj1": null, "obj2": null}, "return_type": "<not_specific>", "repo": "gabrielsixel/eloquentJSExe", "path": "EloquentJS_Exe10.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "d424892db3ffb8d4069cf410870bd7bc455127aa", "ext": "js", "size": 1266, "code": "function deepEqual(obj1, obj2) {\n  if(obj1 === obj2) return true;\n  if( obj1 == null || typeof obj1 != \"object\" ||\n     obj2 == null || typeof obj2 != \"object\" )\n    return false;\n  var propsObj1 = 0, propsObj2 = 0;\n  for( var prop in obj1 )\n    propsObj1++;\n  for( var prop in obj2 ) {\n    propsObj2++;\n    if( !(prop in obj1) || !deepEqual( obj1[prop], obj2[prop] ) )\n      return false;\n  }\n  return propsObj1 === propsObj2;\n}", "code_tokens": ["function", "deepEqual", "(", "obj1", ",", "obj2", ")", "{", "if", "(", "obj1", "===", "obj2", ")", "return", "true", ";", "if", "(", "obj1", "==", "null", "||", "typeof", "obj1", "!=", "\"object\"", "||", "obj2", "==", "null", "||", "typeof", "obj2", "!=", "\"object\"", ")", "return", "false", ";", "var", "propsObj1", "=", "0", ",", "propsObj2", "=", "0", ";", "for", "(", "var", "prop", "in", "obj1", ")", "propsObj1", "++", ";", "for", "(", "var", "prop", "in", "obj2", ")", "{", "propsObj2", "++", ";", "if", "(", "!", "(", "prop", "in", "obj1", ")", "||", "!", "deepEqual", "(", "obj1", "[", "prop", "]", ",", "obj2", "[", "prop", "]", ")", ")", "return", "false", ";", "}", "return", "propsObj1", "===", "propsObj2", ";", "}"], "original_docstring": "//https://gist.github.com/sawant/cc7e74cea98ef6c5ab2f from who I got a lot.", "comment": ["// for the properties in obj2 if there are not in obj1 !(prop in obj1)", "// or if there"], "docstring_tokens": ["gist", ".", "github", ".", "com", "/", "sawant", "/", "cc7e74cea98ef6c5ab2f", "from", "who", "I", "got", "a", "lot", "."], "docstring": "gist.github.com/sawant/cc7e74cea98ef6c5ab2f from who I got a lot.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "obj1", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "obj2", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "https://gist.github.com/sawant/cc7e74cea98ef6c5ab2f from who I got a lot.", "short_docstring_tokens": ["https", ":", "//", "gist", ".", "github", ".", "com", "/", "sawant", "/", "cc7e74cea98ef6c5ab2f", "from", "who", "I", "got", "a", "lot", "."], "original_string": "function deepEqual(obj1, obj2) {\n  if(obj1 === obj2) return true;\n  if( obj1 == null || typeof obj1 != \"object\" ||\n     obj2 == null || typeof obj2 != \"object\" )\n    return false;\n\n  var propsObj1 = 0, propsObj2 = 0;\n\n  for( var prop in obj1 )\n    propsObj1++;\n\n  for( var prop in obj2 ) {\n    propsObj2++;\n\t// for the properties in obj2 if there are not in obj1 !(prop in obj1)\n    // or if there\n    if( !(prop in obj1) || !deepEqual( obj1[prop], obj2[prop] ) )\n      return false;\n  }\n\n  return propsObj1 === propsObj2;\n}", "id": "46138a3b88c544108e80f2bc9b1e993a05d24ddd7f94cfda0ad762ea8a3a1345"}
{"identifier": "min", "parameters": {"num1": null, "num2": null}, "return_type": "<not_specific>", "repo": "gabrielsixel/eloquentJSExe", "path": "EloquentJS_Exe4.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "6c74cd8b0954ab8db334cada08707704539cefce", "ext": "js", "size": 172, "code": "function min(num1, num2) {\n    if(num1 > num2)\n      return num2;\n    else\n      return num1;\n}", "code_tokens": ["function", "min", "(", "num1", ",", "num2", ")", "{", "if", "(", "num1", ">", "num2", ")", "return", "num2", ";", "else", "return", "num1", ";", "}"], "original_docstring": "// Write a function min that takes two arguments and returns their minimum.", "comment": [], "docstring_tokens": ["Write", "a", "function", "min", "that", "takes", "two", "arguments", "and", "returns", "their", "minimum", "."], "docstring": "Write a function min that takes two arguments and returns their minimum.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "num1", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "num2", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Write a function min that takes two arguments and returns their minimum.", "short_docstring_tokens": ["Write", "a", "function", "min", "that", "takes", "two", "arguments", "and", "returns", "their", "minimum", "."], "original_string": "function min(num1, num2) {\n    if(num1 > num2)\n      return num2;\n    else\n      return num1;\n}", "id": "55f7ed4f4d42458932931fb93b431c9b32ad3bd45647948ab6386009b85f6797"}
{"identifier": "fizzBuzz", "parameters": {"number": null}, "return_type": "<not_specific>", "repo": "gabrielsixel/eloquentJSExe", "path": "EloquentJS_Exe2.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "d8356361b36227f11653e002462745785db8afff", "ext": "js", "size": 832, "code": "function fizzBuzz(number) {\n  var num = 0;\n  if (number === undefined)\n    number = 100;\n  while (num < number) {\n    num++;\n    var string = '';\n    if(num % 3 === 0) {\n      string += \"Fizz\";\n    }\n    if(num % 5 === 0) {\n      string += \"Buzz\";\n    }\n    if (string === '') {\n      string += num;\n    }\n    return string;\n  }\n}", "code_tokens": ["function", "fizzBuzz", "(", "number", ")", "{", "var", "num", "=", "0", ";", "if", "(", "number", "===", "undefined", ")", "number", "=", "100", ";", "while", "(", "num", "<", "number", ")", "{", "num", "++", ";", "var", "string", "=", "''", ";", "if", "(", "num", "%", "3", "===", "0", ")", "{", "string", "+=", "\"Fizz\"", ";", "}", "if", "(", "num", "%", "5", "===", "0", ")", "{", "string", "+=", "\"Buzz\"", ";", "}", "if", "(", "string", "===", "''", ")", "{", "string", "+=", "num", ";", "}", "return", "string", ";", "}", "}"], "original_docstring": "/*\n  Write a program that uses console.log to print all the numbers from 1 to 100,\n  with two exceptions. For numbers divisible by 3, print \"Fizz\" instead of the\n  number, and for numbers divisible by 5 (and not 3), print \"Buzz\" instead.\n\n  When you have that working, modify your program to print \"FizzBuzz\", for\n  numbers that are divisible by both 3 and 5 (and still print \"Fizz\" or \"Buzz\"\n  for numbers divisible by only one of those).\n*/", "comment": ["//For each iteraction initialize a new empty string."], "docstring_tokens": ["Write", "a", "program", "that", "uses", "console", ".", "log", "to", "print", "all", "the", "numbers", "from", "1", "to", "100", "with", "two", "exceptions", ".", "For", "numbers", "divisible", "by", "3", "print", "\"", "Fizz", "\"", "instead", "of", "the", "number", "and", "for", "numbers", "divisible", "by", "5", "(", "and", "not", "3", ")", "print", "\"", "Buzz", "\"", "instead", "."], "docstring": "Write a program that uses console.log to print all the numbers from 1 to 100,\nwith two exceptions. For numbers divisible by 3, print \"Fizz\" instead of the\nnumber, and for numbers divisible by 5 (and not 3), print \"Buzz\" instead.\n\n", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "number", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Write a program that uses console.log to print all the numbers from 1 to 100,\nwith two exceptions.", "short_docstring_tokens": ["Write", "a", "program", "that", "uses", "console", ".", "log", "to", "print", "all", "the", "numbers", "from", "1", "to", "100", "with", "two", "exceptions", "."], "original_string": "function fizzBuzz(number) {\n  var num = 0;\n  if (number === undefined)\n    number = 100;\n  while (num < number) {\n    num++;\n    //For each iteraction initialize a new empty string.\n    var string = '';\n    if(num % 3 === 0) {\n      string += \"Fizz\";\n    }\n    if(num % 5 === 0) {\n      string += \"Buzz\";\n    }\n    if (string === '') {\n      string += num;\n    }\n    return string;\n  }\n}", "id": "f07aa1f2e8fd5b783a53b15deef1ba366f2192bf97c150cecfe8b0c81d4564dc"}
{"identifier": "arrayToList", "parameters": {"array": null}, "return_type": "<not_specific>", "repo": "gabrielsixel/eloquentJSExe", "path": "EloquentJS_Exe9.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "7a02e13bbc3e881dc52280bbeb56c6ff5ae37e87", "ext": "js", "size": 1031, "code": "function arrayToList(array) {\n  var list = null;\n  for (var i = (array.length - 1); i >= 0 ; i--) {\n    list = prepend(array[i], list);\n  }\n  return list;\n}", "code_tokens": ["function", "arrayToList", "(", "array", ")", "{", "var", "list", "=", "null", ";", "for", "(", "var", "i", "=", "(", "array", ".", "length", "-", "1", ")", ";", "i", ">=", "0", ";", "i", "--", ")", "{", "list", "=", "prepend", "(", "array", "[", "i", "]", ",", "list", ")", ";", "}", "return", "list", ";", "}"], "original_docstring": "/*\n  Write a function arrayToList that builds up a data structure like the previous\n  one when given [1, 2, 3] as argument, and write a listToArray function that\n  produces an array from a list. Also write the helper functions prepend, which\n  takes an element and a list and creates a new list that adds the element to\n  the front of the input list, and nth, which takes a list and a number and\n  returns the element at the given position in the list, or undefined when there\n  is no such element.\n*/", "comment": [], "docstring_tokens": ["Write", "a", "function", "arrayToList", "that", "builds", "up", "a", "data", "structure", "like", "the", "previous", "one", "when", "given", "[", "1", "2", "3", "]", "as", "argument", "and", "write", "a", "listToArray", "function", "that", "produces", "an", "array", "from", "a", "list", ".", "Also", "write", "the", "helper", "functions", "prepend", "which", "takes", "an", "element", "and", "a", "list", "and", "creates", "a", "new", "list", "that", "adds", "the", "element", "to", "the", "front", "of", "the", "input", "list", "and", "nth", "which", "takes", "a", "list", "and", "a", "number", "and", "returns", "the", "element", "at", "the", "given", "position", "in", "the", "list", "or", "undefined", "when", "there", "is", "no", "such", "element", "."], "docstring": "Write a function arrayToList that builds up a data structure like the previous\none when given [1, 2, 3] as argument, and write a listToArray function that\nproduces an array from a list. Also write the helper functions prepend, which\ntakes an element and a list and creates a new list that adds the element to\nthe front of the input list, and nth, which takes a list and a number and\nreturns the element at the given position in the list, or undefined when there\nis no such element.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "array", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Write a function arrayToList that builds up a data structure like the previous\none when given [1, 2, 3] as argument, and write a listToArray function that\nproduces an array from a list.", "short_docstring_tokens": ["Write", "a", "function", "arrayToList", "that", "builds", "up", "a", "data", "structure", "like", "the", "previous", "one", "when", "given", "[", "1", "2", "3", "]", "as", "argument", "and", "write", "a", "listToArray", "function", "that", "produces", "an", "array", "from", "a", "list", "."], "original_string": "function arrayToList(array) {\n  var list = null;\n  for (var i = (array.length - 1); i >= 0 ; i--) {\n    list = prepend(array[i], list);\n  }\n  return list;\n}", "id": "76acb33320de43cf4e35e08b952758b287da563542ed7e728ddb88ab4ed1a053"}
{"identifier": "reverseArray", "parameters": {"array": null}, "return_type": "<not_specific>", "repo": "gabrielsixel/eloquentJSExe", "path": "EloquentJS_Exe8.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "eaa92ce114fc81d35bc54bd45743241dbbeaf99f", "ext": "js", "size": 929, "code": "function reverseArray(array) {\n  var reverseArray = [];\n  for (var i = (array.length - 1); i >= 0; i--) {\n    reverseArray.push(array[i]);\n  }\n  return reverseArray;\n}", "code_tokens": ["function", "reverseArray", "(", "array", ")", "{", "var", "reverseArray", "=", "[", "]", ";", "for", "(", "var", "i", "=", "(", "array", ".", "length", "-", "1", ")", ";", "i", ">=", "0", ";", "i", "--", ")", "{", "reverseArray", ".", "push", "(", "array", "[", "i", "]", ")", ";", "}", "return", "reverseArray", ";", "}"], "original_docstring": "/*\n  Reversing an array\n\n  Arrays have a method reverse, which changes the array by inverting the order\n  in which its elements appear. For this exercise, write two functions,\n  reverseArray and reverseArrayInPlace. The first, reverseArray, takes an array\n  as argument and produces a new array that has the same elements in the inverse\n  order. The second, reverseArrayInPlace, does what the reverse method does: it\n  modifies the array given as argument in order to reverse its elements.\n  Neither may use the standard reverse method.\n*/", "comment": [], "docstring_tokens": ["Reversing", "an", "array", "Arrays", "have", "a", "method", "reverse", "which", "changes", "the", "array", "by", "inverting", "the", "order", "in", "which", "its", "elements", "appear", ".", "For", "this", "exercise", "write", "two", "functions", "reverseArray", "and", "reverseArrayInPlace", ".", "The", "first", "reverseArray", "takes", "an", "array", "as", "argument", "and", "produces", "a", "new", "array", "that", "has", "the", "same", "elements", "in", "the", "inverse", "order", ".", "The", "second", "reverseArrayInPlace", "does", "what", "the", "reverse", "method", "does", ":", "it", "modifies", "the", "array", "given", "as", "argument", "in", "order", "to", "reverse", "its", "elements", ".", "Neither", "may", "use", "the", "standard", "reverse", "method", "."], "docstring": "Reversing an array\nArrays have a method reverse, which changes the array by inverting the order\nin which its elements appear. For this exercise, write two functions,\nreverseArray and reverseArrayInPlace. The first, reverseArray, takes an array\nas argument and produces a new array that has the same elements in the inverse\norder. The second, reverseArrayInPlace, does what the reverse method does: it\nmodifies the array given as argument in order to reverse its elements.\nNeither may use the standard reverse method.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "array", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Reversing an array\nArrays have a method reverse, which changes the array by inverting the order\nin which its elements appear.", "short_docstring_tokens": ["Reversing", "an", "array", "Arrays", "have", "a", "method", "reverse", "which", "changes", "the", "array", "by", "inverting", "the", "order", "in", "which", "its", "elements", "appear", "."], "original_string": "function reverseArray(array) {\n  var reverseArray = [];\n  for (var i = (array.length - 1); i >= 0; i--) {\n    reverseArray.push(array[i]);\n  }\n  return reverseArray;\n}", "id": "5866e277043b85730264531216138ecef5771b163ac55f23bff355153e485159"}
{"identifier": "flatGroupsOfProducts", "parameters": {"groups": null}, "return_type": "<not_specific>", "repo": "lucasromerodb/xbox-store-scrapper", "path": "index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ada342a20b0c27c05a9cd116995d153a98e8de88", "ext": "js", "size": 5490, "code": "function flatGroupsOfProducts(groups) {\n  let data = [];\n  for (let i = 0; i < groups.length; i++) {\n    data = [...data, ...groups[i].Products];\n  }\n  return data;\n}", "code_tokens": ["function", "flatGroupsOfProducts", "(", "groups", ")", "{", "let", "data", "=", "[", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "groups", ".", "length", ";", "i", "++", ")", "{", "data", "=", "[", "...", "data", ",", "...", "groups", "[", "i", "]", ".", "Products", "]", ";", "}", "return", "data", ";", "}"], "original_docstring": "/**\n * Given an array of arrays of products, it returns a flatten array of products\n * @param  {array} groups\n */", "comment": [], "docstring_tokens": ["Given", "an", "array", "of", "arrays", "of", "products", "it", "returns", "a", "flatten", "array", "of", "products", "@param", "{", "array", "}", "groups"], "docstring": "Given an array of arrays of products, it returns a flatten array of products\n@param  {array} groups", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "groups", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Given an array of arrays of products, it returns a flatten array of products\n @param  {array} groups", "short_docstring_tokens": ["Given", "an", "array", "of", "arrays", "of", "products", "it", "returns", "a", "flatten", "array", "of", "products", "@param", "{", "array", "}", "groups"], "original_string": "function flatGroupsOfProducts(groups) {\n  let data = [];\n\n  for (let i = 0; i < groups.length; i++) {\n    data = [...data, ...groups[i].Products];\n  }\n\n  return data;\n}", "id": "c1af60362f80ed70b76ed39f9bfceb358f2b779dc95a7ae651cf9664aa153d55"}
{"identifier": "mapProduct", "parameters": {"products": null}, "return_type": "<not_specific>", "repo": "lucasromerodb/xbox-store-scrapper", "path": "index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ada342a20b0c27c05a9cd116995d153a98e8de88", "ext": "js", "size": 5490, "code": "function mapProduct(products) {\n  return products.map(element => {\n    const hasPosterImage = element.LocalizedProperties[0].Images.find(item => item.ImagePurpose === \"Poster\");\n    return {\n      OriginalRequest: `${API_CATALOG}${API_CATALOG_PARAM_PRODUCT_IDS}${element.ProductId}${API_CATALOG_PARAM_FILTER}`,\n      GameInfo: {\n        Poster: hasPosterImage ? hasPosterImage.Uri : null,\n        ShortTitle: element.LocalizedProperties[0].ShortTitle,\n        ProductTitle: element.LocalizedProperties[0].ProductTitle,\n        ShortDescription: element.LocalizedProperties[0].ShortDescription,\n        ProductDescription: element.LocalizedProperties[0].ProductDescription,\n        PublisherWebsiteUri: element.LocalizedProperties[0].PublisherWebsiteUri,\n      },\n      Details: {\n        ProductId: element.ProductId,\n        OriginalReleaseDate: element.MarketProperties[0].OriginalReleaseDate,\n        Category: element.Properties.Category,\n        Categories: element.Properties.Categories,\n        DeveloperName: element.LocalizedProperties[0].DeveloperName,\n        PublisherName: element.LocalizedProperties[0].PublisherName,\n        XboxLiveGoldRequired: element.Properties.XboxLiveGoldRequired,\n      },\n      Price: {\n        CurrencyCode: element.DisplaySkuAvailabilities[0].Availabilities[0].OrderManagementData.Price.CurrencyCode,\n        MSRP: element.DisplaySkuAvailabilities[0].Availabilities[0].OrderManagementData.Price.MSRP,\n      },\n      Sale: {\n        ListPrice: element.DisplaySkuAvailabilities[0].Availabilities[0].OrderManagementData.Price.ListPrice,\n        WholesalePrice: element.DisplaySkuAvailabilities[0].Availabilities[0].OrderManagementData.Price.WholesalePrice,\n        StartDate: element.DisplaySkuAvailabilities[0].Availabilities[0].Conditions.StartDate,\n        EndDate: element.DisplaySkuAvailabilities[0].Availabilities[0].Conditions.EndDate,\n      },\n      Subscriptions: element.LocalizedProperties[0].EligibilityProperties.Affirmations,\n    };\n  })\n}", "code_tokens": ["function", "mapProduct", "(", "products", ")", "{", "return", "products", ".", "map", "(", "element", "=>", "{", "const", "hasPosterImage", "=", "element", ".", "LocalizedProperties", "[", "0", "]", ".", "Images", ".", "find", "(", "item", "=>", "item", ".", "ImagePurpose", "===", "\"Poster\"", ")", ";", "return", "{", "OriginalRequest", ":", "`", "${", "API_CATALOG", "}", "${", "API_CATALOG_PARAM_PRODUCT_IDS", "}", "${", "element", ".", "ProductId", "}", "${", "API_CATALOG_PARAM_FILTER", "}", "`", ",", "GameInfo", ":", "{", "Poster", ":", "hasPosterImage", "?", "hasPosterImage", ".", "Uri", ":", "null", ",", "ShortTitle", ":", "element", ".", "LocalizedProperties", "[", "0", "]", ".", "ShortTitle", ",", "ProductTitle", ":", "element", ".", "LocalizedProperties", "[", "0", "]", ".", "ProductTitle", ",", "ShortDescription", ":", "element", ".", "LocalizedProperties", "[", "0", "]", ".", "ShortDescription", ",", "ProductDescription", ":", "element", ".", "LocalizedProperties", "[", "0", "]", ".", "ProductDescription", ",", "PublisherWebsiteUri", ":", "element", ".", "LocalizedProperties", "[", "0", "]", ".", "PublisherWebsiteUri", ",", "}", ",", "Details", ":", "{", "ProductId", ":", "element", ".", "ProductId", ",", "OriginalReleaseDate", ":", "element", ".", "MarketProperties", "[", "0", "]", ".", "OriginalReleaseDate", ",", "Category", ":", "element", ".", "Properties", ".", "Category", ",", "Categories", ":", "element", ".", "Properties", ".", "Categories", ",", "DeveloperName", ":", "element", ".", "LocalizedProperties", "[", "0", "]", ".", "DeveloperName", ",", "PublisherName", ":", "element", ".", "LocalizedProperties", "[", "0", "]", ".", "PublisherName", ",", "XboxLiveGoldRequired", ":", "element", ".", "Properties", ".", "XboxLiveGoldRequired", ",", "}", ",", "Price", ":", "{", "CurrencyCode", ":", "element", ".", "DisplaySkuAvailabilities", "[", "0", "]", ".", "Availabilities", "[", "0", "]", ".", "OrderManagementData", ".", "Price", ".", "CurrencyCode", ",", "MSRP", ":", "element", ".", "DisplaySkuAvailabilities", "[", "0", "]", ".", "Availabilities", "[", "0", "]", ".", "OrderManagementData", ".", "Price", ".", "MSRP", ",", "}", ",", "Sale", ":", "{", "ListPrice", ":", "element", ".", "DisplaySkuAvailabilities", "[", "0", "]", ".", "Availabilities", "[", "0", "]", ".", "OrderManagementData", ".", "Price", ".", "ListPrice", ",", "WholesalePrice", ":", "element", ".", "DisplaySkuAvailabilities", "[", "0", "]", ".", "Availabilities", "[", "0", "]", ".", "OrderManagementData", ".", "Price", ".", "WholesalePrice", ",", "StartDate", ":", "element", ".", "DisplaySkuAvailabilities", "[", "0", "]", ".", "Availabilities", "[", "0", "]", ".", "Conditions", ".", "StartDate", ",", "EndDate", ":", "element", ".", "DisplaySkuAvailabilities", "[", "0", "]", ".", "Availabilities", "[", "0", "]", ".", "Conditions", ".", "EndDate", ",", "}", ",", "Subscriptions", ":", "element", ".", "LocalizedProperties", "[", "0", "]", ".", "EligibilityProperties", ".", "Affirmations", ",", "}", ";", "}", ")", "}"], "original_docstring": "/**\n * Given an array of products, it returns an array of objects with the following structure:\n * @param  {array} products\n */", "comment": ["// TODO: PC - Desktop", "// TODO: Xbox", "// TODO: Game Pass", "// TODO: Rating"], "docstring_tokens": ["Given", "an", "array", "of", "products", "it", "returns", "an", "array", "of", "objects", "with", "the", "following", "structure", ":", "@param", "{", "array", "}", "products"], "docstring": "Given an array of products, it returns an array of objects with the following structure:\n@param  {array} products", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "products", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Given an array of products, it returns an array of objects with the following structure:\n @param  {array} products", "short_docstring_tokens": ["Given", "an", "array", "of", "products", "it", "returns", "an", "array", "of", "objects", "with", "the", "following", "structure", ":", "@param", "{", "array", "}", "products"], "original_string": "function mapProduct(products) {\n  return products.map(element => {\n    const hasPosterImage = element.LocalizedProperties[0].Images.find(item => item.ImagePurpose === \"Poster\");\n\n    return {\n      OriginalRequest: `${API_CATALOG}${API_CATALOG_PARAM_PRODUCT_IDS}${element.ProductId}${API_CATALOG_PARAM_FILTER}`,\n      GameInfo: {\n        Poster: hasPosterImage ? hasPosterImage.Uri : null,\n        ShortTitle: element.LocalizedProperties[0].ShortTitle,\n        ProductTitle: element.LocalizedProperties[0].ProductTitle,\n        ShortDescription: element.LocalizedProperties[0].ShortDescription,\n        ProductDescription: element.LocalizedProperties[0].ProductDescription,\n        PublisherWebsiteUri: element.LocalizedProperties[0].PublisherWebsiteUri,\n      },\n      Details: {\n        ProductId: element.ProductId,\n        OriginalReleaseDate: element.MarketProperties[0].OriginalReleaseDate,\n        Category: element.Properties.Category,\n        Categories: element.Properties.Categories,\n        DeveloperName: element.LocalizedProperties[0].DeveloperName,\n        PublisherName: element.LocalizedProperties[0].PublisherName,\n        XboxLiveGoldRequired: element.Properties.XboxLiveGoldRequired,\n        // TODO: PC - Desktop\n        // TODO: Xbox\n        // TODO: Game Pass\n        // TODO: Rating\n      },\n      Price: {\n        CurrencyCode: element.DisplaySkuAvailabilities[0].Availabilities[0].OrderManagementData.Price.CurrencyCode,\n        MSRP: element.DisplaySkuAvailabilities[0].Availabilities[0].OrderManagementData.Price.MSRP,\n      },\n      Sale: {\n        ListPrice: element.DisplaySkuAvailabilities[0].Availabilities[0].OrderManagementData.Price.ListPrice,\n        WholesalePrice: element.DisplaySkuAvailabilities[0].Availabilities[0].OrderManagementData.Price.WholesalePrice,\n        StartDate: element.DisplaySkuAvailabilities[0].Availabilities[0].Conditions.StartDate,\n        EndDate: element.DisplaySkuAvailabilities[0].Availabilities[0].Conditions.EndDate,\n      },\n      Subscriptions: element.LocalizedProperties[0].EligibilityProperties.Affirmations,\n    };\n  })\n}", "id": "a44a3dd0ab91dacfb66b55d7e7fe582698d8f4a46739d03b3552d1aa622107e5"}
{"identifier": "scrapeAPI", "parameters": {}, "return_type": "<not_specific>", "repo": "lucasromerodb/xbox-store-scrapper", "path": "index.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ada342a20b0c27c05a9cd116995d153a98e8de88", "ext": "js", "size": 5490, "code": "async function scrapeAPI() {\n  console.log('\ud83d\udd22 REQUESTING PRODUCT IDs');\n  const arrayOfGroupsOfIds = await getProductIds(API_DEAL_PRODUCT_IDS);\n  console.log('\ud83d\udce6 MAKING GROUPS OF IDs');\n  const arrayOfProductsRequest = [];\n  for (let i = 0; i < arrayOfGroupsOfIds.length; i++) {\n    const groupOfIds = arrayOfGroupsOfIds[i];\n    const ids = groupOfIds.join(',');\n    const urlCatalog = `${API_CATALOG}${API_CATALOG_PARAM_PRODUCT_IDS}${ids}${API_CATALOG_PARAM_FILTER}`;\n    arrayOfProductsRequest.push(fetcher(urlCatalog));\n  }\n  try {\n    console.log('\ud83c\udfaf EXECUTING ALL REQUESTS');\n    const response = await Promise.all(arrayOfProductsRequest);\n    const flatResponse = flatGroupsOfProducts(response);\n    const customResponse = mapProduct(flatResponse);\n    console.log('\\n------------------------------------------------------------------------------------------------\\n')\n    console.log('FINISH.\\n')\n    console.log('\ud83d\udce6 There are', arrayOfProductsRequest.length, 'groups (max. products per group:', PRODUCTS_PER_GROUP, ')');\n    console.log('\ud83c\udfaf Total products fetched', flatResponse.length);\n    console.log('\ud83d\uddbc Products without poster: ', getProductsWithoutPoster(customResponse).length, getProductsWithoutPoster(customResponse));\n    return customResponse;\n  } catch (error) {\n    console.log(error);\n  }\n}", "code_tokens": ["async", "function", "scrapeAPI", "(", ")", "{", "console", ".", "log", "(", "'\ud83d\udd22 REQUESTING PRODUCT IDs');", "", "", "const", "arrayOfGroupsOfIds", "=", "await", "getProductIds", "(", "API_DEAL_PRODUCT_IDS", ")", ";", "console", ".", "log", "(", "'\ud83d\udce6 MAKING GROUPS OF IDs');", "", "", "const", "arrayOfProductsRequest", "=", "[", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "arrayOfGroupsOfIds", ".", "length", ";", "i", "++", ")", "{", "const", "groupOfIds", "=", "arrayOfGroupsOfIds", "[", "i", "]", ";", "const", "ids", "=", "groupOfIds", ".", "join", "(", "','", ")", ";", "const", "urlCatalog", "=", "`", "${", "API_CATALOG", "}", "${", "API_CATALOG_PARAM_PRODUCT_IDS", "}", "${", "ids", "}", "${", "API_CATALOG_PARAM_FILTER", "}", "`", ";", "arrayOfProductsRequest", ".", "push", "(", "fetcher", "(", "urlCatalog", ")", ")", ";", "}", "try", "{", "console", ".", "log", "(", "'\ud83c\udfaf EXECUTING ALL REQUESTS');", "", "", "const", "response", "=", "await", "Promise", ".", "all", "(", "arrayOfProductsRequest", ")", ";", "const", "flatResponse", "=", "flatGroupsOfProducts", "(", "response", ")", ";", "const", "customResponse", "=", "mapProduct", "(", "flatResponse", ")", ";", "console", ".", "log", "(", "'\\n------------------------------------------------------------------------------------------------\\n'", ")", "console", ".", "log", "(", "'FINISH.\\n'", ")", "console", ".", "log", "(", "'\ud83d\udce6 There are', a", "r", "ayOfProductsRequest.le", "n", "gth, '", "g", "oups (max. products per group:', P", "R", "DUCTS_PER_GROUP, '", ")", ");", "", "", "console", ".", "log", "(", "'\ud83c\udfaf Total products fetched', f", "l", "tResponse.le", "n", "gth);", "", "", "console", ".", "log", "(", "'\ud83d\uddbc Products without poster: ', g", "e", "ProductsWithoutPoster(cu", "s", "tomResponse).l", "e", "n", "gth, g", "e", "ProductsWithoutPoster(cu", "s", "tomResponse));", "", "", "", "return", "customResponse", ";", "}", "catch", "(", "error", ")", "{", "console", ".", "log", "(", "error", ")", ";", "}", "}"], "original_docstring": "/**\n * Fetch data from the public API and returns an array of products with a custom structure\n */", "comment": ["// Statistics"], "docstring_tokens": ["Fetch", "data", "from", "the", "public", "API", "and", "returns", "an", "array", "of", "products", "with", "a", "custom", "structure"], "docstring": "Fetch data from the public API and returns an array of products with a custom structure", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Fetch data from the public API and returns an array of products with a custom structure", "short_docstring_tokens": ["Fetch", "data", "from", "the", "public", "API", "and", "returns", "an", "array", "of", "products", "with", "a", "custom", "structure"], "original_string": "async function scrapeAPI() {\n  console.log('\ud83d\udd22 REQUESTING PRODUCT IDs');\n  const arrayOfGroupsOfIds = await getProductIds(API_DEAL_PRODUCT_IDS);\n\n  console.log('\ud83d\udce6 MAKING GROUPS OF IDs');\n  const arrayOfProductsRequest = [];\n  for (let i = 0; i < arrayOfGroupsOfIds.length; i++) {\n    const groupOfIds = arrayOfGroupsOfIds[i];\n    const ids = groupOfIds.join(',');\n    const urlCatalog = `${API_CATALOG}${API_CATALOG_PARAM_PRODUCT_IDS}${ids}${API_CATALOG_PARAM_FILTER}`;\n    arrayOfProductsRequest.push(fetcher(urlCatalog));\n  }\n\n  try {\n    console.log('\ud83c\udfaf EXECUTING ALL REQUESTS');\n    const response = await Promise.all(arrayOfProductsRequest);\n    const flatResponse = flatGroupsOfProducts(response);\n    const customResponse = mapProduct(flatResponse);\n\n    // Statistics\n    console.log('\\n------------------------------------------------------------------------------------------------\\n')\n    console.log('FINISH.\\n')\n    console.log('\ud83d\udce6 There are', arrayOfProductsRequest.length, 'groups (max. products per group:', PRODUCTS_PER_GROUP, ')');\n    console.log('\ud83c\udfaf Total products fetched', flatResponse.length);\n    console.log('\ud83d\uddbc Products without poster: ', getProductsWithoutPoster(customResponse).length, getProductsWithoutPoster(customResponse));\n\n    return customResponse;\n  } catch (error) {\n    console.log(error);\n  }\n}", "id": "b542295a77b6b8354e0ae36ced0df16f1a960a246b1d7e7f537b467ebeeea808"}
{"identifier": "add", "parameters": {"job_input_id": null, "input_id": null, "input_value": null}, "return_type": null, "repo": "mmyschyshyn/Vocalaxy", "path": "static/scripts/mvc/tools/tools-tree.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": 3.0, "license": ["CC-BY-3.0"], "hexsha": "fe060ad7bb9503e90f9a0efe303db13df9c1b031", "ext": "js", "size": 10270, "code": "function add(job_input_id, input_id, input_value) {\n            result_dict[job_input_id] = input_value;\n            self.map_dict[job_input_id] = input_id;\n        }", "code_tokens": ["function", "add", "(", "job_input_id", ",", "input_id", ",", "input_value", ")", "{", "result_dict", "[", "job_input_id", "]", "=", "input_value", ";", "self", ".", "map_dict", "[", "job_input_id", "]", "=", "input_id", ";", "}"], "original_docstring": "// add identifier and value to job definition", "comment": ["// add entry to result dictionary", "// backup id mapping"], "docstring_tokens": ["add", "identifier", "and", "value", "to", "job", "definition"], "docstring": "add identifier and value to job definition", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "job_input_id", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "input_id", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "input_value", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "add identifier and value to job definition", "short_docstring_tokens": ["add", "identifier", "and", "value", "to", "job", "definition"], "original_string": "function add(job_input_id, input_id, input_value) {\n            // add entry to result dictionary\n            result_dict[job_input_id] = input_value;\n\n            // backup id mapping\n            self.map_dict[job_input_id] = input_id;\n        }", "id": "4e32973c17ea357f9df20bca50926405479b37f91f6f9c5a02852100229f2e8e"}
{"identifier": "convert", "parameters": {"identifier": null, "head": null}, "return_type": "<not_specific>", "repo": "mmyschyshyn/Vocalaxy", "path": "static/scripts/mvc/tools/tools-tree.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": 3.0, "license": ["CC-BY-3.0"], "hexsha": "fe060ad7bb9503e90f9a0efe303db13df9c1b031", "ext": "js", "size": 10270, "code": "function convert(identifier, head) {\n            for (var index in head) {\n                var node = head[index];\n                if (node.input) {\n                    var input = node.input;\n                    var job_input_id = identifier;\n                    if (identifier != '') {\n                        job_input_id += '|';\n                    }\n                    job_input_id += input.name;\n                    switch (input.type) {\n                        case 'repeat':\n                            var section_label = 'section-';\n                            var block_indices = [];\n                            var block_prefix = null;\n                            for (var block_label in node) {\n                                var pos = block_label.indexOf(section_label);\n                                if (pos != -1) {\n                                    pos += section_label.length;\n                                    block_indices.push(parseInt(block_label.substr(pos)));\n                                    if (!block_prefix) {\n                                        block_prefix = block_label.substr(0, pos);\n                                    }\n                                }\n                            }\n                            block_indices.sort(function(a,b) { return a - b; });\n                            var index = 0;\n                            for (var i in block_indices) {\n                                convert(job_input_id + '_' + index++, node[block_prefix + block_indices[i]]);\n                            }\n                            break;\n                        case 'conditional':\n                            var value = self.app.field_list[input.id].value();\n                            if (patch[input.test_param.type]) {\n                                value = patch[input.test_param.type](value);\n                            }\n                            add (job_input_id + '|' + input.test_param.name, input.id, value);\n                            var selectedCase = self.matchCase(input, value);\n                            if (selectedCase != -1) {\n                                convert(job_input_id, head[input.id + '-section-' + selectedCase]);\n                            }\n                            break;\n                        case 'section':\n                            convert('', node);\n                            break;\n                        default:\n                            var field = self.app.field_list[input.id];\n                            if (field && field.value) {\n                                var value = field.value();\n                                if (patch[input.type]) {\n                                    value = patch[input.type](value);\n                                }\n                                if (input.ignore === undefined || input.ignore != value) {\n                                    add (job_input_id, input.id, value);\n                                    if (input.payload) {\n                                        for (var p_id in input.payload) {\n                                            add (p_id, input.id, input.payload[p_id]);\n                                        }\n                                    }\n                                }\n                            }\n                    }\n                }\n            }\n        }", "code_tokens": ["function", "convert", "(", "identifier", ",", "head", ")", "{", "for", "(", "var", "index", "in", "head", ")", "{", "var", "node", "=", "head", "[", "index", "]", ";", "if", "(", "node", ".", "input", ")", "{", "var", "input", "=", "node", ".", "input", ";", "var", "job_input_id", "=", "identifier", ";", "if", "(", "identifier", "!=", "''", ")", "{", "job_input_id", "+=", "'|'", ";", "}", "job_input_id", "+=", "input", ".", "name", ";", "switch", "(", "input", ".", "type", ")", "{", "case", "'repeat'", ":", "var", "section_label", "=", "'section-'", ";", "var", "block_indices", "=", "[", "]", ";", "var", "block_prefix", "=", "null", ";", "for", "(", "var", "block_label", "in", "node", ")", "{", "var", "pos", "=", "block_label", ".", "indexOf", "(", "section_label", ")", ";", "if", "(", "pos", "!=", "-", "1", ")", "{", "pos", "+=", "section_label", ".", "length", ";", "block_indices", ".", "push", "(", "parseInt", "(", "block_label", ".", "substr", "(", "pos", ")", ")", ")", ";", "if", "(", "!", "block_prefix", ")", "{", "block_prefix", "=", "block_label", ".", "substr", "(", "0", ",", "pos", ")", ";", "}", "}", "}", "block_indices", ".", "sort", "(", "function", "(", "a", ",", "b", ")", "{", "return", "a", "-", "b", ";", "}", ")", ";", "var", "index", "=", "0", ";", "for", "(", "var", "i", "in", "block_indices", ")", "{", "convert", "(", "job_input_id", "+", "'_'", "+", "index", "++", ",", "node", "[", "block_prefix", "+", "block_indices", "[", "i", "]", "]", ")", ";", "}", "break", ";", "case", "'conditional'", ":", "var", "value", "=", "self", ".", "app", ".", "field_list", "[", "input", ".", "id", "]", ".", "value", "(", ")", ";", "if", "(", "patch", "[", "input", ".", "test_param", ".", "type", "]", ")", "{", "value", "=", "patch", "[", "input", ".", "test_param", ".", "type", "]", "(", "value", ")", ";", "}", "add", "(", "job_input_id", "+", "'|'", "+", "input", ".", "test_param", ".", "name", ",", "input", ".", "id", ",", "value", ")", ";", "var", "selectedCase", "=", "self", ".", "matchCase", "(", "input", ",", "value", ")", ";", "if", "(", "selectedCase", "!=", "-", "1", ")", "{", "convert", "(", "job_input_id", ",", "head", "[", "input", ".", "id", "+", "'-section-'", "+", "selectedCase", "]", ")", ";", "}", "break", ";", "case", "'section'", ":", "convert", "(", "''", ",", "node", ")", ";", "break", ";", "default", ":", "var", "field", "=", "self", ".", "app", ".", "field_list", "[", "input", ".", "id", "]", ";", "if", "(", "field", "&&", "field", ".", "value", ")", "{", "var", "value", "=", "field", ".", "value", "(", ")", ";", "if", "(", "patch", "[", "input", ".", "type", "]", ")", "{", "value", "=", "patch", "[", "input", ".", "type", "]", "(", "value", ")", ";", "}", "if", "(", "input", ".", "ignore", "===", "undefined", "||", "input", ".", "ignore", "!=", "value", ")", "{", "add", "(", "job_input_id", ",", "input", ".", "id", ",", "value", ")", ";", "if", "(", "input", ".", "payload", ")", "{", "for", "(", "var", "p_id", "in", "input", ".", "payload", ")", "{", "add", "(", "p_id", ",", "input", ".", "id", ",", "input", ".", "payload", "[", "p_id", "]", ")", ";", "}", "}", "}", "}", "}", "}", "}", "}"], "original_docstring": "// converter between raw dictionary and job dictionary", "comment": ["// get node", "// create identifier", "// process input type", "// handle repeats", "// section identifier", "// collect repeat block identifiers", "// sort repeat blocks", "// add to response dictionary in created order", "// handle conditionals", "// get and patch conditional value", "// add conditional value", "// identify selected case", "// handle custom sub sections", "// get field", "// validate field value", "// get and patch field value", "// ignore certain values", "// add value to submission", "// add payload to submission"], "docstring_tokens": ["converter", "between", "raw", "dictionary", "and", "job", "dictionary"], "docstring": "converter between raw dictionary and job dictionary", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "identifier", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "head", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "converter between raw dictionary and job dictionary", "short_docstring_tokens": ["converter", "between", "raw", "dictionary", "and", "job", "dictionary"], "original_string": "function convert(identifier, head) {\n            for (var index in head) {\n                var node = head[index];\n                if (node.input) {\n                    // get node\n                    var input = node.input;\n\n                    // create identifier\n                    var job_input_id = identifier;\n                    if (identifier != '') {\n                        job_input_id += '|';\n                    }\n                    job_input_id += input.name;\n\n                    // process input type\n                    switch (input.type) {\n                        // handle repeats\n                        case 'repeat':\n                            // section identifier\n                            var section_label = 'section-';\n\n                            // collect repeat block identifiers\n                            var block_indices = [];\n                            var block_prefix = null;\n                            for (var block_label in node) {\n                                var pos = block_label.indexOf(section_label);\n                                if (pos != -1) {\n                                    pos += section_label.length;\n                                    block_indices.push(parseInt(block_label.substr(pos)));\n                                    if (!block_prefix) {\n                                        block_prefix = block_label.substr(0, pos);\n                                    }\n                                }\n                            }\n\n                            // sort repeat blocks\n                            block_indices.sort(function(a,b) { return a - b; });\n\n                            // add to response dictionary in created order\n                            var index = 0;\n                            for (var i in block_indices) {\n                                convert(job_input_id + '_' + index++, node[block_prefix + block_indices[i]]);\n                            }\n                            break;\n                        // handle conditionals\n                        case 'conditional':\n                            // get and patch conditional value\n                            var value = self.app.field_list[input.id].value();\n                            if (patch[input.test_param.type]) {\n                                value = patch[input.test_param.type](value);\n                            }\n\n                            // add conditional value\n                            add (job_input_id + '|' + input.test_param.name, input.id, value);\n\n                            // identify selected case\n                            var selectedCase = self.matchCase(input, value);\n                            if (selectedCase != -1) {\n                                convert(job_input_id, head[input.id + '-section-' + selectedCase]);\n                            }\n                            break;\n                        // handle custom sub sections\n                        case 'section':\n                            convert('', node);\n                            break;\n                        default:\n                            // get field\n                            var field = self.app.field_list[input.id];\n                            if (field && field.value) {\n                                // validate field value\n                                var value = field.value();\n\n                                // get and patch field value\n                                if (patch[input.type]) {\n                                    value = patch[input.type](value);\n                                }\n\n                                // ignore certain values\n                                if (input.ignore === undefined || input.ignore != value) {\n                                    // add value to submission\n                                    add (job_input_id, input.id, value);\n\n                                    // add payload to submission\n                                    if (input.payload) {\n                                        for (var p_id in input.payload) {\n                                            add (p_id, input.id, input.payload[p_id]);\n                                        }\n                                    }\n                                }\n                            }\n                    }\n                }\n            }\n        }", "id": "f221d54ecce78fed589407a0ab49dd5eb6dac02dca9699651dc677002ba06269"}
{"identifier": "_promote", "parameters": {"history": null, "collection_type": null, "options": null}, "return_type": "<not_specific>", "repo": "mmyschyshyn/Vocalaxy", "path": "static/scripts/mvc/history/history-contents.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": 3.0, "license": ["CC-BY-3.0"], "hexsha": "5d996feb08d9983681cbc8e0c2dcf30a28567906", "ext": "js", "size": 14284, "code": "function _promote( history, collection_type, options ){\n        options = options || {};\n        options.url = this.url();\n        options.type = \"POST\";\n        var full_collection_type = collection_type;\n        var element_identifiers = [],\n            name = null;\n        if( collection_type === \"list\" ) {\n            this.chain().each( function( hda ) {\n                var name = hda.attributes.name;\n                var id = hda.get('id');\n                var content_type = hda.attributes.history_content_type;\n                if( content_type === \"dataset\" ) {\n                    if( full_collection_type !== \"list\" ) {\n                        this.log( \"Invalid collection type\" );\n                    }\n                    element_identifiers.push( { name: name, src: \"hda\", id: id } );\n                } else {\n                    if( full_collection_type === \"list\" ) {\n                        full_collection_type = \"list:\" + hda.attributes.collection_type;\n                    } else {\n                        if( full_collection_type !== \"list:\" + hda.attributes.collection_type ) {\n                            this.log( \"Invalid collection type\" );\n                        }\n                    }\n                    element_identifiers.push( { name: name, src: \"hdca\", id: id } );\n                }\n            });\n            name = \"New Dataset List\";\n        } else if( collection_type === \"paired\" ) {\n            var ids = this.ids();\n            if( ids.length !== 2 ){\n            }\n            element_identifiers.push( { name: \"forward\", src: \"hda\", id: ids[ 0 ] } );\n            element_identifiers.push( { name: \"reverse\", src: \"hda\", id: ids[ 1 ] } );\n            name = \"New Dataset Pair\";\n        }\n        options.data = {\n            type: \"dataset_collection\",\n            name: name,\n            collection_type: full_collection_type,\n            element_identifiers: JSON.stringify( element_identifiers )\n        };\n        var xhr = jQuery.ajax( options );\n        xhr.done( function( message, status, responseObj ){\n            history.refresh( );\n        });\n        xhr.fail( function( xhr, status, message ){\n            if( xhr.responseJSON && xhr.responseJSON.error ){\n                error = xhr.responseJSON.error;\n            } else {\n                error = xhr.responseJSON;\n            }\n            xhr.responseText = error;\n        });\n        return xhr;\n    }", "code_tokens": ["function", "_promote", "(", "history", ",", "collection_type", ",", "options", ")", "{", "options", "=", "options", "||", "{", "}", ";", "options", ".", "url", "=", "this", ".", "url", "(", ")", ";", "options", ".", "type", "=", "\"POST\"", ";", "var", "full_collection_type", "=", "collection_type", ";", "var", "element_identifiers", "=", "[", "]", ",", "name", "=", "null", ";", "if", "(", "collection_type", "===", "\"list\"", ")", "{", "this", ".", "chain", "(", ")", ".", "each", "(", "function", "(", "hda", ")", "{", "var", "name", "=", "hda", ".", "attributes", ".", "name", ";", "var", "id", "=", "hda", ".", "get", "(", "'id'", ")", ";", "var", "content_type", "=", "hda", ".", "attributes", ".", "history_content_type", ";", "if", "(", "content_type", "===", "\"dataset\"", ")", "{", "if", "(", "full_collection_type", "!==", "\"list\"", ")", "{", "this", ".", "log", "(", "\"Invalid collection type\"", ")", ";", "}", "element_identifiers", ".", "push", "(", "{", "name", ":", "name", ",", "src", ":", "\"hda\"", ",", "id", ":", "id", "}", ")", ";", "}", "else", "{", "if", "(", "full_collection_type", "===", "\"list\"", ")", "{", "full_collection_type", "=", "\"list:\"", "+", "hda", ".", "attributes", ".", "collection_type", ";", "}", "else", "{", "if", "(", "full_collection_type", "!==", "\"list:\"", "+", "hda", ".", "attributes", ".", "collection_type", ")", "{", "this", ".", "log", "(", "\"Invalid collection type\"", ")", ";", "}", "}", "element_identifiers", ".", "push", "(", "{", "name", ":", "name", ",", "src", ":", "\"hdca\"", ",", "id", ":", "id", "}", ")", ";", "}", "}", ")", ";", "name", "=", "\"New Dataset List\"", ";", "}", "else", "if", "(", "collection_type", "===", "\"paired\"", ")", "{", "var", "ids", "=", "this", ".", "ids", "(", ")", ";", "if", "(", "ids", ".", "length", "!==", "2", ")", "{", "}", "element_identifiers", ".", "push", "(", "{", "name", ":", "\"forward\"", ",", "src", ":", "\"hda\"", ",", "id", ":", "ids", "[", "0", "]", "}", ")", ";", "element_identifiers", ".", "push", "(", "{", "name", ":", "\"reverse\"", ",", "src", ":", "\"hda\"", ",", "id", ":", "ids", "[", "1", "]", "}", ")", ";", "name", "=", "\"New Dataset Pair\"", ";", "}", "options", ".", "data", "=", "{", "type", ":", "\"dataset_collection\"", ",", "name", ":", "name", ",", "collection_type", ":", "full_collection_type", ",", "element_identifiers", ":", "JSON", ".", "stringify", "(", "element_identifiers", ")", "}", ";", "var", "xhr", "=", "jQuery", ".", "ajax", "(", "options", ")", ";", "xhr", ".", "done", "(", "function", "(", "message", ",", "status", ",", "responseObj", ")", "{", "history", ".", "refresh", "(", ")", ";", "}", ")", ";", "xhr", ".", "fail", "(", "function", "(", "xhr", ",", "status", ",", "message", ")", "{", "if", "(", "xhr", ".", "responseJSON", "&&", "xhr", ".", "responseJSON", ".", "error", ")", "{", "error", "=", "xhr", ".", "responseJSON", ".", "error", ";", "}", "else", "{", "error", "=", "xhr", ".", "responseJSON", ";", "}", "xhr", ".", "responseText", "=", "error", ";", "}", ")", ";", "return", "xhr", ";", "}"], "original_docstring": "/** Convert this ad-hoc collection of hdas to a formal collection tracked\n        by the server.\n    **/", "comment": ["//TODO: seems like this would be better in mvc/collections", "// This mechanism is rough - no error handling, allows invalid selections, no way", "// for user to pick/override element identifiers. This is only really meant", "// TODO: Handle duplicate names.", "// TODO: Do something...", "// Do something?"], "docstring_tokens": ["Convert", "this", "ad", "-", "hoc", "collection", "of", "hdas", "to", "a", "formal", "collection", "tracked", "by", "the", "server", "."], "docstring": "Convert this ad-hoc collection of hdas to a formal collection tracked\nby the server.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "history", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "collection_type", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "options", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Convert this ad-hoc collection of hdas to a formal collection tracked\nby the server.", "short_docstring_tokens": ["Convert", "this", "ad", "-", "hoc", "collection", "of", "hdas", "to", "a", "formal", "collection", "tracked", "by", "the", "server", "."], "original_string": "function _promote( history, collection_type, options ){\n//TODO: seems like this would be better in mvc/collections\n        options = options || {};\n        options.url = this.url();\n        options.type = \"POST\";\n        var full_collection_type = collection_type;\n        var element_identifiers = [],\n            name = null;\n\n        // This mechanism is rough - no error handling, allows invalid selections, no way\n        // for user to pick/override element identifiers. This is only really meant\n        if( collection_type === \"list\" ) {\n            this.chain().each( function( hda ) {\n                // TODO: Handle duplicate names.\n                var name = hda.attributes.name;\n                var id = hda.get('id');\n                var content_type = hda.attributes.history_content_type;\n                if( content_type === \"dataset\" ) {\n                    if( full_collection_type !== \"list\" ) {\n                        this.log( \"Invalid collection type\" );\n                    }\n                    element_identifiers.push( { name: name, src: \"hda\", id: id } );\n                } else {\n                    if( full_collection_type === \"list\" ) {\n                        full_collection_type = \"list:\" + hda.attributes.collection_type;\n                    } else {\n                        if( full_collection_type !== \"list:\" + hda.attributes.collection_type ) {\n                            this.log( \"Invalid collection type\" );\n                        }\n                    }\n                    element_identifiers.push( { name: name, src: \"hdca\", id: id } );\n                }\n            });\n            name = \"New Dataset List\";\n        } else if( collection_type === \"paired\" ) {\n            var ids = this.ids();\n            if( ids.length !== 2 ){\n                // TODO: Do something...\n            }\n            element_identifiers.push( { name: \"forward\", src: \"hda\", id: ids[ 0 ] } );\n            element_identifiers.push( { name: \"reverse\", src: \"hda\", id: ids[ 1 ] } );\n            name = \"New Dataset Pair\";\n        }\n        options.data = {\n            type: \"dataset_collection\",\n            name: name,\n            collection_type: full_collection_type,\n            element_identifiers: JSON.stringify( element_identifiers )\n        };\n\n        var xhr = jQuery.ajax( options );\n        xhr.done( function( message, status, responseObj ){\n            history.refresh( );\n        });\n        xhr.fail( function( xhr, status, message ){\n            if( xhr.responseJSON && xhr.responseJSON.error ){\n                error = xhr.responseJSON.error;\n            } else {\n                error = xhr.responseJSON;\n            }\n            xhr.responseText = error;\n            // Do something?\n        });\n        return xhr;\n    }", "id": "590900d8a795c8e2b52733e3ba9e48e48477868663c32ed7799e6cb7d8ab0374"}
{"identifier": "_promote", "parameters": {"history": null, "collection_type": null, "options": null}, "return_type": "<not_specific>", "repo": "hidelab/galaxy-central-hpc", "path": "static/scripts/mvc/history/history-contents.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["CC-BY-3.0"], "hexsha": "50f0ecad7d50ee4f578f99bda377e72e2af413e0", "ext": "js", "size": 11957, "code": "function _promote( history, collection_type, options ){\n        options = options || {};\n        options.url = this.url();\n        options.type = \"POST\";\n        var full_collection_type = collection_type;\n        var element_identifiers = [],\n            name = null;\n        if( collection_type === \"list\" ) {\n            this.chain().each( function( hda ) {\n                var name = hda.attributes.name;\n                var id = hda.get('id');\n                var content_type = hda.attributes.history_content_type;\n                if( content_type === \"dataset\" ) {\n                    if( full_collection_type !== \"list\" ) {\n                        this.log( \"Invalid collection type\" );\n                    }\n                    element_identifiers.push( { name: name, src: \"hda\", id: id } );\n                } else {\n                    if( full_collection_type === \"list\" ) {\n                        full_collection_type = \"list:\" + hda.attributes.collection_type;\n                    } else {\n                        if( full_collection_type !== \"list:\" + hda.attributes.collection_type ) {\n                            this.log( \"Invalid collection type\" );\n                        }\n                    }\n                    element_identifiers.push( { name: name, src: \"hdca\", id: id } );\n                }\n            });\n            name = \"New Dataset List\";\n        } else if( collection_type === \"paired\" ) {\n            var ids = this.ids();\n            if( ids.length !== 2 ){\n            }\n            element_identifiers.push( { name: \"forward\", src: \"hda\", id: ids[ 0 ] } );\n            element_identifiers.push( { name: \"reverse\", src: \"hda\", id: ids[ 1 ] } );\n            name = \"New Dataset Pair\";\n        }\n        options.data = {\n            type: \"dataset_collection\",\n            name: name,\n            collection_type: full_collection_type,\n            element_identifiers: JSON.stringify( element_identifiers )\n        };\n        var xhr = jQuery.ajax( options );\n        xhr.done( function( message, status, responseObj ){\n            history.refresh( );\n        });\n        xhr.fail( function( xhr, status, message ){\n            if( xhr.responseJSON && xhr.responseJSON.error ){\n                error = xhr.responseJSON.error;\n            } else {\n                error = xhr.responseJSON;\n            }\n            xhr.responseText = error;\n        });\n        return xhr;\n    }", "code_tokens": ["function", "_promote", "(", "history", ",", "collection_type", ",", "options", ")", "{", "options", "=", "options", "||", "{", "}", ";", "options", ".", "url", "=", "this", ".", "url", "(", ")", ";", "options", ".", "type", "=", "\"POST\"", ";", "var", "full_collection_type", "=", "collection_type", ";", "var", "element_identifiers", "=", "[", "]", ",", "name", "=", "null", ";", "if", "(", "collection_type", "===", "\"list\"", ")", "{", "this", ".", "chain", "(", ")", ".", "each", "(", "function", "(", "hda", ")", "{", "var", "name", "=", "hda", ".", "attributes", ".", "name", ";", "var", "id", "=", "hda", ".", "get", "(", "'id'", ")", ";", "var", "content_type", "=", "hda", ".", "attributes", ".", "history_content_type", ";", "if", "(", "content_type", "===", "\"dataset\"", ")", "{", "if", "(", "full_collection_type", "!==", "\"list\"", ")", "{", "this", ".", "log", "(", "\"Invalid collection type\"", ")", ";", "}", "element_identifiers", ".", "push", "(", "{", "name", ":", "name", ",", "src", ":", "\"hda\"", ",", "id", ":", "id", "}", ")", ";", "}", "else", "{", "if", "(", "full_collection_type", "===", "\"list\"", ")", "{", "full_collection_type", "=", "\"list:\"", "+", "hda", ".", "attributes", ".", "collection_type", ";", "}", "else", "{", "if", "(", "full_collection_type", "!==", "\"list:\"", "+", "hda", ".", "attributes", ".", "collection_type", ")", "{", "this", ".", "log", "(", "\"Invalid collection type\"", ")", ";", "}", "}", "element_identifiers", ".", "push", "(", "{", "name", ":", "name", ",", "src", ":", "\"hdca\"", ",", "id", ":", "id", "}", ")", ";", "}", "}", ")", ";", "name", "=", "\"New Dataset List\"", ";", "}", "else", "if", "(", "collection_type", "===", "\"paired\"", ")", "{", "var", "ids", "=", "this", ".", "ids", "(", ")", ";", "if", "(", "ids", ".", "length", "!==", "2", ")", "{", "}", "element_identifiers", ".", "push", "(", "{", "name", ":", "\"forward\"", ",", "src", ":", "\"hda\"", ",", "id", ":", "ids", "[", "0", "]", "}", ")", ";", "element_identifiers", ".", "push", "(", "{", "name", ":", "\"reverse\"", ",", "src", ":", "\"hda\"", ",", "id", ":", "ids", "[", "1", "]", "}", ")", ";", "name", "=", "\"New Dataset Pair\"", ";", "}", "options", ".", "data", "=", "{", "type", ":", "\"dataset_collection\"", ",", "name", ":", "name", ",", "collection_type", ":", "full_collection_type", ",", "element_identifiers", ":", "JSON", ".", "stringify", "(", "element_identifiers", ")", "}", ";", "var", "xhr", "=", "jQuery", ".", "ajax", "(", "options", ")", ";", "xhr", ".", "done", "(", "function", "(", "message", ",", "status", ",", "responseObj", ")", "{", "history", ".", "refresh", "(", ")", ";", "}", ")", ";", "xhr", ".", "fail", "(", "function", "(", "xhr", ",", "status", ",", "message", ")", "{", "if", "(", "xhr", ".", "responseJSON", "&&", "xhr", ".", "responseJSON", ".", "error", ")", "{", "error", "=", "xhr", ".", "responseJSON", ".", "error", ";", "}", "else", "{", "error", "=", "xhr", ".", "responseJSON", ";", "}", "xhr", ".", "responseText", "=", "error", ";", "}", ")", ";", "return", "xhr", ";", "}"], "original_docstring": "/** Convert this ad-hoc collection of HDAs to a formal collection tracked\n        by the server.\n    **/", "comment": ["// This mechanism is rough - no error handling, allows invalid selections, no way", "// for user to pick/override element identifiers. This is only really meant", "// TODO: Handle duplicate names.", "// TODO: Do something...", "// Do something?"], "docstring_tokens": ["Convert", "this", "ad", "-", "hoc", "collection", "of", "HDAs", "to", "a", "formal", "collection", "tracked", "by", "the", "server", "."], "docstring": "Convert this ad-hoc collection of HDAs to a formal collection tracked\nby the server.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "history", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "collection_type", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "options", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Convert this ad-hoc collection of HDAs to a formal collection tracked\nby the server.", "short_docstring_tokens": ["Convert", "this", "ad", "-", "hoc", "collection", "of", "HDAs", "to", "a", "formal", "collection", "tracked", "by", "the", "server", "."], "original_string": "function _promote( history, collection_type, options ){\n        options = options || {};\n        options.url = this.url();\n        options.type = \"POST\";\n        var full_collection_type = collection_type;\n        var element_identifiers = [],\n            name = null;\n\n        // This mechanism is rough - no error handling, allows invalid selections, no way\n        // for user to pick/override element identifiers. This is only really meant\n        if( collection_type === \"list\" ) {\n            this.chain().each( function( hda ) {\n                // TODO: Handle duplicate names.\n                var name = hda.attributes.name;\n                var id = hda.get('id');\n                var content_type = hda.attributes.history_content_type;\n                if( content_type === \"dataset\" ) {\n                    if( full_collection_type !== \"list\" ) {\n                        this.log( \"Invalid collection type\" );\n                    }\n                    element_identifiers.push( { name: name, src: \"hda\", id: id } );\n                } else {\n                    if( full_collection_type === \"list\" ) {\n                        full_collection_type = \"list:\" + hda.attributes.collection_type;\n                    } else {\n                        if( full_collection_type !== \"list:\" + hda.attributes.collection_type ) {\n                            this.log( \"Invalid collection type\" );\n                        }\n                    }\n                    element_identifiers.push( { name: name, src: \"hdca\", id: id } );\n                }\n            });\n            name = \"New Dataset List\";\n        } else if( collection_type === \"paired\" ) {\n            var ids = this.ids();\n            if( ids.length !== 2 ){\n                // TODO: Do something...\n            }\n            element_identifiers.push( { name: \"forward\", src: \"hda\", id: ids[ 0 ] } );\n            element_identifiers.push( { name: \"reverse\", src: \"hda\", id: ids[ 1 ] } );\n            name = \"New Dataset Pair\";\n        }\n        options.data = {\n            type: \"dataset_collection\",\n            name: name,\n            collection_type: full_collection_type,\n            element_identifiers: JSON.stringify( element_identifiers )\n        };\n\n        var xhr = jQuery.ajax( options );\n        xhr.done( function( message, status, responseObj ){\n            history.refresh( );\n        });\n        xhr.fail( function( xhr, status, message ){\n            if( xhr.responseJSON && xhr.responseJSON.error ){\n                error = xhr.responseJSON.error;\n            } else {\n                error = xhr.responseJSON;\n            }\n            xhr.responseText = error;\n            // Do something?\n        });\n        return xhr;\n    }", "id": "590900d8a795c8e2b52733e3ba9e48e48477868663c32ed7799e6cb7d8ab0374"}
{"identifier": "wait", "parameters": {"active": null}, "return_type": null, "repo": "mmyschyshyn/Vocalaxy", "path": "static/scripts/mvc/tools/tools-form.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["CC-BY-3.0"], "hexsha": "bf27de7bf244c1ac056f6f4c95c637e7a4d07a4f", "ext": "js", "size": 8169, "code": "function wait(active) {\n                for (var i in self.input_list) {\n                    var field = self.field_list[i];\n                    var input = self.input_list[i];\n                    if (input.is_dynamic && field.wait && field.unwait) {\n                        if (active) {\n                            field.wait();\n                        } else {\n                            field.unwait();\n                        }\n                    }\n                }\n            }", "code_tokens": ["function", "wait", "(", "active", ")", "{", "for", "(", "var", "i", "in", "self", ".", "input_list", ")", "{", "var", "field", "=", "self", ".", "field_list", "[", "i", "]", ";", "var", "input", "=", "self", ".", "input_list", "[", "i", "]", ";", "if", "(", "input", ".", "is_dynamic", "&&", "field", ".", "wait", "&&", "field", ".", "unwait", ")", "{", "if", "(", "active", ")", "{", "field", ".", "wait", "(", ")", ";", "}", "else", "{", "field", ".", "unwait", "(", ")", ";", "}", "}", "}", "}"], "original_docstring": "// activates/disables spinner for dynamic fields to indicate that they are currently being updated", "comment": [], "docstring_tokens": ["activates", "/", "disables", "spinner", "for", "dynamic", "fields", "to", "indicate", "that", "they", "are", "currently", "being", "updated"], "docstring": "activates/disables spinner for dynamic fields to indicate that they are currently being updated", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "active", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "activates/disables spinner for dynamic fields to indicate that they are currently being updated", "short_docstring_tokens": ["activates", "/", "disables", "spinner", "for", "dynamic", "fields", "to", "indicate", "that", "they", "are", "currently", "being", "updated"], "original_string": "function wait(active) {\n                for (var i in self.input_list) {\n                    var field = self.field_list[i];\n                    var input = self.input_list[i];\n                    if (input.is_dynamic && field.wait && field.unwait) {\n                        if (active) {\n                            field.wait();\n                        } else {\n                            field.unwait();\n                        }\n                    }\n                }\n            }", "id": "32505565e5df5b62ac3f60ed935b5688e1adea686de6af7521df463db6eb8634"}
{"identifier": "wait", "parameters": {"active": null}, "return_type": null, "repo": "bioinfo-center-pasteur-fr/galaxy-pasteur", "path": "static/scripts/mvc/tools/tools-form.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["CC-BY-3.0"], "hexsha": "19d039aba41cb0b9312ba0a83fcbf0a4d874b9d2", "ext": "js", "size": 14872, "code": "function wait(active) {\n                for (var i in self.input_list) {\n                    var field = self.field_list[i];\n                    var input = self.input_list[i];\n                    if (input.is_dynamic && field.wait && field.unwait) {\n                        if (active) {\n                            field.wait();\n                        } else {\n                            field.unwait();\n                        }\n                    }\n                }\n            }", "code_tokens": ["function", "wait", "(", "active", ")", "{", "for", "(", "var", "i", "in", "self", ".", "input_list", ")", "{", "var", "field", "=", "self", ".", "field_list", "[", "i", "]", ";", "var", "input", "=", "self", ".", "input_list", "[", "i", "]", ";", "if", "(", "input", ".", "is_dynamic", "&&", "field", ".", "wait", "&&", "field", ".", "unwait", ")", "{", "if", "(", "active", ")", "{", "field", ".", "wait", "(", ")", ";", "}", "else", "{", "field", ".", "unwait", "(", ")", ";", "}", "}", "}", "}"], "original_docstring": "// activates/disables spinner for dynamic fields to indicate that they are currently being updated", "comment": [], "docstring_tokens": ["activates", "/", "disables", "spinner", "for", "dynamic", "fields", "to", "indicate", "that", "they", "are", "currently", "being", "updated"], "docstring": "activates/disables spinner for dynamic fields to indicate that they are currently being updated", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "active", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "activates/disables spinner for dynamic fields to indicate that they are currently being updated", "short_docstring_tokens": ["activates", "/", "disables", "spinner", "for", "dynamic", "fields", "to", "indicate", "that", "they", "are", "currently", "being", "updated"], "original_string": "function wait(active) {\n                for (var i in self.input_list) {\n                    var field = self.field_list[i];\n                    var input = self.input_list[i];\n                    if (input.is_dynamic && field.wait && field.unwait) {\n                        if (active) {\n                            field.wait();\n                        } else {\n                            field.unwait();\n                        }\n                    }\n                }\n            }", "id": "32505565e5df5b62ac3f60ed935b5688e1adea686de6af7521df463db6eb8634"}
{"identifier": "copyLibs", "parameters": {}, "return_type": null, "repo": "mmyschyshyn/Vocalaxy", "path": "client/GruntFile.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": 3.0, "license": ["CC-BY-3.0"], "hexsha": "c8e08c11938f2308a98ce9bcc108fb0ddac59912", "ext": "js", "size": 6388, "code": "function copyLibs(){\n    var libraryLocations = grunt.config( 'libraryLocations' );\n    for( var libName in libraryLocations ){\n      if( libraryLocations.hasOwnProperty( libName ) ){\n        var BOWER_DIR = 'bower_components',\n            location = libraryLocations[ libName ],\n            source = [ BOWER_DIR, libName, location[0] ].join( '/' ),\n            destination = 'galaxy/scripts/libs/' + location[1];\n        grunt.log.writeln( source + ' -> ' + destination );\n        grunt.file.copy( source, destination );\n      }\n    }\n  }", "code_tokens": ["function", "copyLibs", "(", ")", "{", "var", "libraryLocations", "=", "grunt", ".", "config", "(", "'libraryLocations'", ")", ";", "for", "(", "var", "libName", "in", "libraryLocations", ")", "{", "if", "(", "libraryLocations", ".", "hasOwnProperty", "(", "libName", ")", ")", "{", "var", "BOWER_DIR", "=", "'bower_components'", ",", "location", "=", "libraryLocations", "[", "libName", "]", ",", "source", "=", "[", "BOWER_DIR", ",", "libName", ",", "location", "[", "0", "]", "]", ".", "join", "(", "'/'", ")", ",", "destination", "=", "'galaxy/scripts/libs/'", "+", "location", "[", "1", "]", ";", "grunt", ".", "log", ".", "writeln", "(", "source", "+", "' -> '", "+", "destination", ")", ";", "grunt", ".", "file", ".", "copy", "(", "source", ",", "destination", ")", ";", "}", "}", "}"], "original_docstring": "/** copy external libraries from bower components to scripts/libs */", "comment": [], "docstring_tokens": ["copy", "external", "libraries", "from", "bower", "components", "to", "scripts", "/", "libs"], "docstring": "copy external libraries from bower components to scripts/libs", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "copy external libraries from bower components to scripts/libs", "short_docstring_tokens": ["copy", "external", "libraries", "from", "bower", "components", "to", "scripts", "/", "libs"], "original_string": "function copyLibs(){\n    var libraryLocations = grunt.config( 'libraryLocations' );\n    for( var libName in libraryLocations ){\n      if( libraryLocations.hasOwnProperty( libName ) ){\n\n        var BOWER_DIR = 'bower_components',\n            location = libraryLocations[ libName ],\n            source = [ BOWER_DIR, libName, location[0] ].join( '/' ),\n            destination = 'galaxy/scripts/libs/' + location[1];\n        grunt.log.writeln( source + ' -> ' + destination );\n        grunt.file.copy( source, destination );\n      }\n    }\n  }", "id": "0989355b62d8d9a3e237b926785d1001d16823364c6d5fee55c77c0739f36d79"}
{"identifier": "_cleanup", "parameters": {}, "return_type": null, "repo": "anandsuresh/smart-log", "path": "lib/sinks/syslog.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "50ebf884bc31e47ca7cd99dc63857ed84a0d0346", "ext": "js", "size": 4538, "code": "_cleanup () {\n    const props = this._props\n    if (props._client !== null) {\n      props._client.close()\n      props._client = null\n    }\n  }", "code_tokens": ["_cleanup", "(", ")", "{", "const", "props", "=", "this", ".", "_props", "if", "(", "props", ".", "_client", "!==", "null", ")", "{", "props", ".", "_client", ".", "close", "(", ")", "props", ".", "_client", "=", "null", "}", "}"], "original_docstring": "/**\n   * Releases resources held by the stream\n   */", "comment": [], "docstring_tokens": ["Releases", "resources", "held", "by", "the", "stream"], "docstring": "Releases resources held by the stream", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Releases resources held by the stream", "short_docstring_tokens": ["Releases", "resources", "held", "by", "the", "stream"], "original_string": "_cleanup () {\n    const props = this._props\n    if (props._client !== null) {\n      props._client.close()\n      props._client = null\n    }\n  }", "id": "05460ba6f9f579092f1ea371b8adec4775420db5fc79f16f04d8008f55f91a0c"}
{"identifier": "_pushOrEnqueue", "parameters": {"obj": null}, "return_type": null, "repo": "anandsuresh/smart-log", "path": "lib/agent.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "bd39030e869cb2ceb8177130a3402476793d8eae", "ext": "js", "size": 4543, "code": "_pushOrEnqueue (obj) {\n    if (!this._readableState.destroyed) {\n      const props = this._props\n      if (props._canPush) {\n        props._canPush = this.push(obj)\n      } else {\n        props._queue.enqueue(obj)\n      }\n    }\n  }", "code_tokens": ["_pushOrEnqueue", "(", "obj", ")", "{", "if", "(", "!", "this", ".", "_readableState", ".", "destroyed", ")", "{", "const", "props", "=", "this", ".", "_props", "if", "(", "props", ".", "_canPush", ")", "{", "props", ".", "_canPush", "=", "this", ".", "push", "(", "obj", ")", "}", "else", "{", "props", ".", "_queue", ".", "enqueue", "(", "obj", ")", "}", "}", "}"], "original_docstring": "/**\n   * Pushes or enqueues data for the stream\n   *\n   * @param {Object|Buffer|String|null} chunk The data to push or enqueue\n   */", "comment": [], "docstring_tokens": ["Pushes", "or", "enqueues", "data", "for", "the", "stream", "@param", "{", "Object|Buffer|String|null", "}", "chunk", "The", "data", "to", "push", "or", "enqueue"], "docstring": "Pushes or enqueues data for the stream\n@param {Object|Buffer|String|null} chunk The data to push or enqueue", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "obj", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Pushes or enqueues data for the stream\n @param {Object|Buffer|String|null} chunk The data to push or enqueue", "short_docstring_tokens": ["Pushes", "or", "enqueues", "data", "for", "the", "stream", "@param", "{", "Object|Buffer|String|null", "}", "chunk", "The", "data", "to", "push", "or", "enqueue"], "original_string": "_pushOrEnqueue (obj) {\n    if (!this._readableState.destroyed) {\n      const props = this._props\n\n      if (props._canPush) {\n        props._canPush = this.push(obj)\n      } else {\n        props._queue.enqueue(obj)\n      }\n    }\n  }", "id": "eff75e16255dd8ae15a3771fe08bd815c998a6b9cc0e2d46c0d3f4e6b5a1fecd"}
{"identifier": "_log", "parameters": {"level": null, "args": null}, "return_type": "<not_specific>", "repo": "anandsuresh/smart-log", "path": "lib/agent.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "bd39030e869cb2ceb8177130a3402476793d8eae", "ext": "js", "size": 4543, "code": "_log (level, ...args) {\n    const props = this._props\n    const log = args.reduce((acc, arg) => {\n      if (arg instanceof Error) {\n        acc.error = arg\n      } else if (typeof arg === 'string') {\n        acc.msg = arg\n      } else {\n        Object.assign(acc, arg)\n      }\n      return acc\n    }, Object.assign({ts: Date.now(), level: level}, props.default))\n    this._pushOrEnqueue(log)\n  }", "code_tokens": ["_log", "(", "level", ",", "...", "args", ")", "{", "const", "props", "=", "this", ".", "_props", "const", "log", "=", "args", ".", "reduce", "(", "(", "acc", ",", "arg", ")", "=>", "{", "if", "(", "arg", "instanceof", "Error", ")", "{", "acc", ".", "error", "=", "arg", "}", "else", "if", "(", "typeof", "arg", "===", "'string'", ")", "{", "acc", ".", "msg", "=", "arg", "}", "else", "{", "Object", ".", "assign", "(", "acc", ",", "arg", ")", "}", "return", "acc", "}", ",", "Object", ".", "assign", "(", "{", "ts", ":", "Date", ".", "now", "(", ")", ",", "level", ":", "level", "}", ",", "props", ".", "default", ")", ")", "this", ".", "_pushOrEnqueue", "(", "log", ")", "}"], "original_docstring": "/**\n   * Internal method that creates a log object\n   *\n   * @param {String} level The log level to use for the log-stream object\n   * @param {*} args Arguments to be logged\n   */", "comment": [], "docstring_tokens": ["Internal", "method", "that", "creates", "a", "log", "object", "@param", "{", "String", "}", "level", "The", "log", "level", "to", "use", "for", "the", "log", "-", "stream", "object", "@param", "{", "*", "}", "args", "Arguments", "to", "be", "logged"], "docstring": "Internal method that creates a log object\n@param {String} level The log level to use for the log-stream object\n@param {*} args Arguments to be logged", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "level", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "args", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Internal method that creates a log object\n @param {String} level The log level to use for the log-stream object\n @param {*} args Arguments to be logged", "short_docstring_tokens": ["Internal", "method", "that", "creates", "a", "log", "object", "@param", "{", "String", "}", "level", "The", "log", "level", "to", "use", "for", "the", "log", "-", "stream", "object", "@param", "{", "*", "}", "args", "Arguments", "to", "be", "logged"], "original_string": "_log (level, ...args) {\n    const props = this._props\n    const log = args.reduce((acc, arg) => {\n      if (arg instanceof Error) {\n        acc.error = arg\n      } else if (typeof arg === 'string') {\n        acc.msg = arg\n      } else {\n        Object.assign(acc, arg)\n      }\n\n      return acc\n    }, Object.assign({ts: Date.now(), level: level}, props.default))\n\n    this._pushOrEnqueue(log)\n  }", "id": "a091eaf7849e893689f8612a72e2b2d44eb775b3d124739202d9a0e842bcc081"}
{"identifier": "_cleanup", "parameters": {"cb": null}, "return_type": null, "repo": "anandsuresh/smart-log", "path": "lib/sinks/rotating_file.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "958f0c16a9338e6d66c75f30dcdf2d78811e0650", "ext": "js", "size": 3670, "code": "_cleanup (cb) {\n    clearInterval(this._props._timer)\n    this._closeFiles(true)\n    cb()\n  }", "code_tokens": ["_cleanup", "(", "cb", ")", "{", "clearInterval", "(", "this", ".", "_props", ".", "_timer", ")", "this", ".", "_closeFiles", "(", "true", ")", "cb", "(", ")", "}"], "original_docstring": "/**\n   * Releases resources held by the stream\n   */", "comment": [], "docstring_tokens": ["Releases", "resources", "held", "by", "the", "stream"], "docstring": "Releases resources held by the stream", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "cb", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Releases resources held by the stream", "short_docstring_tokens": ["Releases", "resources", "held", "by", "the", "stream"], "original_string": "_cleanup (cb) {\n    clearInterval(this._props._timer)\n    this._closeFiles(true)\n    cb()\n  }", "id": "89c6eedd0e7f2779948abba44ca1f8492a886962c38bfd018b51858c8157596c"}
{"identifier": "_closeFiles", "parameters": {"endAll": null}, "return_type": null, "repo": "anandsuresh/smart-log", "path": "lib/sinks/rotating_file.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "958f0c16a9338e6d66c75f30dcdf2d78811e0650", "ext": "js", "size": 3670, "code": "_closeFiles (endAll) {\n    const fileStreams = this._props._fileStreams\n    Object.keys(fileStreams).forEach(id => {\n      const fileStream = fileStreams[id]\n      if (endAll || !fileStream.active) {\n        fileStream.stream.end()\n      } else {\n        fileStream.active = false\n      }\n    })\n  }", "code_tokens": ["_closeFiles", "(", "endAll", ")", "{", "const", "fileStreams", "=", "this", ".", "_props", ".", "_fileStreams", "Object", ".", "keys", "(", "fileStreams", ")", ".", "forEach", "(", "id", "=>", "{", "const", "fileStream", "=", "fileStreams", "[", "id", "]", "if", "(", "endAll", "||", "!", "fileStream", ".", "active", ")", "{", "fileStream", ".", "stream", ".", "end", "(", ")", "}", "else", "{", "fileStream", ".", "active", "=", "false", "}", "}", ")", "}"], "original_docstring": "/**\n   * Closes all open, but inactive file streams\n   *\n   * @param {Boolean} endAll Whether or not to end all file streams\n   */", "comment": [], "docstring_tokens": ["Closes", "all", "open", "but", "inactive", "file", "streams", "@param", "{", "Boolean", "}", "endAll", "Whether", "or", "not", "to", "end", "all", "file", "streams"], "docstring": "Closes all open, but inactive file streams\n@param {Boolean} endAll Whether or not to end all file streams", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "endAll", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Closes all open, but inactive file streams\n @param {Boolean} endAll Whether or not to end all file streams", "short_docstring_tokens": ["Closes", "all", "open", "but", "inactive", "file", "streams", "@param", "{", "Boolean", "}", "endAll", "Whether", "or", "not", "to", "end", "all", "file", "streams"], "original_string": "_closeFiles (endAll) {\n    const fileStreams = this._props._fileStreams\n    Object.keys(fileStreams).forEach(id => {\n      const fileStream = fileStreams[id]\n      if (endAll || !fileStream.active) {\n        fileStream.stream.end()\n      } else {\n        fileStream.active = false\n      }\n    })\n  }", "id": "833c4077d4600b1bff8b182963e113703b874e40032826328528fbe1c5e0d330"}
{"identifier": "DirectConnectionProvider", "parameters": {"config": null, "instanceConfig": null, "logger": null, "plugins": null}, "return_type": null, "repo": "tobiashofmann/ui5-uiveri5", "path": "src/connection/directConnectionProvider.js", "language": "JavaScript", "stars_count": 130.0, "issues_count": 273.0, "forks_count": 70.0, "license": ["Apache-2.0", "MIT"], "hexsha": "99406d4f63a4a82a1dbda5fbb4388f7a3377db9b", "ext": "js", "size": 25151, "code": "function DirectConnectionProvider(config, instanceConfig, logger, plugins) {\n  ConnectionProvider.call(this, config, instanceConfig, logger, plugins);\n  this.seleniumConfig = {};\n  this.seleniumConfig.executables = {};\n  this.seleniumConfig.address = config.seleniumAddress;\n  this.seleniumConfig.host = config.seleniumHost;\n  this.seleniumConfig.port = config.seleniumPort;\n  this.seleniumConfig.useSeleniumJarFlag = \n    typeof config.useSeleniumJar !== 'undefined' ? config.useSeleniumJar : false;\n  this.seleniumConfig.addressProxy = config.seleniumAddressProxy;\n  this.seleniumConfig.seleniumLoopback =\n    typeof config.seleniumLoopback !== 'undefined' ? config.seleniumLoopback : false;\n  this.binaries = instanceConfig.binaries;\n  this.runtimes = [];\n  this.latestDriverVersionResolver = new LatestDriverVersionResolver(config, {\n    latestVersionRegexp: LATEST_VERSION_REGEXP\n  }, logger);\n}", "code_tokens": ["function", "DirectConnectionProvider", "(", "config", ",", "instanceConfig", ",", "logger", ",", "plugins", ")", "{", "ConnectionProvider", ".", "call", "(", "this", ",", "config", ",", "instanceConfig", ",", "logger", ",", "plugins", ")", ";", "this", ".", "seleniumConfig", "=", "{", "}", ";", "this", ".", "seleniumConfig", ".", "executables", "=", "{", "}", ";", "this", ".", "seleniumConfig", ".", "address", "=", "config", ".", "seleniumAddress", ";", "this", ".", "seleniumConfig", ".", "host", "=", "config", ".", "seleniumHost", ";", "this", ".", "seleniumConfig", ".", "port", "=", "config", ".", "seleniumPort", ";", "this", ".", "seleniumConfig", ".", "useSeleniumJarFlag", "=", "typeof", "config", ".", "useSeleniumJar", "!==", "'undefined'", "?", "config", ".", "useSeleniumJar", ":", "false", ";", "this", ".", "seleniumConfig", ".", "addressProxy", "=", "config", ".", "seleniumAddressProxy", ";", "this", ".", "seleniumConfig", ".", "seleniumLoopback", "=", "typeof", "config", ".", "seleniumLoopback", "!==", "'undefined'", "?", "config", ".", "seleniumLoopback", ":", "false", ";", "this", ".", "binaries", "=", "instanceConfig", ".", "binaries", ";", "this", ".", "runtimes", "=", "[", "]", ";", "this", ".", "latestDriverVersionResolver", "=", "new", "LatestDriverVersionResolver", "(", "config", ",", "{", "latestVersionRegexp", ":", "LATEST_VERSION_REGEXP", "}", ",", "logger", ")", ";", "}"], "original_docstring": "/**\n * Provides connection to the test environment\n * @constructor\n * @param config - config\n * @param logger - logger\n */", "comment": [], "docstring_tokens": ["Provides", "connection", "to", "the", "test", "environment", "@constructor", "@param", "config", "-", "config", "@param", "logger", "-", "logger"], "docstring": "Provides connection to the test environment\n@constructor\n@param config - config\n@param logger - logger", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "config", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "instanceConfig", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "logger", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "plugins", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Provides connection to the test environment\n @constructor\n @param config - config\n @param logger - logger", "short_docstring_tokens": ["Provides", "connection", "to", "the", "test", "environment", "@constructor", "@param", "config", "-", "config", "@param", "logger", "-", "logger"], "original_string": "function DirectConnectionProvider(config, instanceConfig, logger, plugins) {\n  ConnectionProvider.call(this, config, instanceConfig, logger, plugins);\n\n  this.seleniumConfig = {};\n  this.seleniumConfig.executables = {};\n  this.seleniumConfig.address = config.seleniumAddress;\n  this.seleniumConfig.host = config.seleniumHost;\n  this.seleniumConfig.port = config.seleniumPort;\n  this.seleniumConfig.useSeleniumJarFlag = \n    typeof config.useSeleniumJar !== 'undefined' ? config.useSeleniumJar : false;\n  this.seleniumConfig.addressProxy = config.seleniumAddressProxy;\n  this.seleniumConfig.seleniumLoopback =\n    typeof config.seleniumLoopback !== 'undefined' ? config.seleniumLoopback : false;\n  this.binaries = instanceConfig.binaries;\n\n  this.runtimes = [];\n  this.latestDriverVersionResolver = new LatestDriverVersionResolver(config, {\n    latestVersionRegexp: LATEST_VERSION_REGEXP\n  }, logger);\n}", "id": "87b8bd2a3913c89b95d5ca9443b4ac83e92d519ac2c8571295f43940df0b1e04"}
{"identifier": "lintFilter", "parameters": {"id": null}, "return_type": "<not_specific>", "repo": "i80and/greni", "path": "index.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "329bea8ab66a26b48451c101b4cbc6e5ed1a87e4", "ext": "js", "size": 10641, "code": "function lintFilter(id) {\n        if (id.indexOf('/node_modules/') >= 0) {\n            return false\n        }\n        for (let key of Object.keys(config._componentPaths)) {\n            key = config._componentPaths[key]\n            if (id.indexOf(key) >= 0) {\n                return false\n            }\n        }\n        return true\n    }", "code_tokens": ["function", "lintFilter", "(", "id", ")", "{", "if", "(", "id", ".", "indexOf", "(", "'/node_modules/'", ")", ">=", "0", ")", "{", "return", "false", "}", "for", "(", "let", "key", "of", "Object", ".", "keys", "(", "config", ".", "_componentPaths", ")", ")", "{", "key", "=", "config", ".", "_componentPaths", "[", "key", "]", "if", "(", "id", ".", "indexOf", "(", "key", ")", ">=", "0", ")", "{", "return", "false", "}", "}", "return", "true", "}"], "original_docstring": "// Don't lint components or node_modules", "comment": [], "docstring_tokens": ["Don", "'", "t", "lint", "components", "or", "node_modules"], "docstring": "Don't lint components or node_modules", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "id", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Don't lint components or node_modules", "short_docstring_tokens": ["Don", "'", "t", "lint", "components", "or", "node_modules"], "original_string": "function lintFilter(id) {\n        if (id.indexOf('/node_modules/') >= 0) {\n            return false\n        }\n\n        for (let key of Object.keys(config._componentPaths)) {\n            key = config._componentPaths[key]\n            if (id.indexOf(key) >= 0) {\n                return false\n            }\n        }\n\n        return true\n    }", "id": "43f10125346b951df2fa0db8bc9f25e01e5b30dcfc1aeb0bc5d4422dc2f3c207"}
{"identifier": "waitForLatch", "parameters": {"name": null}, "return_type": null, "repo": "andychu/webpipe", "path": "latch/latch.js", "language": "JavaScript", "stars_count": 18.0, "issues_count": NaN, "forks_count": 1.0, "license": ["BSD-3-Clause"], "hexsha": "8609e17303588e7f1d1b11f9d6737426f8c5f965", "ext": "js", "size": 1071, "code": "function waitForLatch(name) {\n  var url = '/-/latch/' + name;\n  $.ajax({\n      url: url,\n      type: 'GET',\n      success: function(data){ \n          $('#latch-status').text(\"response: \" + data);\n          location.reload();\n      },\n      error: function(jqXhr, textStatus, errorThrown) {\n        $('#latch-status').text(\n          \"error contacting \" + url + \": \" + jqXhr.responseText);\n      }\n  });\n}", "code_tokens": ["function", "waitForLatch", "(", "name", ")", "{", "var", "url", "=", "'/-/latch/'", "+", "name", ";", "$", ".", "ajax", "(", "{", "url", ":", "url", ",", "type", ":", "'GET'", ",", "success", ":", "function", "(", "data", ")", "{", "$", "(", "'#latch-status'", ")", ".", "text", "(", "\"response: \"", "+", "data", ")", ";", "location", ".", "reload", "(", ")", ";", "}", ",", "error", ":", "function", "(", "jqXhr", ",", "textStatus", ",", "errorThrown", ")", "{", "$", "(", "'#latch-status'", ")", ".", "text", "(", "\"error contacting \"", "+", "url", "+", "\": \"", "+", "jqXhr", ".", "responseText", ")", ";", "}", "}", ")", ";", "}"], "original_docstring": "// Continuously get from a latch.  Depends on jQuery.", "comment": ["//$('#latch-status').text(\"Waiting for change\");", "// TODO: use raw XHR to get rid of jQuery dependency.", "// Show error from the server."], "docstring_tokens": ["Continuously", "get", "from", "a", "latch", ".", "Depends", "on", "jQuery", "."], "docstring": "Continuously get from a latch.  Depends on jQuery.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "name", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Continuously get from a latch.", "short_docstring_tokens": ["Continuously", "get", "from", "a", "latch", "."], "original_string": "function waitForLatch(name) {\n  //$('#latch-status').text(\"Waiting for change\");\n\n  var url = '/-/latch/' + name;\n\n  // TODO: use raw XHR to get rid of jQuery dependency.\n  $.ajax({\n      url: url,\n      type: 'GET',\n      success: function(data){ \n          $('#latch-status').text(\"response: \" + data);\n          location.reload();\n      },\n      error: function(jqXhr, textStatus, errorThrown) {\n        // Show error from the server.\n        $('#latch-status').text(\n          \"error contacting \" + url + \": \" + jqXhr.responseText);\n      }\n  });\n}", "id": "588a1406a982d3b40b39941be05b6a2e2ae5901b5191f8e100cff9357dc9fc4e"}
{"identifier": "cancelPreviousDestOrderIfChanged", "parameters": {"side": null, "size": null, "source_price": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/replicate.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "1cb0a5ca00f4b9b889a9d3292fb1b79bf46258d1", "ext": "js", "size": 22091, "code": "async function cancelPreviousDestOrderIfChanged(side, size, source_price) {\n\tlet dest_order = assocDestOrdersBySourcePrice[source_price];\n\tif (!dest_order)\n\t\treturn true;\n\tif (dest_order.size === 0)\n\t\tthrow Error(\"0-sized dest order \" + dest_order.hash);\n\tif (dest_order.size === size) { \n\t\tconsole.log(\"order \" + size + \" GB at source price \" + source_price + \" already exists\");\n\t\treturn false;\n\t}\n\tconsole.log(\"will cancel previous \" + side + \" order at source price \" + source_price);\n\tawait cancelOrderAndCheckLater(dest_order.hash);\n\treturn true; \n}", "code_tokens": ["async", "function", "cancelPreviousDestOrderIfChanged", "(", "side", ",", "size", ",", "source_price", ")", "{", "let", "dest_order", "=", "assocDestOrdersBySourcePrice", "[", "source_price", "]", ";", "if", "(", "!", "dest_order", ")", "return", "true", ";", "if", "(", "dest_order", ".", "size", "===", "0", ")", "throw", "Error", "(", "\"0-sized dest order \"", "+", "dest_order", ".", "hash", ")", ";", "if", "(", "dest_order", ".", "size", "===", "size", ")", "{", "console", ".", "log", "(", "\"order \"", "+", "size", "+", "\" GB at source price \"", "+", "source_price", "+", "\" already exists\"", ")", ";", "return", "false", ";", "}", "console", ".", "log", "(", "\"will cancel previous \"", "+", "side", "+", "\" order at source price \"", "+", "source_price", ")", ";", "await", "cancelOrderAndCheckLater", "(", "dest_order", ".", "hash", ")", ";", "return", "true", ";", "}"], "original_docstring": "// returns true if a previous order not exists or is different and was cancelled", "comment": ["// unchanged", "// size changed, cancel the old order first", "// order cancelled or modified", "//return true;"], "docstring_tokens": ["returns", "true", "if", "a", "previous", "order", "not", "exists", "or", "is", "different", "and", "was", "cancelled"], "docstring": "returns true if a previous order not exists or is different and was cancelled", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "side", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "size", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "source_price", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "returns true if a previous order not exists or is different and was cancelled", "short_docstring_tokens": ["returns", "true", "if", "a", "previous", "order", "not", "exists", "or", "is", "different", "and", "was", "cancelled"], "original_string": "async function cancelPreviousDestOrderIfChanged(side, size, source_price) {\n\tlet dest_order = assocDestOrdersBySourcePrice[source_price];\n\tif (!dest_order)\n\t\treturn true;\n\tif (dest_order.size === 0)\n\t\tthrow Error(\"0-sized dest order \" + dest_order.hash);\n\tif (dest_order.size === size) { // unchanged\n\t\tconsole.log(\"order \" + size + \" GB at source price \" + source_price + \" already exists\");\n\t\treturn false;\n\t}\n\t// size changed, cancel the old order first\n\tconsole.log(\"will cancel previous \" + side + \" order at source price \" + source_price);\n\tawait cancelOrderAndCheckLater(dest_order.hash);\n\treturn true; // order cancelled or modified\n\t//return true;\n}", "id": "52e585c96c77a5b19f9ababbabccd3264ac9628f8a5f2c23e91751304d20fc71"}
{"identifier": "logAllWsMessages", "parameters": {"flag": null}, "return_type": null, "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "logAllWsMessages(flag)\n{\n    this._logAllWsMessages = flag;\n    if (null !== this._connection)\n    {\n        this._connection.logAllWsMessages(flag);\n    }\n}", "code_tokens": ["logAllWsMessages", "(", "flag", ")", "{", "this", ".", "_logAllWsMessages", "=", "flag", ";", "if", "(", "null", "!==", "this", ".", "_connection", ")", "{", "this", ".", "_connection", ".", "logAllWsMessages", "(", "flag", ")", ";", "}", "}"], "original_docstring": "/**\n * Enable / disable logging of all received WS messages\n *\n * @param {boolean} true to enable, false to disable\n */", "comment": [], "docstring_tokens": ["Enable", "/", "disable", "logging", "of", "all", "received", "WS", "messages", "@param", "{", "boolean", "}", "true", "to", "enable", "false", "to", "disable"], "docstring": "Enable / disable logging of all received WS messages\n@param {boolean} true to enable, false to disable", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "flag", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Enable / disable logging of all received WS messages\n @param {boolean} true to enable, false to disable", "short_docstring_tokens": ["Enable", "/", "disable", "logging", "of", "all", "received", "WS", "messages", "@param", "{", "boolean", "}", "true", "to", "enable", "false", "to", "disable"], "original_string": "logAllWsMessages(flag)\n{\n    this._logAllWsMessages = flag;\n    if (null !== this._connection)\n    {\n        this._connection.logAllWsMessages(flag);\n    }\n}", "id": "1c89770e340bc0c07722a22209cc5624d5ce9d4eff19f4ad9c85a72ea8099621"}
{"identifier": "_initializeMarketsPair", "parameters": {"timestamp": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "_initializeMarketsPair(timestamp)\n{\n    let obj = {\n        timestamp:timestamp,\n        lastCseq:0,\n        lastUpdateCseq:0\n    }\n    return obj;\n}", "code_tokens": ["_initializeMarketsPair", "(", "timestamp", ")", "{", "let", "obj", "=", "{", "timestamp", ":", "timestamp", ",", "lastCseq", ":", "0", ",", "lastUpdateCseq", ":", "0", "}", "return", "obj", ";", "}"], "original_docstring": "/**\n * Initialize markets subscriptions for a given pair\n *\n * @param {float} timestamp timestamp of the first subscription\n */", "comment": ["// last time subscription for current pair has changed"], "docstring_tokens": ["Initialize", "markets", "subscriptions", "for", "a", "given", "pair", "@param", "{", "float", "}", "timestamp", "timestamp", "of", "the", "first", "subscription"], "docstring": "Initialize markets subscriptions for a given pair\n@param {float} timestamp timestamp of the first subscription", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "timestamp", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Initialize markets subscriptions for a given pair\n @param {float} timestamp timestamp of the first subscription", "short_docstring_tokens": ["Initialize", "markets", "subscriptions", "for", "a", "given", "pair", "@param", "{", "float", "}", "timestamp", "timestamp", "of", "the", "first", "subscription"], "original_string": "_initializeMarketsPair(timestamp)\n{\n    let obj = {\n        // last time subscription for current pair has changed\n        timestamp:timestamp,\n        lastCseq:0,\n        lastUpdateCseq:0\n    }\n    return obj;\n}", "id": "bfe78e46f9f573ce531081606153ba592c7089059c542fac2bcbb74a75fb3858"}
{"identifier": "subscribeToMarkets", "parameters": {"pairs": null, "reset": null, "connect": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "subscribeToMarkets(pairs, reset, connect)\n{\n    if (undefined === connect)\n    {\n        connect = true;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        subscribe:[],\n        unsubscribe:[],\n        resync:[]\n    };\n    let updated = false;\n    if (undefined === reset || false === reset)\n    {\n        _.forEach(pairs, (p) => {\n            if (undefined === this._subscriptions.markets.pairs[p])\n            {\n                this._subscriptions.markets.pairs[p] = this._initializeMarketsPair(timestamp);\n                this._initializeLastTrade(p);\n                changes.subscribe.push({entity:'market',pair:p});\n                changes.resync.push({entity:'orderBook',pair:p})\n                updated = true;\n            }\n        });\n    }\n    else\n    {\n        let newPairs = {};\n        _.forEach(pairs, (p) => {\n            if (undefined !== newPairs[p])\n            {\n                return;\n            }\n            this._initializeLastTrade(p);\n            if (undefined === this._subscriptions.markets.pairs[p])\n            {\n                newPairs[p] = this._initializeMarketsPair(timestamp);\n                changes.subscribe.push({entity:'market',pair:p});\n                changes.resync.push({entity:'orderBook',pair:p})\n                updated = true;\n            }\n            else\n            {\n                newPairs[p] = this._subscriptions.markets.pairs[p];\n            }\n        });\n        _.forEach(this._subscriptions.markets.pairs, (obj, p) => {\n            if (undefined === newPairs[p])\n            {\n                this._resetLastTrade(p);\n                changes.unsubscribe.push({entity:'market',pair:p});\n                if (this._reconnectAfterUnsubscribingFromMarkets.reconnect)\n                {\n                    if (undefined === this._unsubscribedMarkets.pairs[p])\n                    {\n                        this._unsubscribedMarkets.pairs[p] = timestamp;\n                        ++this._unsubscribedMarkets.count;\n                    }\n                }\n                updated = true;\n            }\n        });\n        this._subscriptions.markets.pairs = newPairs;\n    }\n    if (updated)\n    {\n        if (DEBUG_ENABLED)\n        {\n            this._debugChanges(changes);\n        }\n        this._subscriptions.markets.timestamp = timestamp;\n        this._processChanges(changes, connect);\n    }\n}", "code_tokens": ["subscribeToMarkets", "(", "pairs", ",", "reset", ",", "connect", ")", "{", "if", "(", "undefined", "===", "connect", ")", "{", "connect", "=", "true", ";", "}", "let", "timestamp", "=", "Date", ".", "now", "(", ")", "/", "1000.0", ";", "let", "changes", "=", "{", "subscribe", ":", "[", "]", ",", "unsubscribe", ":", "[", "]", ",", "resync", ":", "[", "]", "}", ";", "let", "updated", "=", "false", ";", "if", "(", "undefined", "===", "reset", "||", "false", "===", "reset", ")", "{", "_", ".", "forEach", "(", "pairs", ",", "(", "p", ")", "=>", "{", "if", "(", "undefined", "===", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", "[", "p", "]", ")", "{", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", "[", "p", "]", "=", "this", ".", "_initializeMarketsPair", "(", "timestamp", ")", ";", "this", ".", "_initializeLastTrade", "(", "p", ")", ";", "changes", ".", "subscribe", ".", "push", "(", "{", "entity", ":", "'market'", ",", "pair", ":", "p", "}", ")", ";", "changes", ".", "resync", ".", "push", "(", "{", "entity", ":", "'orderBook'", ",", "pair", ":", "p", "}", ")", "updated", "=", "true", ";", "}", "}", ")", ";", "}", "else", "{", "let", "newPairs", "=", "{", "}", ";", "_", ".", "forEach", "(", "pairs", ",", "(", "p", ")", "=>", "{", "if", "(", "undefined", "!==", "newPairs", "[", "p", "]", ")", "{", "return", ";", "}", "this", ".", "_initializeLastTrade", "(", "p", ")", ";", "if", "(", "undefined", "===", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", "[", "p", "]", ")", "{", "newPairs", "[", "p", "]", "=", "this", ".", "_initializeMarketsPair", "(", "timestamp", ")", ";", "changes", ".", "subscribe", ".", "push", "(", "{", "entity", ":", "'market'", ",", "pair", ":", "p", "}", ")", ";", "changes", ".", "resync", ".", "push", "(", "{", "entity", ":", "'orderBook'", ",", "pair", ":", "p", "}", ")", "updated", "=", "true", ";", "}", "else", "{", "newPairs", "[", "p", "]", "=", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", "[", "p", "]", ";", "}", "}", ")", ";", "_", ".", "forEach", "(", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", ",", "(", "obj", ",", "p", ")", "=>", "{", "if", "(", "undefined", "===", "newPairs", "[", "p", "]", ")", "{", "this", ".", "_resetLastTrade", "(", "p", ")", ";", "changes", ".", "unsubscribe", ".", "push", "(", "{", "entity", ":", "'market'", ",", "pair", ":", "p", "}", ")", ";", "if", "(", "this", ".", "_reconnectAfterUnsubscribingFromMarkets", ".", "reconnect", ")", "{", "if", "(", "undefined", "===", "this", ".", "_unsubscribedMarkets", ".", "pairs", "[", "p", "]", ")", "{", "this", ".", "_unsubscribedMarkets", ".", "pairs", "[", "p", "]", "=", "timestamp", ";", "++", "this", ".", "_unsubscribedMarkets", ".", "count", ";", "}", "}", "updated", "=", "true", ";", "}", "}", ")", ";", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", "=", "newPairs", ";", "}", "if", "(", "updated", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "this", ".", "_debugChanges", "(", "changes", ")", ";", "}", "this", ".", "_subscriptions", ".", "markets", ".", "timestamp", "=", "timestamp", ";", "this", ".", "_processChanges", "(", "changes", ",", "connect", ")", ";", "}", "}"], "original_docstring": "/**\n * Subscribe to order books & trades for a list of pairs\n *\n * @param {array} pairs array of pairs\n * @param {boolean} reset if true, previous subscriptions will be ignored (default = false)\n * @param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)\n */", "comment": ["// just add new subscriptions", "// process subscribe", "// no subscriptions for this pair yet", "// request full order book for new pair", "// add new subscriptions & discard previous", "// check new subscriptions", "// pair has been added", "// request full order book for new pair", "// check if we need to unsubscribe", "// pair has been removed"], "docstring_tokens": ["Subscribe", "to", "order", "books", "&", "trades", "for", "a", "list", "of", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs", "@param", "{", "boolean", "}", "reset", "if", "true", "previous", "subscriptions", "will", "be", "ignored", "(", "default", "=", "false", ")", "@param", "{", "boolean", "}", "connect", "whether", "or", "not", "connection", "with", "exchange", "should", "be", "established", "if", "necessary", "(", "optional", "default", "=", "true", ")"], "docstring": "Subscribe to order books & trades for a list of pairs\n@param {array} pairs array of pairs\n@param {boolean} reset if true, previous subscriptions will be ignored (default = false)\n@param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "pairs", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "reset", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "connect", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Subscribe to order books & trades for a list of pairs\n @param {array} pairs array of pairs\n @param {boolean} reset if true, previous subscriptions will be ignored (default = false)\n @param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)", "short_docstring_tokens": ["Subscribe", "to", "order", "books", "&", "trades", "for", "a", "list", "of", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs", "@param", "{", "boolean", "}", "reset", "if", "true", "previous", "subscriptions", "will", "be", "ignored", "(", "default", "=", "false", ")", "@param", "{", "boolean", "}", "connect", "whether", "or", "not", "connection", "with", "exchange", "should", "be", "established", "if", "necessary", "(", "optional", "default", "=", "true", ")"], "original_string": "subscribeToMarkets(pairs, reset, connect)\n{\n    if (undefined === connect)\n    {\n        connect = true;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        subscribe:[],\n        unsubscribe:[],\n        resync:[]\n    };\n    let updated = false;\n\n    // just add new subscriptions\n    if (undefined === reset || false === reset)\n    {\n        // process subscribe\n        _.forEach(pairs, (p) => {\n            // no subscriptions for this pair yet\n            if (undefined === this._subscriptions.markets.pairs[p])\n            {\n                this._subscriptions.markets.pairs[p] = this._initializeMarketsPair(timestamp);\n                this._initializeLastTrade(p);\n                changes.subscribe.push({entity:'market',pair:p});\n                // request full order book for new pair\n                changes.resync.push({entity:'orderBook',pair:p})\n                updated = true;\n            }\n        });\n    }\n    // add new subscriptions & discard previous\n    else\n    {\n        let newPairs = {};\n        // check new subscriptions\n        _.forEach(pairs, (p) => {\n            if (undefined !== newPairs[p])\n            {\n                return;\n            }\n            this._initializeLastTrade(p);\n            // pair has been added\n            if (undefined === this._subscriptions.markets.pairs[p])\n            {\n                newPairs[p] = this._initializeMarketsPair(timestamp);\n                changes.subscribe.push({entity:'market',pair:p});\n                // request full order book for new pair\n                changes.resync.push({entity:'orderBook',pair:p})\n                updated = true;\n            }\n            else\n            {\n                newPairs[p] = this._subscriptions.markets.pairs[p];\n            }\n        });\n        // check if we need to unsubscribe\n        _.forEach(this._subscriptions.markets.pairs, (obj, p) => {\n            // pair has been removed\n            if (undefined === newPairs[p])\n            {\n                this._resetLastTrade(p);\n                changes.unsubscribe.push({entity:'market',pair:p});\n                if (this._reconnectAfterUnsubscribingFromMarkets.reconnect)\n                {\n                    if (undefined === this._unsubscribedMarkets.pairs[p])\n                    {\n                        this._unsubscribedMarkets.pairs[p] = timestamp;\n                        ++this._unsubscribedMarkets.count;\n                    }\n                }\n                updated = true;\n            }\n        });\n        this._subscriptions.markets.pairs = newPairs;\n    }\n    if (updated)\n    {\n        if (DEBUG_ENABLED)\n        {\n            this._debugChanges(changes);\n        }\n        this._subscriptions.markets.timestamp = timestamp;\n        this._processChanges(changes, connect);\n    }\n}", "id": "2e78f4b689b4ec3dfd90cad7dd9166e4c573a7ecc976ff260525c533cbb093cf"}
{"identifier": "unsubscribeFromMarkets", "parameters": {"pairs": null}, "return_type": null, "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "unsubscribeFromMarkets(pairs)\n{\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        unsubscribe:[]\n    };\n    let updated = false;\n    _.forEach(pairs, (p) => {\n        if (undefined !== this._subscriptions.markets.pairs[p])\n        {\n            this._resetLastTrade(p);\n            changes.unsubscribe.push({entity:'market',pair:p})\n            if (this._reconnectAfterUnsubscribingFromMarkets.reconnect)\n            {\n                if (undefined === this._unsubscribedMarkets.pairs[p])\n                {\n                    this._unsubscribedMarkets.pairs[p] = timestamp;\n                    ++this._unsubscribedMarkets.count;\n                }\n            }\n            delete this._subscriptions.markets.pairs[p];\n            updated = true;\n        }\n    });\n    if (updated)\n    {\n        if (DEBUG_ENABLED)\n        {\n            this._debugChanges(changes);\n        }\n        this._subscriptions.markets.timestamp = timestamp;\n        this._processChanges(changes, false);\n    }\n}", "code_tokens": ["unsubscribeFromMarkets", "(", "pairs", ")", "{", "let", "timestamp", "=", "Date", ".", "now", "(", ")", "/", "1000.0", ";", "let", "changes", "=", "{", "unsubscribe", ":", "[", "]", "}", ";", "let", "updated", "=", "false", ";", "_", ".", "forEach", "(", "pairs", ",", "(", "p", ")", "=>", "{", "if", "(", "undefined", "!==", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", "[", "p", "]", ")", "{", "this", ".", "_resetLastTrade", "(", "p", ")", ";", "changes", ".", "unsubscribe", ".", "push", "(", "{", "entity", ":", "'market'", ",", "pair", ":", "p", "}", ")", "if", "(", "this", ".", "_reconnectAfterUnsubscribingFromMarkets", ".", "reconnect", ")", "{", "if", "(", "undefined", "===", "this", ".", "_unsubscribedMarkets", ".", "pairs", "[", "p", "]", ")", "{", "this", ".", "_unsubscribedMarkets", ".", "pairs", "[", "p", "]", "=", "timestamp", ";", "++", "this", ".", "_unsubscribedMarkets", ".", "count", ";", "}", "}", "delete", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", "[", "p", "]", ";", "updated", "=", "true", ";", "}", "}", ")", ";", "if", "(", "updated", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "this", ".", "_debugChanges", "(", "changes", ")", ";", "}", "this", ".", "_subscriptions", ".", "markets", ".", "timestamp", "=", "timestamp", ";", "this", ".", "_processChanges", "(", "changes", ",", "false", ")", ";", "}", "}"], "original_docstring": "/**\n * Unsubscribe from order books & trades for a list of pairs\n *\n * @param {array} pairs array of pairs\n */", "comment": [], "docstring_tokens": ["Unsubscribe", "from", "order", "books", "&", "trades", "for", "a", "list", "of", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs"], "docstring": "Unsubscribe from order books & trades for a list of pairs\n@param {array} pairs array of pairs", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "pairs", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Unsubscribe from order books & trades for a list of pairs\n @param {array} pairs array of pairs", "short_docstring_tokens": ["Unsubscribe", "from", "order", "books", "&", "trades", "for", "a", "list", "of", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs"], "original_string": "unsubscribeFromMarkets(pairs)\n{\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        unsubscribe:[]\n    };\n    let updated = false;\n    _.forEach(pairs, (p) => {\n        if (undefined !== this._subscriptions.markets.pairs[p])\n        {\n            this._resetLastTrade(p);\n            changes.unsubscribe.push({entity:'market',pair:p})\n            if (this._reconnectAfterUnsubscribingFromMarkets.reconnect)\n            {\n                if (undefined === this._unsubscribedMarkets.pairs[p])\n                {\n                    this._unsubscribedMarkets.pairs[p] = timestamp;\n                    ++this._unsubscribedMarkets.count;\n                }\n            }\n            delete this._subscriptions.markets.pairs[p];\n            updated = true;\n        }\n    });\n    if (updated)\n    {\n        if (DEBUG_ENABLED)\n        {\n            this._debugChanges(changes);\n        }\n        this._subscriptions.markets.timestamp = timestamp;\n        this._processChanges(changes, false);\n    }\n}", "id": "3c23782fb650f87786178f377da4211ff64207e3913ad6c35116a5d22f718e49"}
{"identifier": "unsubscribeFromAllMarkets", "parameters": {}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "unsubscribeFromAllMarkets()\n{\n    if (_.isEmpty(this._subscriptions.markets.pairs))\n    {\n        return;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        unsubscribe:[]\n    };\n    _.forEach(this._subscriptions.markets.pairs, (obj, p) => {\n        changes.unsubscribe.push({entity:'market',pair:p});\n        if (this._reconnectAfterUnsubscribingFromMarkets.reconnect)\n        {\n            if (undefined === this._unsubscribedMarkets.pairs[p])\n            {\n                this._unsubscribedMarkets.pairs[p] = timestamp;\n                ++this._unsubscribedMarkets.count;\n            }\n        }\n    });\n    this._subscriptions.markets.timestamp = timestamp;\n    this._subscriptions.markets.pairs = {};\n    if (DEBUG_ENABLED)\n    {\n        this._debugChanges(changes);\n    }\n    this._processChanges(changes, false);\n}", "code_tokens": ["unsubscribeFromAllMarkets", "(", ")", "{", "if", "(", "_", ".", "isEmpty", "(", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", ")", ")", "{", "return", ";", "}", "let", "timestamp", "=", "Date", ".", "now", "(", ")", "/", "1000.0", ";", "let", "changes", "=", "{", "unsubscribe", ":", "[", "]", "}", ";", "_", ".", "forEach", "(", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", ",", "(", "obj", ",", "p", ")", "=>", "{", "changes", ".", "unsubscribe", ".", "push", "(", "{", "entity", ":", "'market'", ",", "pair", ":", "p", "}", ")", ";", "if", "(", "this", ".", "_reconnectAfterUnsubscribingFromMarkets", ".", "reconnect", ")", "{", "if", "(", "undefined", "===", "this", ".", "_unsubscribedMarkets", ".", "pairs", "[", "p", "]", ")", "{", "this", ".", "_unsubscribedMarkets", ".", "pairs", "[", "p", "]", "=", "timestamp", ";", "++", "this", ".", "_unsubscribedMarkets", ".", "count", ";", "}", "}", "}", ")", ";", "this", ".", "_subscriptions", ".", "markets", ".", "timestamp", "=", "timestamp", ";", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", "=", "{", "}", ";", "if", "(", "DEBUG_ENABLED", ")", "{", "this", ".", "_debugChanges", "(", "changes", ")", ";", "}", "this", ".", "_processChanges", "(", "changes", ",", "false", ")", ";", "}"], "original_docstring": "/**\n * Unsubscribe from order books & trades for all currently subscribed pairs\n *\n * @param {array} pairs array of pairs\n */", "comment": ["// we don't have any subscribed markets"], "docstring_tokens": ["Unsubscribe", "from", "order", "books", "&", "trades", "for", "all", "currently", "subscribed", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs"], "docstring": "Unsubscribe from order books & trades for all currently subscribed pairs\n@param {array} pairs array of pairs", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Unsubscribe from order books & trades for all currently subscribed pairs\n @param {array} pairs array of pairs", "short_docstring_tokens": ["Unsubscribe", "from", "order", "books", "&", "trades", "for", "all", "currently", "subscribed", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs"], "original_string": "unsubscribeFromAllMarkets()\n{\n    // we don't have any subscribed markets\n    if (_.isEmpty(this._subscriptions.markets.pairs))\n    {\n        return;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        unsubscribe:[]\n    };\n    _.forEach(this._subscriptions.markets.pairs, (obj, p) => {\n        changes.unsubscribe.push({entity:'market',pair:p});\n        if (this._reconnectAfterUnsubscribingFromMarkets.reconnect)\n        {\n            if (undefined === this._unsubscribedMarkets.pairs[p])\n            {\n                this._unsubscribedMarkets.pairs[p] = timestamp;\n                ++this._unsubscribedMarkets.count;\n            }\n        }\n    });\n    this._subscriptions.markets.timestamp = timestamp;\n    this._subscriptions.markets.pairs = {};\n    if (DEBUG_ENABLED)\n    {\n        this._debugChanges(changes);\n    }\n    this._processChanges(changes, false);\n}", "id": "83f8b133315d4aba505c440386765d756398adfe64baae89abfd2c91853ab70c"}
{"identifier": "resyncOrderBooks", "parameters": {"pairs": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "resyncOrderBooks(pairs)\n{\n    let changes = {\n        resync:[]\n    };\n    let updated = false;\n    _.forEach(pairs, (p) => {\n        if (undefined === this._subscriptions.markets.pairs[p])\n        {\n            return;\n        }\n        changes.resync.push({entity:'orderBook', pair:p});\n        updated = true;\n    });\n    if (updated)\n    {\n        if (DEBUG_ENABLED)\n        {\n            this._debugChanges(changes);\n        }\n        this._processChanges(changes, true);\n    }\n}", "code_tokens": ["resyncOrderBooks", "(", "pairs", ")", "{", "let", "changes", "=", "{", "resync", ":", "[", "]", "}", ";", "let", "updated", "=", "false", ";", "_", ".", "forEach", "(", "pairs", ",", "(", "p", ")", "=>", "{", "if", "(", "undefined", "===", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", "[", "p", "]", ")", "{", "return", ";", "}", "changes", ".", "resync", ".", "push", "(", "{", "entity", ":", "'orderBook'", ",", "pair", ":", "p", "}", ")", ";", "updated", "=", "true", ";", "}", ")", ";", "if", "(", "updated", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "this", ".", "_debugChanges", "(", "changes", ")", ";", "}", "this", ".", "_processChanges", "(", "changes", ",", "true", ")", ";", "}", "}"], "original_docstring": "/**\n * Resync order books (ie: ask for full order book) for a list of pairs\n *\n * @param {array} pairs array of pairs\n */", "comment": ["// no subscription for this pair"], "docstring_tokens": ["Resync", "order", "books", "for", "a", "list", "of", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs"], "docstring": "Resync order books  for a list of pairs\n@param {array} pairs array of pairs", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "pairs", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Resync order books (ie: ask for full order book) for a list of pairs\n @param {array} pairs array of pairs", "short_docstring_tokens": ["Resync", "order", "books", "(", "ie", ":", "ask", "for", "full", "order", "book", ")", "for", "a", "list", "of", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs"], "original_string": "resyncOrderBooks(pairs)\n{\n    let changes = {\n        resync:[]\n    };\n    let updated = false;\n    _.forEach(pairs, (p) => {\n        // no subscription for this pair\n        if (undefined === this._subscriptions.markets.pairs[p])\n        {\n            return;\n        }\n        changes.resync.push({entity:'orderBook', pair:p});\n        updated = true;\n    });\n    if (updated)\n    {\n        if (DEBUG_ENABLED)\n        {\n            this._debugChanges(changes);\n        }\n        this._processChanges(changes, true);\n    }\n}", "id": "2def31b39a7733352027790d05bb735f97c815181f83bb320434fc0496eef2e9"}
{"identifier": "subscribeToAllTickers", "parameters": {"connect": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "subscribeToAllTickers(connect)\n{\n    if (this._subscriptions.tickers.global)\n    {\n        return;\n    }\n    if (undefined === connect)\n    {\n        connect = true;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        subscribe:[{entity:'ticker',global:true}],\n        unsubscribe:[]\n    };\n    this._subscriptions.tickers.pairs = {};\n    if (DEBUG_ENABLED)\n    {\n        this._debugChanges(changes);\n    }\n    this._subscriptions.tickers.global = true;\n    this._subscriptions.tickers.timestamp = timestamp;\n    this._processChanges(changes, connect);\n}", "code_tokens": ["subscribeToAllTickers", "(", "connect", ")", "{", "if", "(", "this", ".", "_subscriptions", ".", "tickers", ".", "global", ")", "{", "return", ";", "}", "if", "(", "undefined", "===", "connect", ")", "{", "connect", "=", "true", ";", "}", "let", "timestamp", "=", "Date", ".", "now", "(", ")", "/", "1000.0", ";", "let", "changes", "=", "{", "subscribe", ":", "[", "{", "entity", ":", "'ticker'", ",", "global", ":", "true", "}", "]", ",", "unsubscribe", ":", "[", "]", "}", ";", "this", ".", "_subscriptions", ".", "tickers", ".", "pairs", "=", "{", "}", ";", "if", "(", "DEBUG_ENABLED", ")", "{", "this", ".", "_debugChanges", "(", "changes", ")", ";", "}", "this", ".", "_subscriptions", ".", "tickers", ".", "global", "=", "true", ";", "this", ".", "_subscriptions", ".", "tickers", ".", "timestamp", "=", "timestamp", ";", "this", ".", "_processChanges", "(", "changes", ",", "connect", ")", ";", "}"], "original_docstring": "/**\n * Subscribe to all tickers\n *\n * @param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)\n */", "comment": ["// we already subscribed to all tickers"], "docstring_tokens": ["Subscribe", "to", "all", "tickers", "@param", "{", "boolean", "}", "connect", "whether", "or", "not", "connection", "with", "exchange", "should", "be", "established", "if", "necessary", "(", "optional", "default", "=", "true", ")"], "docstring": "Subscribe to all tickers\n@param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "connect", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Subscribe to all tickers\n @param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)", "short_docstring_tokens": ["Subscribe", "to", "all", "tickers", "@param", "{", "boolean", "}", "connect", "whether", "or", "not", "connection", "with", "exchange", "should", "be", "established", "if", "necessary", "(", "optional", "default", "=", "true", ")"], "original_string": "subscribeToAllTickers(connect)\n{\n    // we already subscribed to all tickers\n    if (this._subscriptions.tickers.global)\n    {\n        return;\n    }\n    if (undefined === connect)\n    {\n        connect = true;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        subscribe:[{entity:'ticker',global:true}],\n        unsubscribe:[]\n    };\n    this._subscriptions.tickers.pairs = {};\n    if (DEBUG_ENABLED)\n    {\n        this._debugChanges(changes);\n    }\n    this._subscriptions.tickers.global = true;\n    this._subscriptions.tickers.timestamp = timestamp;\n    this._processChanges(changes, connect);\n}", "id": "02f167f39a6d5189d7acab59e01a33a3cbf0912667e3d9632112df19da6a7e43"}
{"identifier": "subscribeToTickers", "parameters": {"pairs": null, "reset": null, "connect": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "subscribeToTickers(pairs, reset, connect)\n{\n    if (this._subscriptions.tickers.global)\n    {\n        return;\n    }\n    if (undefined === connect)\n    {\n        connect = true;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        subscribe:[],\n        unsubscribe:[]\n    };\n    let updated = false;\n    if (undefined === reset || false === reset)\n    {\n        _.forEach(pairs, (p) => {\n            if (undefined === this._subscriptions.tickers.pairs[p])\n            {\n                this._subscriptions.tickers.pairs[p] = timestamp;\n                changes.subscribe.push({entity:'ticker',pair:p});\n                updated = true;\n            }\n        });\n    }\n    else\n    {\n        let newPairs = {};\n        _.forEach(pairs, (p) => {\n            if (undefined !== newPairs[p])\n            {\n                return;\n            }\n            if (undefined === this._subscriptions.tickers.pairs[p])\n            {\n                newPairs[p] = timestamp;\n                changes.subscribe.push({entity:'ticker',pair:p});\n                updated = true;\n            }\n            else\n            {\n                newPairs[p] = this._subscriptions.tickers.pairs[p];\n            }\n        });\n        _.forEach(this._subscriptions.tickers.pairs, (ts, p) => {\n            if (undefined === newPairs[p])\n            {\n                changes.unsubscribe.push({entity:'ticker',pair:p});\n                updated = true;\n            }\n        });\n        this._subscriptions.tickers.pairs = newPairs;\n    }\n    if (updated)\n    {\n        if (DEBUG_ENABLED)\n        {\n            this._debugChanges(changes);\n        }\n        this._subscriptions.tickers.timestamp = timestamp;\n        this._processChanges(changes, connect);\n    }\n}", "code_tokens": ["subscribeToTickers", "(", "pairs", ",", "reset", ",", "connect", ")", "{", "if", "(", "this", ".", "_subscriptions", ".", "tickers", ".", "global", ")", "{", "return", ";", "}", "if", "(", "undefined", "===", "connect", ")", "{", "connect", "=", "true", ";", "}", "let", "timestamp", "=", "Date", ".", "now", "(", ")", "/", "1000.0", ";", "let", "changes", "=", "{", "subscribe", ":", "[", "]", ",", "unsubscribe", ":", "[", "]", "}", ";", "let", "updated", "=", "false", ";", "if", "(", "undefined", "===", "reset", "||", "false", "===", "reset", ")", "{", "_", ".", "forEach", "(", "pairs", ",", "(", "p", ")", "=>", "{", "if", "(", "undefined", "===", "this", ".", "_subscriptions", ".", "tickers", ".", "pairs", "[", "p", "]", ")", "{", "this", ".", "_subscriptions", ".", "tickers", ".", "pairs", "[", "p", "]", "=", "timestamp", ";", "changes", ".", "subscribe", ".", "push", "(", "{", "entity", ":", "'ticker'", ",", "pair", ":", "p", "}", ")", ";", "updated", "=", "true", ";", "}", "}", ")", ";", "}", "else", "{", "let", "newPairs", "=", "{", "}", ";", "_", ".", "forEach", "(", "pairs", ",", "(", "p", ")", "=>", "{", "if", "(", "undefined", "!==", "newPairs", "[", "p", "]", ")", "{", "return", ";", "}", "if", "(", "undefined", "===", "this", ".", "_subscriptions", ".", "tickers", ".", "pairs", "[", "p", "]", ")", "{", "newPairs", "[", "p", "]", "=", "timestamp", ";", "changes", ".", "subscribe", ".", "push", "(", "{", "entity", ":", "'ticker'", ",", "pair", ":", "p", "}", ")", ";", "updated", "=", "true", ";", "}", "else", "{", "newPairs", "[", "p", "]", "=", "this", ".", "_subscriptions", ".", "tickers", ".", "pairs", "[", "p", "]", ";", "}", "}", ")", ";", "_", ".", "forEach", "(", "this", ".", "_subscriptions", ".", "tickers", ".", "pairs", ",", "(", "ts", ",", "p", ")", "=>", "{", "if", "(", "undefined", "===", "newPairs", "[", "p", "]", ")", "{", "changes", ".", "unsubscribe", ".", "push", "(", "{", "entity", ":", "'ticker'", ",", "pair", ":", "p", "}", ")", ";", "updated", "=", "true", ";", "}", "}", ")", ";", "this", ".", "_subscriptions", ".", "tickers", ".", "pairs", "=", "newPairs", ";", "}", "if", "(", "updated", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "this", ".", "_debugChanges", "(", "changes", ")", ";", "}", "this", ".", "_subscriptions", ".", "tickers", ".", "timestamp", "=", "timestamp", ";", "this", ".", "_processChanges", "(", "changes", ",", "connect", ")", ";", "}", "}"], "original_docstring": "/**\n * Subscribe to tickers for a list of pairs\n *\n * @param {array} pairs array of pairs\n * @param {boolean} reset, previous subscriptions will be ignored (default = false)\n * @param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)\n */", "comment": ["// ignore if we subscribed to tickers globally", "// just add new subscriptions", "// process subscribe", "// no subscriptions for this pair yet", "// add new subscriptions & discard previous", "// check new subscriptions", "// pair has been added", "// check if we need to unsubscribe", "// pair has been removed"], "docstring_tokens": ["Subscribe", "to", "tickers", "for", "a", "list", "of", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs", "@param", "{", "boolean", "}", "reset", "previous", "subscriptions", "will", "be", "ignored", "(", "default", "=", "false", ")", "@param", "{", "boolean", "}", "connect", "whether", "or", "not", "connection", "with", "exchange", "should", "be", "established", "if", "necessary", "(", "optional", "default", "=", "true", ")"], "docstring": "Subscribe to tickers for a list of pairs\n@param {array} pairs array of pairs\n@param {boolean} reset, previous subscriptions will be ignored (default = false)\n@param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "pairs", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "reset", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "connect", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Subscribe to tickers for a list of pairs\n @param {array} pairs array of pairs\n @param {boolean} reset, previous subscriptions will be ignored (default = false)\n @param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)", "short_docstring_tokens": ["Subscribe", "to", "tickers", "for", "a", "list", "of", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs", "@param", "{", "boolean", "}", "reset", "previous", "subscriptions", "will", "be", "ignored", "(", "default", "=", "false", ")", "@param", "{", "boolean", "}", "connect", "whether", "or", "not", "connection", "with", "exchange", "should", "be", "established", "if", "necessary", "(", "optional", "default", "=", "true", ")"], "original_string": "subscribeToTickers(pairs, reset, connect)\n{\n    // ignore if we subscribed to tickers globally\n    if (this._subscriptions.tickers.global)\n    {\n        return;\n    }\n    if (undefined === connect)\n    {\n        connect = true;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        subscribe:[],\n        unsubscribe:[]\n    };\n    let updated = false;\n\n    // just add new subscriptions\n    if (undefined === reset || false === reset)\n    {\n        // process subscribe\n        _.forEach(pairs, (p) => {\n            // no subscriptions for this pair yet\n            if (undefined === this._subscriptions.tickers.pairs[p])\n            {\n                this._subscriptions.tickers.pairs[p] = timestamp;\n                changes.subscribe.push({entity:'ticker',pair:p});\n                updated = true;\n            }\n        });\n    }\n    // add new subscriptions & discard previous\n    else\n    {\n        let newPairs = {};\n        // check new subscriptions\n        _.forEach(pairs, (p) => {\n            if (undefined !== newPairs[p])\n            {\n                return;\n            }\n            // pair has been added\n            if (undefined === this._subscriptions.tickers.pairs[p])\n            {\n                newPairs[p] = timestamp;\n                changes.subscribe.push({entity:'ticker',pair:p});\n                updated = true;\n            }\n            else\n            {\n                newPairs[p] = this._subscriptions.tickers.pairs[p];\n            }\n        });\n        // check if we need to unsubscribe\n        _.forEach(this._subscriptions.tickers.pairs, (ts, p) => {\n            // pair has been removed\n            if (undefined === newPairs[p])\n            {\n                changes.unsubscribe.push({entity:'ticker',pair:p});\n                updated = true;\n            }\n        });\n        this._subscriptions.tickers.pairs = newPairs;\n    }\n    if (updated)\n    {\n        if (DEBUG_ENABLED)\n        {\n            this._debugChanges(changes);\n        }\n        this._subscriptions.tickers.timestamp = timestamp;\n        this._processChanges(changes, connect);\n    }\n}", "id": "d7326cb0ae8d45e244d37e4cae9a1842781628b6d24f8928b89ebda46688f075"}
{"identifier": "unsubscribeFromTickers", "parameters": {"pairs": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "unsubscribeFromTickers(pairs)\n{\n    if (this._subscriptions.tickers.global)\n    {\n        return;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        unsubscribe:[]\n    };\n    let updated = false;\n    _.forEach(pairs, (p) => {\n        if (undefined !== this._subscriptions.tickers.pairs[p])\n        {\n            changes.unsubscribe.push({entity:'ticker',pair:p})\n            delete this._subscriptions.tickers.pairs[p];\n            updated = true;\n        }\n    });\n    if (updated)\n    {\n        if (DEBUG_ENABLED)\n        {\n            this._debugChanges(changes);\n        }\n        this._subscriptions.tickers.timestamp = timestamp;\n        this._processChanges(changes, false);\n    }\n}", "code_tokens": ["unsubscribeFromTickers", "(", "pairs", ")", "{", "if", "(", "this", ".", "_subscriptions", ".", "tickers", ".", "global", ")", "{", "return", ";", "}", "let", "timestamp", "=", "Date", ".", "now", "(", ")", "/", "1000.0", ";", "let", "changes", "=", "{", "unsubscribe", ":", "[", "]", "}", ";", "let", "updated", "=", "false", ";", "_", ".", "forEach", "(", "pairs", ",", "(", "p", ")", "=>", "{", "if", "(", "undefined", "!==", "this", ".", "_subscriptions", ".", "tickers", ".", "pairs", "[", "p", "]", ")", "{", "changes", ".", "unsubscribe", ".", "push", "(", "{", "entity", ":", "'ticker'", ",", "pair", ":", "p", "}", ")", "delete", "this", ".", "_subscriptions", ".", "tickers", ".", "pairs", "[", "p", "]", ";", "updated", "=", "true", ";", "}", "}", ")", ";", "if", "(", "updated", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "this", ".", "_debugChanges", "(", "changes", ")", ";", "}", "this", ".", "_subscriptions", ".", "tickers", ".", "timestamp", "=", "timestamp", ";", "this", ".", "_processChanges", "(", "changes", ",", "false", ")", ";", "}", "}"], "original_docstring": "/**\n * Unsubscribe from tickers for a list of pairs\n *\n * @param {array} pairs array of pairs\n */", "comment": ["// ignore if we subscribed to tickers globally"], "docstring_tokens": ["Unsubscribe", "from", "tickers", "for", "a", "list", "of", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs"], "docstring": "Unsubscribe from tickers for a list of pairs\n@param {array} pairs array of pairs", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "pairs", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Unsubscribe from tickers for a list of pairs\n @param {array} pairs array of pairs", "short_docstring_tokens": ["Unsubscribe", "from", "tickers", "for", "a", "list", "of", "pairs", "@param", "{", "array", "}", "pairs", "array", "of", "pairs"], "original_string": "unsubscribeFromTickers(pairs)\n{\n    // ignore if we subscribed to tickers globally\n    if (this._subscriptions.tickers.global)\n    {\n        return;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        unsubscribe:[]\n    };\n    let updated = false;\n    _.forEach(pairs, (p) => {\n        if (undefined !== this._subscriptions.tickers.pairs[p])\n        {\n            changes.unsubscribe.push({entity:'ticker',pair:p})\n            delete this._subscriptions.tickers.pairs[p];\n            updated = true;\n        }\n    });\n    if (updated)\n    {\n        if (DEBUG_ENABLED)\n        {\n            this._debugChanges(changes);\n        }\n        this._subscriptions.tickers.timestamp = timestamp;\n        this._processChanges(changes, false);\n    }\n}", "id": "daf40484c6d07dd3df11f365c7175cc83227a7200f3c7f85b67a947da02e9a80"}
{"identifier": "subscribeToOrders", "parameters": {"resubscribe": null, "connect": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "subscribeToOrders(resubscribe, connect)\n{\n    if (null === this._auth.key)\n    {\n        return false;\n    }\n    if (undefined === resubscribe)\n    {\n        resubscribe = false;\n    }\n    if (undefined === connect)\n    {\n        connect = true;\n    }\n    if (this._subscriptions.orders.subscribed && !resubscribe)\n    {\n        return;\n    }\n    if (resubscribe)\n    {\n        this._clearWatchdogTimer('orders');\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        subscribe:[{entity:'orders'}]\n    };\n    if (DEBUG_ENABLED)\n    {\n        this._debugChanges(changes);\n    }\n    this._subscriptions.orders.timestamp = timestamp;\n    this._subscriptions.orders.subscribed = true;\n    this._processChanges(changes, connect);\n}", "code_tokens": ["subscribeToOrders", "(", "resubscribe", ",", "connect", ")", "{", "if", "(", "null", "===", "this", ".", "_auth", ".", "key", ")", "{", "return", "false", ";", "}", "if", "(", "undefined", "===", "resubscribe", ")", "{", "resubscribe", "=", "false", ";", "}", "if", "(", "undefined", "===", "connect", ")", "{", "connect", "=", "true", ";", "}", "if", "(", "this", ".", "_subscriptions", ".", "orders", ".", "subscribed", "&&", "!", "resubscribe", ")", "{", "return", ";", "}", "if", "(", "resubscribe", ")", "{", "this", ".", "_clearWatchdogTimer", "(", "'orders'", ")", ";", "}", "let", "timestamp", "=", "Date", ".", "now", "(", ")", "/", "1000.0", ";", "let", "changes", "=", "{", "subscribe", ":", "[", "{", "entity", ":", "'orders'", "}", "]", "}", ";", "if", "(", "DEBUG_ENABLED", ")", "{", "this", ".", "_debugChanges", "(", "changes", ")", ";", "}", "this", ".", "_subscriptions", ".", "orders", ".", "timestamp", "=", "timestamp", ";", "this", ".", "_subscriptions", ".", "orders", ".", "subscribed", "=", "true", ";", "this", ".", "_processChanges", "(", "changes", ",", "connect", ")", ";", "}"], "original_docstring": "/**\n * Subscribe to orders (requires valid api key & api secret)\n *\n * @param {boolean} resubscribe if true, will resubscribe even if a subscription already exists (default = false)\n * @param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)\n */", "comment": ["// no support", "// already subscribed, do nothing", "// cancel watchdog since a new one will be automatically started"], "docstring_tokens": ["Subscribe", "to", "orders", "(", "requires", "valid", "api", "key", "&", "api", "secret", ")", "@param", "{", "boolean", "}", "resubscribe", "if", "true", "will", "resubscribe", "even", "if", "a", "subscription", "already", "exists", "(", "default", "=", "false", ")", "@param", "{", "boolean", "}", "connect", "whether", "or", "not", "connection", "with", "exchange", "should", "be", "established", "if", "necessary", "(", "optional", "default", "=", "true", ")"], "docstring": "Subscribe to orders (requires valid api key & api secret)\n@param {boolean} resubscribe if true, will resubscribe even if a subscription already exists (default = false)\n@param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "resubscribe", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "connect", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Subscribe to orders (requires valid api key & api secret)\n @param {boolean} resubscribe if true, will resubscribe even if a subscription already exists (default = false)\n @param {boolean} connect whether or not connection with exchange should be established if necessary (optional, default = true)", "short_docstring_tokens": ["Subscribe", "to", "orders", "(", "requires", "valid", "api", "key", "&", "api", "secret", ")", "@param", "{", "boolean", "}", "resubscribe", "if", "true", "will", "resubscribe", "even", "if", "a", "subscription", "already", "exists", "(", "default", "=", "false", ")", "@param", "{", "boolean", "}", "connect", "whether", "or", "not", "connection", "with", "exchange", "should", "be", "established", "if", "necessary", "(", "optional", "default", "=", "true", ")"], "original_string": "subscribeToOrders(resubscribe, connect)\n{\n    // no support\n    if (null === this._auth.key)\n    {\n        return false;\n    }\n    if (undefined === resubscribe)\n    {\n        resubscribe = false;\n    }\n    if (undefined === connect)\n    {\n        connect = true;\n    }\n    // already subscribed, do nothing\n    if (this._subscriptions.orders.subscribed && !resubscribe)\n    {\n        return;\n    }\n    // cancel watchdog since a new one will be automatically started\n    if (resubscribe)\n    {\n        this._clearWatchdogTimer('orders');\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        subscribe:[{entity:'orders'}]\n    };\n    if (DEBUG_ENABLED)\n    {\n        this._debugChanges(changes);\n    }\n    this._subscriptions.orders.timestamp = timestamp;\n    this._subscriptions.orders.subscribed = true;\n    this._processChanges(changes, connect);\n}", "id": "894f13ec72ec034aa6fcb64c438e791c4fb9ce834c318858573315d8674d0de1"}
{"identifier": "unsubscribeFromOrders", "parameters": {}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "unsubscribeFromOrders()\n{\n    if (null === this._auth.key)\n    {\n        return false;\n    }\n    if (!this._subscriptions.orders.subscribed)\n    {\n        return;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        unsubscribe:[{entity:'orders'}]\n    };\n    if (DEBUG_ENABLED)\n    {\n        this._debugChanges(changes);\n    }\n    this._subscriptions.orders.timestamp = timestamp;\n    this._subscriptions.orders.subscribed = false;\n    this._processChanges(changes, false);\n}", "code_tokens": ["unsubscribeFromOrders", "(", ")", "{", "if", "(", "null", "===", "this", ".", "_auth", ".", "key", ")", "{", "return", "false", ";", "}", "if", "(", "!", "this", ".", "_subscriptions", ".", "orders", ".", "subscribed", ")", "{", "return", ";", "}", "let", "timestamp", "=", "Date", ".", "now", "(", ")", "/", "1000.0", ";", "let", "changes", "=", "{", "unsubscribe", ":", "[", "{", "entity", ":", "'orders'", "}", "]", "}", ";", "if", "(", "DEBUG_ENABLED", ")", "{", "this", ".", "_debugChanges", "(", "changes", ")", ";", "}", "this", ".", "_subscriptions", ".", "orders", ".", "timestamp", "=", "timestamp", ";", "this", ".", "_subscriptions", ".", "orders", ".", "subscribed", "=", "false", ";", "this", ".", "_processChanges", "(", "changes", ",", "false", ")", ";", "}"], "original_docstring": "/**\n * Unsubscribe from orders to orders (requires valid api key & api secret)\n */", "comment": ["// no support", "// ignore if we didn't subscribe previously"], "docstring_tokens": ["Unsubscribe", "from", "orders", "to", "orders", "(", "requires", "valid", "api", "key", "&", "api", "secret", ")"], "docstring": "Unsubscribe from orders to orders (requires valid api key & api secret)", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Unsubscribe from orders to orders (requires valid api key & api secret)", "short_docstring_tokens": ["Unsubscribe", "from", "orders", "to", "orders", "(", "requires", "valid", "api", "key", "&", "api", "secret", ")"], "original_string": "unsubscribeFromOrders()\n{\n    // no support\n    if (null === this._auth.key)\n    {\n        return false;\n    }\n    // ignore if we didn't subscribe previously\n    if (!this._subscriptions.orders.subscribed)\n    {\n        return;\n    }\n    let timestamp = Date.now() / 1000.0;\n    let changes = {\n        unsubscribe:[{entity:'orders'}]\n    };\n    if (DEBUG_ENABLED)\n    {\n        this._debugChanges(changes);\n    }\n    this._subscriptions.orders.timestamp = timestamp;\n    this._subscriptions.orders.subscribed = false;\n    this._processChanges(changes, false);\n}", "id": "6d5342d463a2569942d04efd6debb31a8680074331717ed3860cde2e09f5b277"}
{"identifier": "_processChanges", "parameters": {"changes": null, "connect": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "_processChanges(changes, connect)\n{\n    if (null === this._connection)\n    {\n        if (connect)\n        {\n            this._createConnection();\n        }\n        return;\n    }\n    if (!this._connection.isConnected())\n    {\n        return;\n    }\n    if (this._reconnectAfterUnsubscribingFromMarkets.reconnect && this._unsubscribedMarkets.count >= this._reconnectAfterUnsubscribingFromMarkets.after)\n    {\n        this.reconnect(true);\n        return;\n    }\n    if (undefined !== changes.resync)\n    {\n        _.forEach(changes.resync, (entry) => {\n            this._queryExchangeState(entry.pair);\n        });\n    }\n    if (undefined !== changes.subscribe)\n    {\n        _.forEach(changes.subscribe, (entry) => {\n            switch (entry.entity)\n            {\n                case 'market':\n                    this._connection.callMethod('SubscribeToExchangeDeltas', [entry.pair]);\n                    break;\n                case 'ticker':\n                    this._connection.callMethod('SubscribeToSummaryDeltas');\n                    break;\n                case 'orders':\n                    this._subscribeToOrders();\n                    break;\n            }\n        });\n    }\n    this._initializeWatchdog();\n}", "code_tokens": ["_processChanges", "(", "changes", ",", "connect", ")", "{", "if", "(", "null", "===", "this", ".", "_connection", ")", "{", "if", "(", "connect", ")", "{", "this", ".", "_createConnection", "(", ")", ";", "}", "return", ";", "}", "if", "(", "!", "this", ".", "_connection", ".", "isConnected", "(", ")", ")", "{", "return", ";", "}", "if", "(", "this", ".", "_reconnectAfterUnsubscribingFromMarkets", ".", "reconnect", "&&", "this", ".", "_unsubscribedMarkets", ".", "count", ">=", "this", ".", "_reconnectAfterUnsubscribingFromMarkets", ".", "after", ")", "{", "this", ".", "reconnect", "(", "true", ")", ";", "return", ";", "}", "if", "(", "undefined", "!==", "changes", ".", "resync", ")", "{", "_", ".", "forEach", "(", "changes", ".", "resync", ",", "(", "entry", ")", "=>", "{", "this", ".", "_queryExchangeState", "(", "entry", ".", "pair", ")", ";", "}", ")", ";", "}", "if", "(", "undefined", "!==", "changes", ".", "subscribe", ")", "{", "_", ".", "forEach", "(", "changes", ".", "subscribe", ",", "(", "entry", ")", "=>", "{", "switch", "(", "entry", ".", "entity", ")", "{", "case", "'market'", ":", "this", ".", "_connection", ".", "callMethod", "(", "'SubscribeToExchangeDeltas'", ",", "[", "entry", ".", "pair", "]", ")", ";", "break", ";", "case", "'ticker'", ":", "this", ".", "_connection", ".", "callMethod", "(", "'SubscribeToSummaryDeltas'", ")", ";", "break", ";", "case", "'orders'", ":", "this", ".", "_subscribeToOrders", "(", ")", ";", "break", ";", "}", "}", ")", ";", "}", "this", ".", "_initializeWatchdog", "(", ")", ";", "}"], "original_docstring": "/**\n * Process subscription changes\n *\n * @param {object} changes list of changes to process\n * @param {boolean} connect whether or not connection with exchange should be established if necessary\n *\n *  Each property (subscribe,unsubscribe,resync) is optional\n *  Entity can be (ticker,market) for subscribe/unsubscribe or (orderBook) for resync\n *\n * {\n *    \"subscribe\":[{\"entity\":\"\",\"pair\":\"\"},...],\n *    \"unsubscribe\":[{\"entity\":\"\",\"pair\":\"\"},...],\n *    \"resync\":[{\"entity\":\"\",\"pair\":\"\"},...]\n * }\n */", "comment": ["// check if we need to reconnect", "// check if we need to resync order books", "// check if we need to subscribe to markets/tickers", "// Since 20/11/2017 tickers update are not sent automatically and require method SubscribeToSummaryDeltas"], "docstring_tokens": ["Process", "subscription", "changes", "@param", "{", "object", "}", "changes", "list", "of", "changes", "to", "process", "@param", "{", "boolean", "}", "connect", "whether", "or", "not", "connection", "with", "exchange", "should", "be", "established", "if", "necessary", "Each", "property", "(", "subscribe", "unsubscribe", "resync", ")", "is", "optional", "Entity", "can", "be", "(", "ticker", "market", ")", "for", "subscribe", "/", "unsubscribe", "or", "(", "orderBook", ")", "for", "resync"], "docstring": "Process subscription changes\n@param {object} changes list of changes to process\n@param {boolean} connect whether or not connection with exchange should be established if necessary\n\nEach property (subscribe,unsubscribe,resync) is optional\nEntity can be (ticker,market) for subscribe/unsubscribe or (orderBook) for resync\n\n", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "changes", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "connect", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Process subscription changes\n @param {object} changes list of changes to process\n @param {boolean} connect whether or not connection with exchange should be established if necessary", "short_docstring_tokens": ["Process", "subscription", "changes", "@param", "{", "object", "}", "changes", "list", "of", "changes", "to", "process", "@param", "{", "boolean", "}", "connect", "whether", "or", "not", "connection", "with", "exchange", "should", "be", "established", "if", "necessary"], "original_string": "_processChanges(changes, connect)\n{\n    if (null === this._connection)\n    {\n        if (connect)\n        {\n            this._createConnection();\n        }\n        return;\n    }\n    if (!this._connection.isConnected())\n    {\n        return;\n    }\n    // check if we need to reconnect\n    if (this._reconnectAfterUnsubscribingFromMarkets.reconnect && this._unsubscribedMarkets.count >= this._reconnectAfterUnsubscribingFromMarkets.after)\n    {\n        this.reconnect(true);\n        return;\n    }\n    // check if we need to resync order books\n    if (undefined !== changes.resync)\n    {\n        _.forEach(changes.resync, (entry) => {\n            this._queryExchangeState(entry.pair);\n        });\n    }\n    // check if we need to subscribe to markets/tickers\n    if (undefined !== changes.subscribe)\n    {\n        _.forEach(changes.subscribe, (entry) => {\n            switch (entry.entity)\n            {\n                case 'market':\n                    this._connection.callMethod('SubscribeToExchangeDeltas', [entry.pair]);\n                    break;\n                // Since 20/11/2017 tickers update are not sent automatically and require method SubscribeToSummaryDeltas\n                case 'ticker':\n                    this._connection.callMethod('SubscribeToSummaryDeltas');\n                    break;\n                case 'orders':\n                    this._subscribeToOrders();\n                    break;\n            }\n        });\n    }\n    this._initializeWatchdog();\n}", "id": "6e3cae214dca7e524cdc79b6ec35164e4045fbbcedab98c12e779d185486fa24"}
{"identifier": "_subscribeToOrders", "parameters": {"cb": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "_subscribeToOrders(cb)\n{\n    let self = this;\n    this._connection.callMethod('GetAuthContext', [this._auth.key], function(challenge, err){\n        if (null !== err)\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Could not call 'GetAuthContext' : err = '%s'\", err);\n            }\n            if (null !== self._logger)\n            {\n                self._logger.warn(\"Could not call 'GetAuthContext' : err = '%s'\", err);\n            }\n            let timestamp = Date.now() / 1000.0;\n            self._subscriptions.orders.timestamp = timestamp;\n            self._subscriptions.orders.subscribed = false;\n            self._initializeWatchdog.call(self);\n            if (undefined !== cb)\n            {\n                try\n                {\n                    cb(false, err);\n                }\n                catch (e)\n                {\n                }\n            }\n            return;\n        }\n        if (null === self._connection || !self._connection.isConnected())\n        {\n            if (undefined !== cb)\n            {\n                try\n                {\n                    cb(false);\n                }\n                catch (e)\n                {\n                }\n            }\n            return;\n        }\n        const hmac = crypto.createHmac('sha512', self._auth.secret);\n        hmac.update(challenge);\n        const response = hmac.digest('hex');\n        self._connection.callMethod('Authenticate', [self._auth.key, response], function(success, err){\n            if (null !== err)\n            {\n                if (DEBUG_ENABLED)\n                {\n                    console.log(\"Could not call 'Authenticate' : err = '%s'\", err);\n                }\n                if (null !== self._logger)\n                {\n                    self._logger.warn(\"Could not call 'Authenticate' : err = '%s'\", err);\n                }\n                let timestamp = Date.now() / 1000.0;\n                self._subscriptions.orders.timestamp = timestamp;\n                self._subscriptions.orders.subscribed = false;\n                self._initializeWatchdog.call(self);\n                if (undefined !== cb)\n                {\n                    try\n                    {\n                        cb(false, err);\n                    }\n                    catch (e)\n                    {\n                    }\n                }\n                return;\n            }\n            if (undefined !== cb)\n            {\n                try\n                {\n                    cb(true);\n                }\n                catch (e)\n                {\n                }\n            }\n        });\n    });\n}", "code_tokens": ["_subscribeToOrders", "(", "cb", ")", "{", "let", "self", "=", "this", ";", "this", ".", "_connection", ".", "callMethod", "(", "'GetAuthContext'", ",", "[", "this", ".", "_auth", ".", "key", "]", ",", "function", "(", "challenge", ",", "err", ")", "{", "if", "(", "null", "!==", "err", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Could not call 'GetAuthContext' : err = '%s'\"", ",", "err", ")", ";", "}", "if", "(", "null", "!==", "self", ".", "_logger", ")", "{", "self", ".", "_logger", ".", "warn", "(", "\"Could not call 'GetAuthContext' : err = '%s'\"", ",", "err", ")", ";", "}", "let", "timestamp", "=", "Date", ".", "now", "(", ")", "/", "1000.0", ";", "self", ".", "_subscriptions", ".", "orders", ".", "timestamp", "=", "timestamp", ";", "self", ".", "_subscriptions", ".", "orders", ".", "subscribed", "=", "false", ";", "self", ".", "_initializeWatchdog", ".", "call", "(", "self", ")", ";", "if", "(", "undefined", "!==", "cb", ")", "{", "try", "{", "cb", "(", "false", ",", "err", ")", ";", "}", "catch", "(", "e", ")", "{", "}", "}", "return", ";", "}", "if", "(", "null", "===", "self", ".", "_connection", "||", "!", "self", ".", "_connection", ".", "isConnected", "(", ")", ")", "{", "if", "(", "undefined", "!==", "cb", ")", "{", "try", "{", "cb", "(", "false", ")", ";", "}", "catch", "(", "e", ")", "{", "}", "}", "return", ";", "}", "const", "hmac", "=", "crypto", ".", "createHmac", "(", "'sha512'", ",", "self", ".", "_auth", ".", "secret", ")", ";", "hmac", ".", "update", "(", "challenge", ")", ";", "const", "response", "=", "hmac", ".", "digest", "(", "'hex'", ")", ";", "self", ".", "_connection", ".", "callMethod", "(", "'Authenticate'", ",", "[", "self", ".", "_auth", ".", "key", ",", "response", "]", ",", "function", "(", "success", ",", "err", ")", "{", "if", "(", "null", "!==", "err", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Could not call 'Authenticate' : err = '%s'\"", ",", "err", ")", ";", "}", "if", "(", "null", "!==", "self", ".", "_logger", ")", "{", "self", ".", "_logger", ".", "warn", "(", "\"Could not call 'Authenticate' : err = '%s'\"", ",", "err", ")", ";", "}", "let", "timestamp", "=", "Date", ".", "now", "(", ")", "/", "1000.0", ";", "self", ".", "_subscriptions", ".", "orders", ".", "timestamp", "=", "timestamp", ";", "self", ".", "_subscriptions", ".", "orders", ".", "subscribed", "=", "false", ";", "self", ".", "_initializeWatchdog", ".", "call", "(", "self", ")", ";", "if", "(", "undefined", "!==", "cb", ")", "{", "try", "{", "cb", "(", "false", ",", "err", ")", ";", "}", "catch", "(", "e", ")", "{", "}", "}", "return", ";", "}", "if", "(", "undefined", "!==", "cb", ")", "{", "try", "{", "cb", "(", "true", ")", ";", "}", "catch", "(", "e", ")", "{", "}", "}", "}", ")", ";", "}", ")", ";", "}"], "original_docstring": "/**\n * Performs SignalR request\n *\n * @param {function} cb callback to call upon completion (optional)\n */", "comment": ["// we got an error", "// unsubscribe from orders", "// just ignore", "// just ignore", "// create response", "// call Authenticate", "// we got an error", "// unsubscribe from orders", "// just ignore", "// just ignore"], "docstring_tokens": ["Performs", "SignalR", "request", "@param", "{", "function", "}", "cb", "callback", "to", "call", "upon", "completion", "(", "optional", ")"], "docstring": "Performs SignalR request\n@param {function} cb callback to call upon completion (optional)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "cb", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Performs SignalR request\n @param {function} cb callback to call upon completion (optional)", "short_docstring_tokens": ["Performs", "SignalR", "request", "@param", "{", "function", "}", "cb", "callback", "to", "call", "upon", "completion", "(", "optional", ")"], "original_string": "_subscribeToOrders(cb)\n{\n    let self = this;\n    this._connection.callMethod('GetAuthContext', [this._auth.key], function(challenge, err){\n        // we got an error\n        if (null !== err)\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Could not call 'GetAuthContext' : err = '%s'\", err);\n            }\n            if (null !== self._logger)\n            {\n                self._logger.warn(\"Could not call 'GetAuthContext' : err = '%s'\", err);\n            }\n            // unsubscribe from orders\n            let timestamp = Date.now() / 1000.0;\n            self._subscriptions.orders.timestamp = timestamp;\n            self._subscriptions.orders.subscribed = false;\n            self._initializeWatchdog.call(self);\n\n            if (undefined !== cb)\n            {\n                try\n                {\n                    cb(false, err);\n                }\n                catch (e)\n                {\n                    // just ignore\n                }\n            }\n            return;\n        }\n        if (null === self._connection || !self._connection.isConnected())\n        {\n            if (undefined !== cb)\n            {\n                try\n                {\n                    cb(false);\n                }\n                catch (e)\n                {\n                    // just ignore\n                }\n            }\n            return;\n        }\n\n        // create response\n        const hmac = crypto.createHmac('sha512', self._auth.secret);\n        hmac.update(challenge);\n        const response = hmac.digest('hex');\n\n        // call Authenticate\n        self._connection.callMethod('Authenticate', [self._auth.key, response], function(success, err){\n            // we got an error\n            if (null !== err)\n            {\n                if (DEBUG_ENABLED)\n                {\n                    console.log(\"Could not call 'Authenticate' : err = '%s'\", err);\n                }\n                if (null !== self._logger)\n                {\n                    self._logger.warn(\"Could not call 'Authenticate' : err = '%s'\", err);\n                }\n                // unsubscribe from orders\n                let timestamp = Date.now() / 1000.0;\n                self._subscriptions.orders.timestamp = timestamp;\n                self._subscriptions.orders.subscribed = false;\n                self._initializeWatchdog.call(self);\n                if (undefined !== cb)\n                {\n                    try\n                    {\n                        cb(false, err);\n                    }\n                    catch (e)\n                    {\n                        // just ignore\n                    }\n                }\n                return;\n            }\n            if (undefined !== cb)\n            {\n                try\n                {\n                    cb(true);\n                }\n                catch (e)\n                {\n                    // just ignore\n                }\n            }\n        });\n    });\n}", "id": "4fe883fb6005c0f3437597fb1f7af20ebfff02d2e18b044cdabbb3407de65a2f"}
{"identifier": "_clearWatchdogTimer", "parameters": {"type": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "_clearWatchdogTimer(type)\n{\n    if (undefined === this._watchdog[type])\n    {\n        return;\n    }\n    if (null !== this._watchdog[type].timer)\n    {\n        clearTimeout(this._watchdog[type].timer);\n        this._watchdog[type].timer = null;\n    }\n}", "code_tokens": ["_clearWatchdogTimer", "(", "type", ")", "{", "if", "(", "undefined", "===", "this", ".", "_watchdog", "[", "type", "]", ")", "{", "return", ";", "}", "if", "(", "null", "!==", "this", ".", "_watchdog", "[", "type", "]", ".", "timer", ")", "{", "clearTimeout", "(", "this", ".", "_watchdog", "[", "type", "]", ".", "timer", ")", ";", "this", ".", "_watchdog", "[", "type", "]", ".", "timer", "=", "null", ";", "}", "}"], "original_docstring": "/**\n * Clears a specific timer\n *\n * @param {string} type tickers|markets\n */", "comment": [], "docstring_tokens": ["Clears", "a", "specific", "timer", "@param", "{", "string", "}", "type", "tickers|markets"], "docstring": "Clears a specific timer\n@param {string} type tickers|markets", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "type", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Clears a specific timer\n @param {string} type tickers|markets", "short_docstring_tokens": ["Clears", "a", "specific", "timer", "@param", "{", "string", "}", "type", "tickers|markets"], "original_string": "_clearWatchdogTimer(type)\n{\n    if (undefined === this._watchdog[type])\n    {\n        return;\n    }\n    if (null !== this._watchdog[type].timer)\n    {\n        clearTimeout(this._watchdog[type].timer);\n        this._watchdog[type].timer = null;\n    }\n}", "id": "f29ac593d3c5a4df25b523b85db5d8a06bc029da019dd8337f93ecbda4989948"}
{"identifier": "_initializeWatchdog", "parameters": {}, "return_type": null, "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "_initializeWatchdog()\n{\n    if (0 != this._watchdog.tickers.timeout)\n    {\n        if (!this._subscriptions.tickers.global && _.isEmpty(this._subscriptions.tickers.pairs))\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Watchdog for 'tickers' will be disabled since we don't have any remaining subscription\");\n            }\n            this._clearWatchdogTimer('tickers');\n        }\n        else\n        {\n            this._startWatchdogTimer('tickers');\n        }\n    }\n    if (0 != this._watchdog.markets.timeout)\n    {\n        if (_.isEmpty(this._subscriptions.markets.pairs))\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Watchdog for 'markets' will be disabled since we don't have any remaining subscription\");\n            }\n            this._clearWatchdogTimer('markets');\n        }\n        else\n        {\n            this._startWatchdogTimer('markets');\n        }\n    }\n    if (this._watchdog.orders.enabled)\n    {\n        if (!this._subscriptions.orders.subscribed)\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Watchdog for 'orders' will be disabled since we don't have a subscription\");\n            }\n            this._clearWatchdogTimer('orders');\n        }\n        else\n        {\n            this._startWatchdogTimerForOrders();\n        }\n    }\n}", "code_tokens": ["_initializeWatchdog", "(", ")", "{", "if", "(", "0", "!=", "this", ".", "_watchdog", ".", "tickers", ".", "timeout", ")", "{", "if", "(", "!", "this", ".", "_subscriptions", ".", "tickers", ".", "global", "&&", "_", ".", "isEmpty", "(", "this", ".", "_subscriptions", ".", "tickers", ".", "pairs", ")", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Watchdog for 'tickers' will be disabled since we don't have any remaining subscription\"", ")", ";", "}", "this", ".", "_clearWatchdogTimer", "(", "'tickers'", ")", ";", "}", "else", "{", "this", ".", "_startWatchdogTimer", "(", "'tickers'", ")", ";", "}", "}", "if", "(", "0", "!=", "this", ".", "_watchdog", ".", "markets", ".", "timeout", ")", "{", "if", "(", "_", ".", "isEmpty", "(", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", ")", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Watchdog for 'markets' will be disabled since we don't have any remaining subscription\"", ")", ";", "}", "this", ".", "_clearWatchdogTimer", "(", "'markets'", ")", ";", "}", "else", "{", "this", ".", "_startWatchdogTimer", "(", "'markets'", ")", ";", "}", "}", "if", "(", "this", ".", "_watchdog", ".", "orders", ".", "enabled", ")", "{", "if", "(", "!", "this", ".", "_subscriptions", ".", "orders", ".", "subscribed", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Watchdog for 'orders' will be disabled since we don't have a subscription\"", ")", ";", "}", "this", ".", "_clearWatchdogTimer", "(", "'orders'", ")", ";", "}", "else", "{", "this", ".", "_startWatchdogTimerForOrders", "(", ")", ";", "}", "}", "}"], "original_docstring": "/**\n * Checks if watchdog timers should be started / stopped\n */", "comment": ["// tickers watchdog is enabled", "// no subscriptions => disable watchdog", "// markets watchdog is enabled", "// no subscriptions => disable watchdog", "// orders watchdog is enabled", "// no subscriptions => disable watchdog"], "docstring_tokens": ["Checks", "if", "watchdog", "timers", "should", "be", "started", "/", "stopped"], "docstring": "Checks if watchdog timers should be started / stopped", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Checks if watchdog timers should be started / stopped", "short_docstring_tokens": ["Checks", "if", "watchdog", "timers", "should", "be", "started", "/", "stopped"], "original_string": "_initializeWatchdog()\n{\n    // tickers watchdog is enabled\n    if (0 != this._watchdog.tickers.timeout)\n    {\n        // no subscriptions => disable watchdog\n        if (!this._subscriptions.tickers.global && _.isEmpty(this._subscriptions.tickers.pairs))\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Watchdog for 'tickers' will be disabled since we don't have any remaining subscription\");\n            }\n            this._clearWatchdogTimer('tickers');\n        }\n        else\n        {\n            this._startWatchdogTimer('tickers');\n        }\n    }\n    // markets watchdog is enabled\n    if (0 != this._watchdog.markets.timeout)\n    {\n        // no subscriptions => disable watchdog\n        if (_.isEmpty(this._subscriptions.markets.pairs))\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Watchdog for 'markets' will be disabled since we don't have any remaining subscription\");\n            }\n            this._clearWatchdogTimer('markets');\n        }\n        else\n        {\n            this._startWatchdogTimer('markets');\n        }\n    }\n    // orders watchdog is enabled\n    if (this._watchdog.orders.enabled)\n    {\n        // no subscriptions => disable watchdog\n        if (!this._subscriptions.orders.subscribed)\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Watchdog for 'orders' will be disabled since we don't have a subscription\");\n            }\n            this._clearWatchdogTimer('orders');\n        }\n        else\n        {\n            this._startWatchdogTimerForOrders();\n        }\n    }\n}", "id": "6149a8c0b1a198eb4cc0e3be69d1abcd2927d30828720ef910dedaeb679d827f"}
{"identifier": "_startWatchdogTimerForOrders", "parameters": {}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "_startWatchdogTimerForOrders()\n{\n    if (null !== this._watchdog.orders.timer)\n    {\n        return;\n    }\n    let self = this;\n    if (DEBUG_ENABLED)\n    {\n        console.log(\"Watchdog for 'orders' will be started since we have a subscription\");\n    }\n    this._watchdog.orders.timer = setInterval(function(){\n        if (!self.isConnected.call(self))\n        {\n            return;\n        }\n        self._watchdog.orders.lastTimestamp = new Date().getTime();\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"About to re-subscribe for 'orders'...\");\n        }\n        self._subscribeToOrders.call(self, function(subscribed, err){\n            if (subscribed)\n            {\n                let evt = {connectionId:self._connectionId,dataType:'orders',lastTimestamp:self._watchdog.orders.lastTimestamp}\n                self.emit('watchdog', evt);\n            }\n        });\n    }, this._watchdog.orders.period);\n}", "code_tokens": ["_startWatchdogTimerForOrders", "(", ")", "{", "if", "(", "null", "!==", "this", ".", "_watchdog", ".", "orders", ".", "timer", ")", "{", "return", ";", "}", "let", "self", "=", "this", ";", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Watchdog for 'orders' will be started since we have a subscription\"", ")", ";", "}", "this", ".", "_watchdog", ".", "orders", ".", "timer", "=", "setInterval", "(", "function", "(", ")", "{", "if", "(", "!", "self", ".", "isConnected", ".", "call", "(", "self", ")", ")", "{", "return", ";", "}", "self", ".", "_watchdog", ".", "orders", ".", "lastTimestamp", "=", "new", "Date", "(", ")", ".", "getTime", "(", ")", ";", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"About to re-subscribe for 'orders'...\"", ")", ";", "}", "self", ".", "_subscribeToOrders", ".", "call", "(", "self", ",", "function", "(", "subscribed", ",", "err", ")", "{", "if", "(", "subscribed", ")", "{", "let", "evt", "=", "{", "connectionId", ":", "self", ".", "_connectionId", ",", "dataType", ":", "'orders'", ",", "lastTimestamp", ":", "self", ".", "_watchdog", ".", "orders", ".", "lastTimestamp", "}", "self", ".", "emit", "(", "'watchdog'", ",", "evt", ")", ";", "}", "}", ")", ";", "}", ",", "this", ".", "_watchdog", ".", "orders", ".", "period", ")", ";", "}"], "original_docstring": "/**\n * Starts a timer for orders subscription\n *\n */", "comment": ["// timer already exists", "// if socket is not connected, do nothing", "// resubscribe & emit event", "// only emit event if re-subscribe was successful"], "docstring_tokens": ["Starts", "a", "timer", "for", "orders", "subscription"], "docstring": "Starts a timer for orders subscription", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Starts a timer for orders subscription", "short_docstring_tokens": ["Starts", "a", "timer", "for", "orders", "subscription"], "original_string": "_startWatchdogTimerForOrders()\n{\n    // timer already exists\n    if (null !== this._watchdog.orders.timer)\n    {\n        return;\n    }\n    let self = this;\n    if (DEBUG_ENABLED)\n    {\n        console.log(\"Watchdog for 'orders' will be started since we have a subscription\");\n    }\n    this._watchdog.orders.timer = setInterval(function(){\n        // if socket is not connected, do nothing\n        if (!self.isConnected.call(self))\n        {\n            return;\n        }\n        self._watchdog.orders.lastTimestamp = new Date().getTime();\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"About to re-subscribe for 'orders'...\");\n        }\n        // resubscribe & emit event\n        self._subscribeToOrders.call(self, function(subscribed, err){\n            // only emit event if re-subscribe was successful\n            if (subscribed)\n            {\n                let evt = {connectionId:self._connectionId,dataType:'orders',lastTimestamp:self._watchdog.orders.lastTimestamp}\n                self.emit('watchdog', evt);\n            }\n        });\n    }, this._watchdog.orders.period);\n}", "id": "b6e82ac13c4068a60b5054ab52da2511f22e6bc79a58e59251734824841f392f"}
{"identifier": "_startWatchdogTimer", "parameters": {"type": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "_startWatchdogTimer(type)\n{\n    if (undefined === this._watchdog[type])\n    {\n        return;\n    }\n    if (null !== this._watchdog[type].timer)\n    {\n        return;\n    }\n    let self = this;\n    if (DEBUG_ENABLED)\n    {\n        console.log(\"Watchdog for '%s' will be started since we have at least one subscription\", type);\n    }\n    let interval = parseInt(this._watchdog[type].timeout / 10.0);\n    this._watchdog[type].timer = setInterval(function(){\n        if (!self.isConnected.call(self))\n        {\n            return;\n        }\n        let timestamp = new Date().getTime();\n        let delta = timestamp - self._watchdog[type].lastTimestamp;\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"Last '%s' data was received %dms ago\", type, delta);\n        }\n        let evt = {connectionId:self._connectionId,dataType:type,lastTimestamp:self._watchdog[type].lastTimestamp}\n        self.emit('watchdog', evt);\n        if (delta > self._watchdog[type].timeout)\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Data timeout occured for '%s' : last data received at = %d\", type, self._watchdog[type].lastTimestamp);\n            }\n            self.emit('timeout', evt);\n            if (self._watchdog[type].reconnect)\n            {\n                if (null !== self._logger)\n                {\n                    self._logger.warn(\"Data timeout occured (bittrex|%d|%s), will try to reconnect immediately\", self._connectionCounter, self._connectionId);\n                }\n                self.reconnect.call(self, true);\n            }\n        }\n    }, interval);\n}", "code_tokens": ["_startWatchdogTimer", "(", "type", ")", "{", "if", "(", "undefined", "===", "this", ".", "_watchdog", "[", "type", "]", ")", "{", "return", ";", "}", "if", "(", "null", "!==", "this", ".", "_watchdog", "[", "type", "]", ".", "timer", ")", "{", "return", ";", "}", "let", "self", "=", "this", ";", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Watchdog for '%s' will be started since we have at least one subscription\"", ",", "type", ")", ";", "}", "let", "interval", "=", "parseInt", "(", "this", ".", "_watchdog", "[", "type", "]", ".", "timeout", "/", "10.0", ")", ";", "this", ".", "_watchdog", "[", "type", "]", ".", "timer", "=", "setInterval", "(", "function", "(", ")", "{", "if", "(", "!", "self", ".", "isConnected", ".", "call", "(", "self", ")", ")", "{", "return", ";", "}", "let", "timestamp", "=", "new", "Date", "(", ")", ".", "getTime", "(", ")", ";", "let", "delta", "=", "timestamp", "-", "self", ".", "_watchdog", "[", "type", "]", ".", "lastTimestamp", ";", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Last '%s' data was received %dms ago\"", ",", "type", ",", "delta", ")", ";", "}", "let", "evt", "=", "{", "connectionId", ":", "self", ".", "_connectionId", ",", "dataType", ":", "type", ",", "lastTimestamp", ":", "self", ".", "_watchdog", "[", "type", "]", ".", "lastTimestamp", "}", "self", ".", "emit", "(", "'watchdog'", ",", "evt", ")", ";", "if", "(", "delta", ">", "self", ".", "_watchdog", "[", "type", "]", ".", "timeout", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Data timeout occured for '%s' : last data received at = %d\"", ",", "type", ",", "self", ".", "_watchdog", "[", "type", "]", ".", "lastTimestamp", ")", ";", "}", "self", ".", "emit", "(", "'timeout'", ",", "evt", ")", ";", "if", "(", "self", ".", "_watchdog", "[", "type", "]", ".", "reconnect", ")", "{", "if", "(", "null", "!==", "self", ".", "_logger", ")", "{", "self", ".", "_logger", ".", "warn", "(", "\"Data timeout occured (bittrex|%d|%s), will try to reconnect immediately\"", ",", "self", ".", "_connectionCounter", ",", "self", ".", "_connectionId", ")", ";", "}", "self", ".", "reconnect", ".", "call", "(", "self", ",", "true", ")", ";", "}", "}", "}", ",", "interval", ")", ";", "}"], "original_docstring": "/**\n * Starts a specific timer\n *\n * @param {string} type tickers|markets\n */", "comment": ["// timer already exists", "// use timeout / 10 to ensure we properly detect timeout soon enough (this means timeout will be detected at most in ${timeout * 1.10} ms)", "// if socket is not connected, do nothing", "// timeout triggered", "// reconnect if necessary"], "docstring_tokens": ["Starts", "a", "specific", "timer", "@param", "{", "string", "}", "type", "tickers|markets"], "docstring": "Starts a specific timer\n@param {string} type tickers|markets", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "type", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Starts a specific timer\n @param {string} type tickers|markets", "short_docstring_tokens": ["Starts", "a", "specific", "timer", "@param", "{", "string", "}", "type", "tickers|markets"], "original_string": "_startWatchdogTimer(type)\n{\n    if (undefined === this._watchdog[type])\n    {\n        return;\n    }\n    // timer already exists\n    if (null !== this._watchdog[type].timer)\n    {\n        return;\n    }\n    let self = this;\n    if (DEBUG_ENABLED)\n    {\n        console.log(\"Watchdog for '%s' will be started since we have at least one subscription\", type);\n    }\n    // use timeout / 10 to ensure we properly detect timeout soon enough (this means timeout will be detected at most in ${timeout * 1.10} ms)\n    let interval = parseInt(this._watchdog[type].timeout / 10.0);\n    this._watchdog[type].timer = setInterval(function(){\n        // if socket is not connected, do nothing\n        if (!self.isConnected.call(self))\n        {\n            return;\n        }\n        let timestamp = new Date().getTime();\n        // timeout triggered\n        let delta = timestamp - self._watchdog[type].lastTimestamp;\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"Last '%s' data was received %dms ago\", type, delta);\n        }\n        let evt = {connectionId:self._connectionId,dataType:type,lastTimestamp:self._watchdog[type].lastTimestamp}\n        self.emit('watchdog', evt);\n        if (delta > self._watchdog[type].timeout)\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Data timeout occured for '%s' : last data received at = %d\", type, self._watchdog[type].lastTimestamp);\n            }\n            self.emit('timeout', evt);\n            // reconnect if necessary\n            if (self._watchdog[type].reconnect)\n            {\n                if (null !== self._logger)\n                {\n                    self._logger.warn(\"Data timeout occured (bittrex|%d|%s), will try to reconnect immediately\", self._connectionCounter, self._connectionId);\n                }\n                self.reconnect.call(self, true);\n            }\n        }\n    }, interval);\n}", "id": "424a58ad39ff7970f9359e4301f65dc09f110d139ae20ef0f159060cbfcf0d1c"}
{"identifier": "_createConnection", "parameters": {"delay": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "_createConnection(delay)\n{\n    this._connectionCounter += 1;\n    this._connectionId = null;\n    let connection = new SignalRConnection(this._connectionOptions);\n    connection.logAllWsMessages(this._logAllWsMessages);\n    connection.logKeepaliveMessages(this._logKeepaliveMessages);\n    this._computeUtcOffset();\n    let self = this;\n    connection.on('disconnected', function(data){\n        self._clearWatchdogTimers.call(self);\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"Connection (bittrex|%d|%s) disconnected, will try to reconnect in %dms\", self._connectionCounter, data.connectionId, self._retryDelay);\n        }\n        if (null !== self._logger)\n        {\n            self._logger.warn(\"Connection (bittrex|%d|%s) disconnected, will try to reconnect in %dms\", self._connectionCounter, data.connectionId, self._retryDelay);\n        }\n        self.emit('disconnected', {connectionId:data.connectionId, code:data.code, reason:data.reason});\n        self._createConnection.call(self, self._retryDelay);\n    });\n    connection.on('connectionError', function(err){\n        if (err.retry)\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Connection (bittrex|%d|%s) failed (will try to reconnect in %dms) : attempts = %d, error = '%s'\", self._connectionCounter, err.step, self._retryDelay, err.attempts, JSON.stringify(err.error));\n            }\n            if (null !== self._logger)\n            {\n                self._logger.warn(\"Connection (bittrex|%d|%s) failed (will try to reconnect in %dms) : attempts = %d, error = '%s'\", self._connectionCounter, err.step, self._retryDelay, err.attempts, JSON.stringify(err.error));\n            }\n            self.emit('connectionError', {step:err.step,attempts:err.attempts,error:err.error});\n            return;\n        }\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"Connection (bittrex|%s|%s) failed (no more retry left) : attempts = %d, error = '%s'\", self._connectionCounter, err.step, err.attempts, JSON.stringify(err.error));\n        }\n        if (null !== self._logger)\n        {\n            self._logger.warn(\"Connection (bittrex|%d|%s) failed (no more retry left) : attempts = %d, error = '%s'\", self._connectionCounter, err.step, err.attempts, JSON.stringify(err.error));\n        }\n        self.emit('terminated', {step:err.step,attempts:err.attempts,error:err.error});\n    });\n    connection.on('connected', function(data){\n        self._clearWatchdogTimers.call(self);\n        self._connectionId = data.connectionId;\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"Connection (bittrex|%d|%s) connected\", self._connectionCounter, data.connectionId);\n        }\n        if (null !== self._logger)\n        {\n            self._logger.info(\"Connection (bittrex|%d|%s) connected\", self._connectionCounter, data.connectionId);\n        }\n        self.emit('connected', {connectionId:data.connectionId});\n        self._connectedTimestamp = Date.now() / 1000.0;\n        self._processSubscriptions.call(self);\n    });\n    connection.on('data', function(data){\n        self._processData.call(self, data);\n    });\n    this._connection = connection;\n    try\n    {\n        if (undefined === delay)\n        {\n            connection.connect();\n        }\n        else\n        {\n            setTimeout(function(){\n                if (null === self._connection)\n                {\n                    return;\n                }\n                connection.connect();\n            }, delay);\n        }\n    }\n    catch (e)\n    {\n        throw e;\n    }\n}", "code_tokens": ["_createConnection", "(", "delay", ")", "{", "this", ".", "_connectionCounter", "+=", "1", ";", "this", ".", "_connectionId", "=", "null", ";", "let", "connection", "=", "new", "SignalRConnection", "(", "this", ".", "_connectionOptions", ")", ";", "connection", ".", "logAllWsMessages", "(", "this", ".", "_logAllWsMessages", ")", ";", "connection", ".", "logKeepaliveMessages", "(", "this", ".", "_logKeepaliveMessages", ")", ";", "this", ".", "_computeUtcOffset", "(", ")", ";", "let", "self", "=", "this", ";", "connection", ".", "on", "(", "'disconnected'", ",", "function", "(", "data", ")", "{", "self", ".", "_clearWatchdogTimers", ".", "call", "(", "self", ")", ";", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Connection (bittrex|%d|%s) disconnected, will try to reconnect in %dms\"", ",", "self", ".", "_connectionCounter", ",", "data", ".", "connectionId", ",", "self", ".", "_retryDelay", ")", ";", "}", "if", "(", "null", "!==", "self", ".", "_logger", ")", "{", "self", ".", "_logger", ".", "warn", "(", "\"Connection (bittrex|%d|%s) disconnected, will try to reconnect in %dms\"", ",", "self", ".", "_connectionCounter", ",", "data", ".", "connectionId", ",", "self", ".", "_retryDelay", ")", ";", "}", "self", ".", "emit", "(", "'disconnected'", ",", "{", "connectionId", ":", "data", ".", "connectionId", ",", "code", ":", "data", ".", "code", ",", "reason", ":", "data", ".", "reason", "}", ")", ";", "self", ".", "_createConnection", ".", "call", "(", "self", ",", "self", ".", "_retryDelay", ")", ";", "}", ")", ";", "connection", ".", "on", "(", "'connectionError'", ",", "function", "(", "err", ")", "{", "if", "(", "err", ".", "retry", ")", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Connection (bittrex|%d|%s) failed (will try to reconnect in %dms) : attempts = %d, error = '%s'\"", ",", "self", ".", "_connectionCounter", ",", "err", ".", "step", ",", "self", ".", "_retryDelay", ",", "err", ".", "attempts", ",", "JSON", ".", "stringify", "(", "err", ".", "error", ")", ")", ";", "}", "if", "(", "null", "!==", "self", ".", "_logger", ")", "{", "self", ".", "_logger", ".", "warn", "(", "\"Connection (bittrex|%d|%s) failed (will try to reconnect in %dms) : attempts = %d, error = '%s'\"", ",", "self", ".", "_connectionCounter", ",", "err", ".", "step", ",", "self", ".", "_retryDelay", ",", "err", ".", "attempts", ",", "JSON", ".", "stringify", "(", "err", ".", "error", ")", ")", ";", "}", "self", ".", "emit", "(", "'connectionError'", ",", "{", "step", ":", "err", ".", "step", ",", "attempts", ":", "err", ".", "attempts", ",", "error", ":", "err", ".", "error", "}", ")", ";", "return", ";", "}", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Connection (bittrex|%s|%s) failed (no more retry left) : attempts = %d, error = '%s'\"", ",", "self", ".", "_connectionCounter", ",", "err", ".", "step", ",", "err", ".", "attempts", ",", "JSON", ".", "stringify", "(", "err", ".", "error", ")", ")", ";", "}", "if", "(", "null", "!==", "self", ".", "_logger", ")", "{", "self", ".", "_logger", ".", "warn", "(", "\"Connection (bittrex|%d|%s) failed (no more retry left) : attempts = %d, error = '%s'\"", ",", "self", ".", "_connectionCounter", ",", "err", ".", "step", ",", "err", ".", "attempts", ",", "JSON", ".", "stringify", "(", "err", ".", "error", ")", ")", ";", "}", "self", ".", "emit", "(", "'terminated'", ",", "{", "step", ":", "err", ".", "step", ",", "attempts", ":", "err", ".", "attempts", ",", "error", ":", "err", ".", "error", "}", ")", ";", "}", ")", ";", "connection", ".", "on", "(", "'connected'", ",", "function", "(", "data", ")", "{", "self", ".", "_clearWatchdogTimers", ".", "call", "(", "self", ")", ";", "self", ".", "_connectionId", "=", "data", ".", "connectionId", ";", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Connection (bittrex|%d|%s) connected\"", ",", "self", ".", "_connectionCounter", ",", "data", ".", "connectionId", ")", ";", "}", "if", "(", "null", "!==", "self", ".", "_logger", ")", "{", "self", ".", "_logger", ".", "info", "(", "\"Connection (bittrex|%d|%s) connected\"", ",", "self", ".", "_connectionCounter", ",", "data", ".", "connectionId", ")", ";", "}", "self", ".", "emit", "(", "'connected'", ",", "{", "connectionId", ":", "data", ".", "connectionId", "}", ")", ";", "self", ".", "_connectedTimestamp", "=", "Date", ".", "now", "(", ")", "/", "1000.0", ";", "self", ".", "_processSubscriptions", ".", "call", "(", "self", ")", ";", "}", ")", ";", "connection", ".", "on", "(", "'data'", ",", "function", "(", "data", ")", "{", "self", ".", "_processData", ".", "call", "(", "self", ",", "data", ")", ";", "}", ")", ";", "this", ".", "_connection", "=", "connection", ";", "try", "{", "if", "(", "undefined", "===", "delay", ")", "{", "connection", ".", "connect", "(", ")", ";", "}", "else", "{", "setTimeout", "(", "function", "(", ")", "{", "if", "(", "null", "===", "self", ".", "_connection", ")", "{", "return", ";", "}", "connection", ".", "connect", "(", ")", ";", "}", ",", "delay", ")", ";", "}", "}", "catch", "(", "e", ")", "{", "throw", "e", ";", "}", "}"], "original_docstring": "/**\n * Creates a new connection\n *\n * @param {integer} delay delay in ms before connecting (optional, default = no delay)\n */", "comment": ["// recompute utc offset on each reconnect", "// clear timers for data timeout", "// retry is possible", "// no more retry", "// clear timers for data timeout", "// connect immediately", "// disconnection probably requested by client"], "docstring_tokens": ["Creates", "a", "new", "connection", "@param", "{", "integer", "}", "delay", "delay", "in", "ms", "before", "connecting", "(", "optional", "default", "=", "no", "delay", ")"], "docstring": "Creates a new connection\n@param {integer} delay delay in ms before connecting (optional, default = no delay)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "delay", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Creates a new connection\n @param {integer} delay delay in ms before connecting (optional, default = no delay)", "short_docstring_tokens": ["Creates", "a", "new", "connection", "@param", "{", "integer", "}", "delay", "delay", "in", "ms", "before", "connecting", "(", "optional", "default", "=", "no", "delay", ")"], "original_string": "_createConnection(delay)\n{\n    this._connectionCounter += 1;\n    this._connectionId = null;\n    let connection = new SignalRConnection(this._connectionOptions);\n\n    connection.logAllWsMessages(this._logAllWsMessages);\n    connection.logKeepaliveMessages(this._logKeepaliveMessages);\n\n    // recompute utc offset on each reconnect\n    this._computeUtcOffset();\n\n    let self = this;\n\n    connection.on('disconnected', function(data){\n        // clear timers for data timeout\n        self._clearWatchdogTimers.call(self);\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"Connection (bittrex|%d|%s) disconnected, will try to reconnect in %dms\", self._connectionCounter, data.connectionId, self._retryDelay);\n        }\n        if (null !== self._logger)\n        {\n            self._logger.warn(\"Connection (bittrex|%d|%s) disconnected, will try to reconnect in %dms\", self._connectionCounter, data.connectionId, self._retryDelay);\n        }\n        self.emit('disconnected', {connectionId:data.connectionId, code:data.code, reason:data.reason});\n        self._createConnection.call(self, self._retryDelay);\n    });\n\n    connection.on('connectionError', function(err){\n        // retry is possible\n        if (err.retry)\n        {\n            if (DEBUG_ENABLED)\n            {\n                console.log(\"Connection (bittrex|%d|%s) failed (will try to reconnect in %dms) : attempts = %d, error = '%s'\", self._connectionCounter, err.step, self._retryDelay, err.attempts, JSON.stringify(err.error));\n            }\n            if (null !== self._logger)\n            {\n                self._logger.warn(\"Connection (bittrex|%d|%s) failed (will try to reconnect in %dms) : attempts = %d, error = '%s'\", self._connectionCounter, err.step, self._retryDelay, err.attempts, JSON.stringify(err.error));\n            }\n            self.emit('connectionError', {step:err.step,attempts:err.attempts,error:err.error});\n            return;\n        }\n        // no more retry\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"Connection (bittrex|%s|%s) failed (no more retry left) : attempts = %d, error = '%s'\", self._connectionCounter, err.step, err.attempts, JSON.stringify(err.error));\n        }\n        if (null !== self._logger)\n        {\n            self._logger.warn(\"Connection (bittrex|%d|%s) failed (no more retry left) : attempts = %d, error = '%s'\", self._connectionCounter, err.step, err.attempts, JSON.stringify(err.error));\n        }\n        self.emit('terminated', {step:err.step,attempts:err.attempts,error:err.error});\n    });\n\n    connection.on('connected', function(data){\n        // clear timers for data timeout\n        self._clearWatchdogTimers.call(self);\n        self._connectionId = data.connectionId;\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"Connection (bittrex|%d|%s) connected\", self._connectionCounter, data.connectionId);\n        }\n        if (null !== self._logger)\n        {\n            self._logger.info(\"Connection (bittrex|%d|%s) connected\", self._connectionCounter, data.connectionId);\n        }\n        self.emit('connected', {connectionId:data.connectionId});\n        self._connectedTimestamp = Date.now() / 1000.0;\n        self._processSubscriptions.call(self);\n    });\n\n    connection.on('data', function(data){\n        self._processData.call(self, data);\n    });\n\n    this._connection = connection;\n\n    try\n    {\n        // connect immediately\n        if (undefined === delay)\n        {\n            connection.connect();\n        }\n        else\n        {\n            setTimeout(function(){\n                // disconnection probably requested by client\n                if (null === self._connection)\n                {\n                    return;\n                }\n                connection.connect();\n            }, delay);\n        }\n    }\n    catch (e)\n    {\n        throw e;\n    }\n}", "id": "bf619f79bb0b123ed8d2c7925826f79413f166ddd92bb1065897a2f6f12b1b70"}
{"identifier": "_processSubscriptions", "parameters": {}, "return_type": null, "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "_processSubscriptions()\n{\n    let changes = {\n        subscribe:[],\n        resync:[]\n    };\n    this._unsubscribedMarkets = {\n        pairs:{},\n        count:0\n    };\n    if (this._subscriptions.tickers.global)\n    {\n        changes.subscribe.push({entity:'ticker',global:true});\n    }\n    else\n    {\n        _.forEach(Object.keys(this._subscriptions.tickers.pairs), (p) => {\n            changes.subscribe.push({entity:'ticker',pair:p});\n        });\n    }\n    _.forEach(Object.keys(this._subscriptions.markets.pairs), (p) => {\n        changes.subscribe.push({entity:'market',pair:p});\n        changes.resync.push({entity:'orderBook',pair:p});\n    });\n    if (this._subscriptions.orders.subscribed)\n    {\n        changes.subscribe.push({entity:'orders'});\n    }\n    this._processChanges(changes);\n}", "code_tokens": ["_processSubscriptions", "(", ")", "{", "let", "changes", "=", "{", "subscribe", ":", "[", "]", ",", "resync", ":", "[", "]", "}", ";", "this", ".", "_unsubscribedMarkets", "=", "{", "pairs", ":", "{", "}", ",", "count", ":", "0", "}", ";", "if", "(", "this", ".", "_subscriptions", ".", "tickers", ".", "global", ")", "{", "changes", ".", "subscribe", ".", "push", "(", "{", "entity", ":", "'ticker'", ",", "global", ":", "true", "}", ")", ";", "}", "else", "{", "_", ".", "forEach", "(", "Object", ".", "keys", "(", "this", ".", "_subscriptions", ".", "tickers", ".", "pairs", ")", ",", "(", "p", ")", "=>", "{", "changes", ".", "subscribe", ".", "push", "(", "{", "entity", ":", "'ticker'", ",", "pair", ":", "p", "}", ")", ";", "}", ")", ";", "}", "_", ".", "forEach", "(", "Object", ".", "keys", "(", "this", ".", "_subscriptions", ".", "markets", ".", "pairs", ")", ",", "(", "p", ")", "=>", "{", "changes", ".", "subscribe", ".", "push", "(", "{", "entity", ":", "'market'", ",", "pair", ":", "p", "}", ")", ";", "changes", ".", "resync", ".", "push", "(", "{", "entity", ":", "'orderBook'", ",", "pair", ":", "p", "}", ")", ";", "}", ")", ";", "if", "(", "this", ".", "_subscriptions", ".", "orders", ".", "subscribed", ")", "{", "changes", ".", "subscribe", ".", "push", "(", "{", "entity", ":", "'orders'", "}", ")", ";", "}", "this", ".", "_processChanges", "(", "changes", ")", ";", "}"], "original_docstring": "/**\n * This method will be called upon reconnection and will call _processChanges\n */", "comment": ["// we just reconnected, reset unsubscribed markets", "// request full order book upon reconnection"], "docstring_tokens": ["This", "method", "will", "be", "called", "upon", "reconnection", "and", "will", "call", "_processChanges"], "docstring": "This method will be called upon reconnection and will call _processChanges", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "This method will be called upon reconnection and will call _processChanges", "short_docstring_tokens": ["This", "method", "will", "be", "called", "upon", "reconnection", "and", "will", "call", "_processChanges"], "original_string": "_processSubscriptions()\n{\n    let changes = {\n        subscribe:[],\n        resync:[]\n    };\n    // we just reconnected, reset unsubscribed markets\n    this._unsubscribedMarkets = {\n        pairs:{},\n        count:0\n    };\n    if (this._subscriptions.tickers.global)\n    {\n        changes.subscribe.push({entity:'ticker',global:true});\n    }\n    else\n    {\n        _.forEach(Object.keys(this._subscriptions.tickers.pairs), (p) => {\n            changes.subscribe.push({entity:'ticker',pair:p});\n        });\n    }\n    _.forEach(Object.keys(this._subscriptions.markets.pairs), (p) => {\n        changes.subscribe.push({entity:'market',pair:p});\n        // request full order book upon reconnection\n        changes.resync.push({entity:'orderBook',pair:p});\n    });\n    if (this._subscriptions.orders.subscribed)\n    {\n        changes.subscribe.push({entity:'orders'});\n    }\n    this._processChanges(changes);\n}", "id": "06b2d2d76448574f3af254514c877cc102daaffe81fe884af4c50bd44ec209de"}
{"identifier": "_decodeData", "parameters": {"d": null, "cb": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "_decodeData(d, cb)\n{\n    let self = this;\n    let gzipData = Buffer.from(d, 'base64');\n    zlib.inflateRaw(gzipData, function(err, str){\n        if (null !== err)\n        {\n            self._logger.warn(\"Could not decompress Bittrex gzip data : %s\", err);\n            cb.call(self, undefined);\n            return;\n        }\n        let data;\n        try\n        {\n            data = JSON.parse(str);\n        }\n        catch (e)\n        {\n            self._logger.warn(\"Decompressed Bittrex data does not contain valid JSON\", err);\n            cb.call(self, undefined);\n            return;\n        }\n        cb.call(self, data);\n    });\n}", "code_tokens": ["_decodeData", "(", "d", ",", "cb", ")", "{", "let", "self", "=", "this", ";", "let", "gzipData", "=", "Buffer", ".", "from", "(", "d", ",", "'base64'", ")", ";", "zlib", ".", "inflateRaw", "(", "gzipData", ",", "function", "(", "err", ",", "str", ")", "{", "if", "(", "null", "!==", "err", ")", "{", "self", ".", "_logger", ".", "warn", "(", "\"Could not decompress Bittrex gzip data : %s\"", ",", "err", ")", ";", "cb", ".", "call", "(", "self", ",", "undefined", ")", ";", "return", ";", "}", "let", "data", ";", "try", "{", "data", "=", "JSON", ".", "parse", "(", "str", ")", ";", "}", "catch", "(", "e", ")", "{", "self", ".", "_logger", ".", "warn", "(", "\"Decompressed Bittrex data does not contain valid JSON\"", ",", "err", ")", ";", "cb", ".", "call", "(", "self", ",", "undefined", ")", ";", "return", ";", "}", "cb", ".", "call", "(", "self", ",", "data", ")", ";", "}", ")", ";", "}"], "original_docstring": "/**\n * Decode data received from endpoint :\n * 1) base64 decode\n * 2) gzip inflate\n */", "comment": ["// we need to use inflateRaw to avoid zlib error 'incorrect header check' (Z_DATA_ERROR)"], "docstring_tokens": ["Decode", "data", "received", "from", "endpoint", ":", "1", ")", "base64", "decode", "2", ")", "gzip", "inflate"], "docstring": "Decode data received from endpoint :\n1) base64 decode\n2) gzip inflate", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "d", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "cb", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Decode data received from endpoint :\n 1) base64 decode\n 2) gzip inflate", "short_docstring_tokens": ["Decode", "data", "received", "from", "endpoint", ":", "1", ")", "base64", "decode", "2", ")", "gzip", "inflate"], "original_string": "_decodeData(d, cb)\n{\n    let self = this;\n    let gzipData = Buffer.from(d, 'base64');\n    // we need to use inflateRaw to avoid zlib error 'incorrect header check' (Z_DATA_ERROR)\n    zlib.inflateRaw(gzipData, function(err, str){\n        if (null !== err)\n        {\n            self._logger.warn(\"Could not decompress Bittrex gzip data : %s\", err);\n            cb.call(self, undefined);\n            return;\n        }\n        let data;\n        try\n        {\n            data = JSON.parse(str);\n        }\n        catch (e)\n        {\n            self._logger.warn(\"Decompressed Bittrex data does not contain valid JSON\", err);\n            cb.call(self, undefined);\n            return;\n        }\n        cb.call(self, data);\n    });\n}", "id": "7024edc1e58071081d71d447919b5b734641084811a8da9eb6b186808ea46648"}
{"identifier": "connect", "parameters": {}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "connect()\n{\n    if (null !== this._connection)\n    {\n        return;\n    }\n    this._createConnection();\n}", "code_tokens": ["connect", "(", ")", "{", "if", "(", "null", "!==", "this", ".", "_connection", ")", "{", "return", ";", "}", "this", ".", "_createConnection", "(", ")", ";", "}"], "original_docstring": "/*\n * Connect SignalR connection\n *\n * Should not be necessary since connection will happen automatically\n */", "comment": ["// create if needed"], "docstring_tokens": ["Connect", "SignalR", "connection", "Should", "not", "be", "necessary", "since", "connection", "will", "happen", "automatically"], "docstring": "Connect SignalR connection\nShould not be necessary since connection will happen automatically", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Connect SignalR connection\n Should not be necessary since connection will happen automatically", "short_docstring_tokens": ["Connect", "SignalR", "connection", "Should", "not", "be", "necessary", "since", "connection", "will", "happen", "automatically"], "original_string": "connect()\n{\n    // create if needed\n    if (null !== this._connection)\n    {\n        return;\n    }\n    this._createConnection();\n}", "id": "e7d539b49f36ffcb69582534b6c2d70d0badfc63d86f58d07356d0794a6c3414"}
{"identifier": "reconnect", "parameters": {"immediate": null}, "return_type": "<not_specific>", "repo": "Papabyte/odex-orderbook-replication-browser", "path": "src/js/bittrex-ws/client.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": 1.0, "license": ["MIT"], "hexsha": "c985da3fea21ffe4ae849e6aa60ea7b845202775", "ext": "js", "size": 66464, "code": "reconnect(immediate)\n{\n    if (null === this._connection)\n    {\n        return;\n    }\n    this._clearWatchdogTimers();\n    let connection = this._connection;\n    connection.disconnect();\n    if (true === immediate)\n    {\n        this._createConnection();\n    }\n    else\n    {\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"Client (bittrex) will reconnect in %dms\", this._retryDelay);\n        }\n        if (null !== this._logger)\n        {\n            this._logger.info(\"Client (bittrex) will reconnect in %dms\", this._retryDelay);\n        }\n        this._createConnection(this._retryDelay);\n    }\n}", "code_tokens": ["reconnect", "(", "immediate", ")", "{", "if", "(", "null", "===", "this", ".", "_connection", ")", "{", "return", ";", "}", "this", ".", "_clearWatchdogTimers", "(", ")", ";", "let", "connection", "=", "this", ".", "_connection", ";", "connection", ".", "disconnect", "(", ")", ";", "if", "(", "true", "===", "immediate", ")", "{", "this", ".", "_createConnection", "(", ")", ";", "}", "else", "{", "if", "(", "DEBUG_ENABLED", ")", "{", "console", ".", "log", "(", "\"Client (bittrex) will reconnect in %dms\"", ",", "this", ".", "_retryDelay", ")", ";", "}", "if", "(", "null", "!==", "this", ".", "_logger", ")", "{", "this", ".", "_logger", ".", "info", "(", "\"Client (bittrex) will reconnect in %dms\"", ",", "this", ".", "_retryDelay", ")", ";", "}", "this", ".", "_createConnection", "(", "this", ".", "_retryDelay", ")", ";", "}", "}"], "original_docstring": "/**\n * Reconnect\n *\n * @param {boolean} immediate whether or not we want to reconnect immediately (otherwise, we will wait for options.retryDelay as provided in constructor) (optional, default = false)\n */", "comment": ["// clear timers for data timeout", "// reconnect immediately"], "docstring_tokens": ["Reconnect", "@param", "{", "boolean", "}", "immediate", "whether", "or", "not", "we", "want", "to", "reconnect", "immediately", "(", "otherwise", "we", "will", "wait", "for", "options", ".", "retryDelay", "as", "provided", "in", "constructor", ")", "(", "optional", "default", "=", "false", ")"], "docstring": "Reconnect\n@param {boolean} immediate whether or not we want to reconnect immediately (otherwise, we will wait for options.retryDelay as provided in constructor) (optional, default = false)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "immediate", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Reconnect\n @param {boolean} immediate whether or not we want to reconnect immediately (otherwise, we will wait for options.retryDelay as provided in constructor) (optional, default = false)", "short_docstring_tokens": ["Reconnect", "@param", "{", "boolean", "}", "immediate", "whether", "or", "not", "we", "want", "to", "reconnect", "immediately", "(", "otherwise", "we", "will", "wait", "for", "options", ".", "retryDelay", "as", "provided", "in", "constructor", ")", "(", "optional", "default", "=", "false", ")"], "original_string": "reconnect(immediate)\n{\n    if (null === this._connection)\n    {\n        return;\n    }\n    // clear timers for data timeout\n    this._clearWatchdogTimers();\n    let connection = this._connection;\n    connection.disconnect();\n    // reconnect immediately\n    if (true === immediate)\n    {\n        this._createConnection();\n    }\n    else\n    {\n        if (DEBUG_ENABLED)\n        {\n            console.log(\"Client (bittrex) will reconnect in %dms\", this._retryDelay);\n        }\n        if (null !== this._logger)\n        {\n            this._logger.info(\"Client (bittrex) will reconnect in %dms\", this._retryDelay);\n        }\n        this._createConnection(this._retryDelay);\n    }\n}", "id": "328b7ab40455656e166d6f6b71cf8a8c0aa02747113aab5a9f0e3630a27131b1"}
{"identifier": "Login", "parameters": {"props": null}, "return_type": "<not_specific>", "repo": "mooream2291/hooks-api", "path": "src/components/todo/login.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "66f40d39d0aeae98c82216235391af041ac7c683", "ext": "js", "size": 1041, "code": "function Login(props){\n  const [username, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const loginContext = useContext(LoginContext);\n  const handleSubmit = e => {\n    e.preventDefault();\n    loginContext.login(username, password);\n  }\n  const handleNameChange = (e) => {\n    setUserName(e.target.value);\n  }\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value);\n  }\n  return(\n    <form onSubmit={handleSubmit}>\n      <input onChange={handleNameChange} type=\"text\" name=\"name\" />\n      <input onChange={handlePasswordChange} type=\"password\" name=\"password\" />\n      <button>Sign In</button>\n    </form>\n  )\n}", "code_tokens": ["function", "Login", "(", "props", ")", "{", "const", "[", "username", ",", "setUserName", "]", "=", "useState", "(", "''", ")", ";", "const", "[", "password", ",", "setPassword", "]", "=", "useState", "(", "''", ")", ";", "const", "loginContext", "=", "useContext", "(", "LoginContext", ")", ";", "const", "handleSubmit", "=", "e", "=>", "{", "e", ".", "preventDefault", "(", ")", ";", "loginContext", ".", "login", "(", "username", ",", "password", ")", ";", "}", "const", "handleNameChange", "=", "(", "e", ")", "=>", "{", "setUserName", "(", "e", ".", "target", ".", "value", ")", ";", "}", "const", "handlePasswordChange", "=", "(", "e", ")", "=>", "{", "setPassword", "(", "e", ".", "target", ".", "value", ")", ";", "}", "return", "(", "<", "form", "onSubmit", "=", "{", "handleSubmit", "}", ">", "\n      ", "<", "input", "onChange", "=", "{", "handleNameChange", "}", "type", "=", "\"text\"", "name", "=", "\"name\"", "/", ">", "\n      ", "<", "input", "onChange", "=", "{", "handlePasswordChange", "}", "type", "=", "\"password\"", "name", "=", "\"password\"", "/", ">", "\n      ", "<", "button", ">", "Sign In", "<", "/", "button", ">", "\n    ", "<", "/", "form", ">", ")", "}"], "original_docstring": "// this should just be a form", "comment": ["// send username and password to context"], "docstring_tokens": ["this", "should", "just", "be", "a", "form"], "docstring": "this should just be a form", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "props", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "this should just be a form", "short_docstring_tokens": ["this", "should", "just", "be", "a", "form"], "original_string": "function Login(props){\n  const [username, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n\n  const loginContext = useContext(LoginContext);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    // send username and password to context\n    loginContext.login(username, password);\n  }\n\n  const handleNameChange = (e) => {\n    setUserName(e.target.value);\n  }\n\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value);\n  }\n\n  return(\n    <form onSubmit={handleSubmit}>\n      <input onChange={handleNameChange} type=\"text\" name=\"name\" />\n      <input onChange={handlePasswordChange} type=\"password\" name=\"password\" />\n      <button>Sign In</button>\n    </form>\n  )\n}", "id": "86a7c135ccdbc16b8f5334248f303c425477c64d2439643fbce28bd67401abb7"}
{"identifier": "execSync", "parameters": {}, "return_type": "<not_specific>", "repo": "bretth18/torrentPi", "path": "node_modules/windows-no-runnable/lib/Command.js", "language": "JavaScript", "stars_count": 24.0, "issues_count": 7.0, "forks_count": 8.0, "license": ["MIT"], "hexsha": "bb67768e4b825fd89d6951f95ef63ed48cd9628f", "ext": "js", "size": 2851, "code": "function execSync(){\n  var f = 'sync' + Math.random();\n  exec(makeParams(arguments)+' 1>'+f+' 2>&1 & ren '+f+' '+f+'_');\n  f += '_';\n  while (!exists(f));\n  var output = fs.readFileSync(f, 'utf8');\n  fs.unlinkSync(f);\n  return output;\n}", "code_tokens": ["function", "execSync", "(", ")", "{", "var", "f", "=", "'sync'", "+", "Math", ".", "random", "(", ")", ";", "exec", "(", "makeParams", "(", "arguments", ")", "+", "' 1>'", "+", "f", "+", "' 2>&1 & ren '", "+", "f", "+", "' '", "+", "f", "+", "'_'", ")", ";", "f", "+=", "'_'", ";", "while", "(", "!", "exists", "(", "f", ")", ")", ";", "var", "output", "=", "fs", ".", "readFileSync", "(", "f", ",", "'utf8'", ")", ";", "fs", ".", "unlinkSync", "(", "f", ")", ";", "return", "output", ";", "}"], "original_docstring": "/**\n * Execute a command using cmd.exe synchronously\n * @params {Any[]}   Params will be recursively joined to a space delimeted argv list\n * @return {String}  return value of the command\n */", "comment": [], "docstring_tokens": ["Execute", "a", "command", "using", "cmd", ".", "exe", "synchronously", "@params", "{", "Any", "[]", "}", "Params", "will", "be", "recursively", "joined", "to", "a", "space", "delimeted", "argv", "list", "@return", "{", "String", "}", "return", "value", "of", "the", "command"], "docstring": "Execute a command using cmd.exe synchronously\n@params {Any[]}   Params will be recursively joined to a space delimeted argv list\n@return {String}  return value of the command", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Execute a command using cmd.exe synchronously\n @params {Any[]}   Params will be recursively joined to a space delimeted argv list\n @return {String}  return value of the command", "short_docstring_tokens": ["Execute", "a", "command", "using", "cmd", ".", "exe", "synchronously", "@params", "{", "Any", "[]", "}", "Params", "will", "be", "recursively", "joined", "to", "a", "space", "delimeted", "argv", "list", "@return", "{", "String", "}", "return", "value", "of", "the", "command"], "original_string": "function execSync(){\n  var f = 'sync' + Math.random();\n  exec(makeParams(arguments)+' 1>'+f+' 2>&1 & ren '+f+' '+f+'_');\n  f += '_';\n  while (!exists(f));\n  var output = fs.readFileSync(f, 'utf8');\n  fs.unlinkSync(f);\n  return output;\n}", "id": "68b561f74716ca938ba53d769e76023f58613e4cbb5ba5aed8361461eeb4664c"}
{"identifier": "DHT", "parameters": {"opts": null}, "return_type": "<not_specific>", "repo": "bretth18/torrentPi", "path": "node_modules/bittorrent-dht/client.js", "language": "JavaScript", "stars_count": 24.0, "issues_count": 7.0, "forks_count": 5.0, "license": ["MIT"], "hexsha": "f5fa871030817ad02a15b986d3e3f4a051a65a69", "ext": "js", "size": 35722, "code": "function DHT (opts) {\n  var self = this\n  if (!(self instanceof DHT)) return new DHT(opts)\n  EventEmitter.call(self)\n  if (!debug.enabled) self.setMaxListeners(0)\n  if (!opts) opts = {}\n  self.nodeId = idToBuffer(opts.nodeId || hat(160))\n  self.nodeIdHex = idToHexString(self.nodeId)\n  self._debug('new DHT %s', self.nodeIdHex)\n  self.ready = false\n  self.listening = false\n  self.destroyed = false\n  self._binding = false\n  self._port = null\n  self._ipv = opts.ipv || 4\n  self._rotateInterval = null\n  self.queryHandler = {\n    ping: self._onPing,\n    find_node: self._onFindNode,\n    get_peers: self._onGetPeers,\n    announce_peer: self._onAnnouncePeer\n  }\n  self.nodes = new KBucket({\n    localNodeId: self.nodeId,\n    numberOfNodesPerKBucket: K,\n    numberOfNodesToPing: MAX_CONCURRENCY\n  })\n  self.tables = {}\n  self.transactions = {}\n  self.peers = {}\n  self.localAddresses = [ networkAddress.ipv4() ]\n  publicAddress(function (err, ip) {\n    if (err) return self._debug('failed to get public ip: %s', err.message || err)\n    self.localAddresses.push(ip)\n  })\n  self.socket = module.exports.dgram.createSocket('udp' + self._ipv)\n  self.socket.on('message', self._onData.bind(self))\n  self.socket.on('listening', self._onListening.bind(self))\n  self.socket.on('error', function () {}) \n  self._rotateSecrets()\n  self._rotateInterval = setInterval(self._rotateSecrets.bind(self), ROTATE_INTERVAL)\n  if (self._rotateInterval.unref) self._rotateInterval.unref()\n  process.nextTick(function () {\n    if (opts.bootstrap === false) {\n      self.ready = true\n      self.emit('ready')\n    } else if (typeof opts.bootstrap === 'string') {\n      self._bootstrap([ opts.bootstrap ])\n    } else if (Array.isArray(opts.bootstrap)) {\n      self._bootstrap(fromArray(opts.bootstrap))\n    } else {\n      self._bootstrap(BOOTSTRAP_NODES)\n    }\n  })\n  self.on('ready', function () {\n    self._debug('emit ready')\n  })\n}", "code_tokens": ["function", "DHT", "(", "opts", ")", "{", "var", "self", "=", "this", "if", "(", "!", "(", "self", "instanceof", "DHT", ")", ")", "return", "new", "DHT", "(", "opts", ")", "EventEmitter", ".", "call", "(", "self", ")", "if", "(", "!", "debug", ".", "enabled", ")", "self", ".", "setMaxListeners", "(", "0", ")", "if", "(", "!", "opts", ")", "opts", "=", "{", "}", "self", ".", "nodeId", "=", "idToBuffer", "(", "opts", ".", "nodeId", "||", "hat", "(", "160", ")", ")", "self", ".", "nodeIdHex", "=", "idToHexString", "(", "self", ".", "nodeId", ")", "self", ".", "_debug", "(", "'new DHT %s'", ",", "self", ".", "nodeIdHex", ")", "self", ".", "ready", "=", "false", "self", ".", "listening", "=", "false", "self", ".", "destroyed", "=", "false", "self", ".", "_binding", "=", "false", "self", ".", "_port", "=", "null", "self", ".", "_ipv", "=", "opts", ".", "ipv", "||", "4", "self", ".", "_rotateInterval", "=", "null", "self", ".", "queryHandler", "=", "{", "ping", ":", "self", ".", "_onPing", ",", "find_node", ":", "self", ".", "_onFindNode", ",", "get_peers", ":", "self", ".", "_onGetPeers", ",", "announce_peer", ":", "self", ".", "_onAnnouncePeer", "}", "self", ".", "nodes", "=", "new", "KBucket", "(", "{", "localNodeId", ":", "self", ".", "nodeId", ",", "numberOfNodesPerKBucket", ":", "K", ",", "numberOfNodesToPing", ":", "MAX_CONCURRENCY", "}", ")", "self", ".", "tables", "=", "{", "}", "self", ".", "transactions", "=", "{", "}", "self", ".", "peers", "=", "{", "}", "self", ".", "localAddresses", "=", "[", "networkAddress", ".", "ipv4", "(", ")", "]", "publicAddress", "(", "function", "(", "err", ",", "ip", ")", "{", "if", "(", "err", ")", "return", "self", ".", "_debug", "(", "'failed to get public ip: %s'", ",", "err", ".", "message", "||", "err", ")", "self", ".", "localAddresses", ".", "push", "(", "ip", ")", "}", ")", "self", ".", "socket", "=", "module", ".", "exports", ".", "dgram", ".", "createSocket", "(", "'udp'", "+", "self", ".", "_ipv", ")", "self", ".", "socket", ".", "on", "(", "'message'", ",", "self", ".", "_onData", ".", "bind", "(", "self", ")", ")", "self", ".", "socket", ".", "on", "(", "'listening'", ",", "self", ".", "_onListening", ".", "bind", "(", "self", ")", ")", "self", ".", "socket", ".", "on", "(", "'error'", ",", "function", "(", ")", "{", "}", ")", "self", ".", "_rotateSecrets", "(", ")", "self", ".", "_rotateInterval", "=", "setInterval", "(", "self", ".", "_rotateSecrets", ".", "bind", "(", "self", ")", ",", "ROTATE_INTERVAL", ")", "if", "(", "self", ".", "_rotateInterval", ".", "unref", ")", "self", ".", "_rotateInterval", ".", "unref", "(", ")", "process", ".", "nextTick", "(", "function", "(", ")", "{", "if", "(", "opts", ".", "bootstrap", "===", "false", ")", "{", "self", ".", "ready", "=", "true", "self", ".", "emit", "(", "'ready'", ")", "}", "else", "if", "(", "typeof", "opts", ".", "bootstrap", "===", "'string'", ")", "{", "self", ".", "_bootstrap", "(", "[", "opts", ".", "bootstrap", "]", ")", "}", "else", "if", "(", "Array", ".", "isArray", "(", "opts", ".", "bootstrap", ")", ")", "{", "self", ".", "_bootstrap", "(", "fromArray", "(", "opts", ".", "bootstrap", ")", ")", "}", "else", "{", "self", ".", "_bootstrap", "(", "BOOTSTRAP_NODES", ")", "}", "}", ")", "self", ".", "on", "(", "'ready'", ",", "function", "(", ")", "{", "self", ".", "_debug", "(", "'emit ready'", ")", "}", ")", "}"], "original_docstring": "/**\n * A DHT client implementation. The DHT is the main peer discovery layer for BitTorrent,\n * which allows for trackerless torrents.\n * @param {string|Buffer} opts\n */", "comment": ["/**\n   * Query Handlers table\n   * @type {Object} string -> function\n   */", "/**\n   * Routing table\n   * @type {KBucket}\n   */", "/**\n   * Cache of routing tables used during a lookup. Saved in this object so we can access\n   * each node's unique token for announces later.\n   * TODO: Clean up tables after 5 minutes.\n   * @type {Object} infoHash:string -> KBucket\n   */", "/**\n   * Pending transactions (unresolved requests to peers)\n   * @type {Object} addr:string -> array of pending transactions\n   */", "/**\n   * Peer address data (tracker storage)\n   * @type {Object} infoHash:string -> Object {index:Object, list:Array.<Buffer>}\n   */", "/**\n   * IP addresses of the local DHT node. Used to store the peer, controlling this DHT\n   * node, into the local table when `client.announce()` is called.\n   * @type {Array.<string>}\n   */", "// Create socket and attach listeners", "// throw away errors", "// Emit `ready` right away because the user does not want to bootstrap. Presumably,", "// the user will call addNode() to populate the routing table manually.", "// opts.bootstrap is undefined or true"], "docstring_tokens": ["A", "DHT", "client", "implementation", ".", "The", "DHT", "is", "the", "main", "peer", "discovery", "layer", "for", "BitTorrent", "which", "allows", "for", "trackerless", "torrents", ".", "@param", "{", "string|Buffer", "}", "opts"], "docstring": "A DHT client implementation. The DHT is the main peer discovery layer for BitTorrent,\nwhich allows for trackerless torrents.\n@param {string|Buffer} opts", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "opts", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "A DHT client implementation.", "short_docstring_tokens": ["A", "DHT", "client", "implementation", "."], "original_string": "function DHT (opts) {\n  var self = this\n  if (!(self instanceof DHT)) return new DHT(opts)\n  EventEmitter.call(self)\n  if (!debug.enabled) self.setMaxListeners(0)\n\n  if (!opts) opts = {}\n\n  self.nodeId = idToBuffer(opts.nodeId || hat(160))\n  self.nodeIdHex = idToHexString(self.nodeId)\n\n  self._debug('new DHT %s', self.nodeIdHex)\n\n  self.ready = false\n  self.listening = false\n  self.destroyed = false\n\n  self._binding = false\n  self._port = null\n  self._ipv = opts.ipv || 4\n  self._rotateInterval = null\n\n  /**\n   * Query Handlers table\n   * @type {Object} string -> function\n   */\n  self.queryHandler = {\n    ping: self._onPing,\n    find_node: self._onFindNode,\n    get_peers: self._onGetPeers,\n    announce_peer: self._onAnnouncePeer\n  }\n\n  /**\n   * Routing table\n   * @type {KBucket}\n   */\n  self.nodes = new KBucket({\n    localNodeId: self.nodeId,\n    numberOfNodesPerKBucket: K,\n    numberOfNodesToPing: MAX_CONCURRENCY\n  })\n\n  /**\n   * Cache of routing tables used during a lookup. Saved in this object so we can access\n   * each node's unique token for announces later.\n   * TODO: Clean up tables after 5 minutes.\n   * @type {Object} infoHash:string -> KBucket\n   */\n  self.tables = {}\n\n  /**\n   * Pending transactions (unresolved requests to peers)\n   * @type {Object} addr:string -> array of pending transactions\n   */\n  self.transactions = {}\n\n  /**\n   * Peer address data (tracker storage)\n   * @type {Object} infoHash:string -> Object {index:Object, list:Array.<Buffer>}\n   */\n  self.peers = {}\n\n  /**\n   * IP addresses of the local DHT node. Used to store the peer, controlling this DHT\n   * node, into the local table when `client.announce()` is called.\n   * @type {Array.<string>}\n   */\n  self.localAddresses = [ networkAddress.ipv4() ]\n\n  publicAddress(function (err, ip) {\n    if (err) return self._debug('failed to get public ip: %s', err.message || err)\n    self.localAddresses.push(ip)\n  })\n\n  // Create socket and attach listeners\n  self.socket = module.exports.dgram.createSocket('udp' + self._ipv)\n  self.socket.on('message', self._onData.bind(self))\n  self.socket.on('listening', self._onListening.bind(self))\n  self.socket.on('error', function () {}) // throw away errors\n\n  self._rotateSecrets()\n  self._rotateInterval = setInterval(self._rotateSecrets.bind(self), ROTATE_INTERVAL)\n  if (self._rotateInterval.unref) self._rotateInterval.unref()\n\n  process.nextTick(function () {\n    if (opts.bootstrap === false) {\n        // Emit `ready` right away because the user does not want to bootstrap. Presumably,\n        // the user will call addNode() to populate the routing table manually.\n      self.ready = true\n      self.emit('ready')\n    } else if (typeof opts.bootstrap === 'string') {\n      self._bootstrap([ opts.bootstrap ])\n    } else if (Array.isArray(opts.bootstrap)) {\n      self._bootstrap(fromArray(opts.bootstrap))\n    } else {\n      // opts.bootstrap is undefined or true\n      self._bootstrap(BOOTSTRAP_NODES)\n    }\n  })\n\n  self.on('ready', function () {\n    self._debug('emit ready')\n  })\n}", "id": "ce6659883525ec30c2fe8eea7ae3a47fd243cf0a3778ec70ab3a0448df02970c"}
{"identifier": "onResponse", "parameters": {"addr": null, "err": null, "res": null}, "return_type": "<not_specific>", "repo": "bretth18/torrentPi", "path": "node_modules/bittorrent-dht/client.js", "language": "JavaScript", "stars_count": 24.0, "issues_count": 7.0, "forks_count": 5.0, "license": ["MIT"], "hexsha": "f5fa871030817ad02a15b986d3e3f4a051a65a69", "ext": "js", "size": 35722, "code": "function onResponse (addr, err, res) {\n    if (self.destroyed) return cb(new Error('dht is destroyed'))\n    pending -= 1\n    var nodeId = res && res.id\n    var nodeIdHex = idToHexString(nodeId)\n    if (err) {\n      self._debug('got lookup error: %s', err.message)\n    } else {\n      self._debug('got lookup response from %s', nodeIdHex)\n      var contact = table.get(nodeId) || { id: nodeId, addr: addr }\n      contact.token = res && res.token\n      add(contact)\n      if (res && res.nodes) {\n        res.nodes.forEach(function (contact) {\n          add(contact)\n        })\n      }\n    }\n    var candidates = table.closest({ id: id }, K)\n      .filter(function (contact) {\n        return !queried[contact.addr]\n      })\n    while (pending < MAX_CONCURRENCY && candidates.length) {\n      query(candidates.pop().addr)\n    }\n    if (pending === 0 && candidates.length === 0) {\n      self._debug('terminating lookup %s %s',\n          (opts.findNode ? '(find_node)' : '(get_peers)'), idHex)\n      var closest = (opts.findNode ? table : tokenful).closest({ id: id }, K)\n      self._debug('K closest nodes are:')\n      closest.forEach(function (contact) {\n        self._debug('  ' + contact.addr + ' ' + idToHexString(contact.id))\n      })\n      cb(null, closest)\n    }\n  }", "code_tokens": ["function", "onResponse", "(", "addr", ",", "err", ",", "res", ")", "{", "if", "(", "self", ".", "destroyed", ")", "return", "cb", "(", "new", "Error", "(", "'dht is destroyed'", ")", ")", "pending", "-=", "1", "var", "nodeId", "=", "res", "&&", "res", ".", "id", "var", "nodeIdHex", "=", "idToHexString", "(", "nodeId", ")", "if", "(", "err", ")", "{", "self", ".", "_debug", "(", "'got lookup error: %s'", ",", "err", ".", "message", ")", "}", "else", "{", "self", ".", "_debug", "(", "'got lookup response from %s'", ",", "nodeIdHex", ")", "var", "contact", "=", "table", ".", "get", "(", "nodeId", ")", "||", "{", "id", ":", "nodeId", ",", "addr", ":", "addr", "}", "contact", ".", "token", "=", "res", "&&", "res", ".", "token", "add", "(", "contact", ")", "if", "(", "res", "&&", "res", ".", "nodes", ")", "{", "res", ".", "nodes", ".", "forEach", "(", "function", "(", "contact", ")", "{", "add", "(", "contact", ")", "}", ")", "}", "}", "var", "candidates", "=", "table", ".", "closest", "(", "{", "id", ":", "id", "}", ",", "K", ")", ".", "filter", "(", "function", "(", "contact", ")", "{", "return", "!", "queried", "[", "contact", ".", "addr", "]", "}", ")", "while", "(", "pending", "<", "MAX_CONCURRENCY", "&&", "candidates", ".", "length", ")", "{", "query", "(", "candidates", ".", "pop", "(", ")", ".", "addr", ")", "}", "if", "(", "pending", "===", "0", "&&", "candidates", ".", "length", "===", "0", ")", "{", "self", ".", "_debug", "(", "'terminating lookup %s %s'", ",", "(", "opts", ".", "findNode", "?", "'(find_node)'", ":", "'(get_peers)'", ")", ",", "idHex", ")", "var", "closest", "=", "(", "opts", ".", "findNode", "?", "table", ":", "tokenful", ")", ".", "closest", "(", "{", "id", ":", "id", "}", ",", "K", ")", "self", ".", "_debug", "(", "'K closest nodes are:'", ")", "closest", ".", "forEach", "(", "function", "(", "contact", ")", "{", "self", ".", "_debug", "(", "'  '", "+", "contact", ".", "addr", "+", "' '", "+", "idToHexString", "(", "contact", ".", "id", ")", ")", "}", ")", "cb", "(", "null", ",", "closest", ")", "}", "}"], "original_docstring": "// the routing table, so that's not done here.", "comment": ["// ignore errors - they are just timeouts", "// add node that sent this response", "// add nodes to this routing table for this lookup", "// find closest unqueried nodes", "// query as many candidates as our concurrency limit will allow", "// recursive lookup should terminate because there are no closer nodes to find"], "docstring_tokens": ["the", "routing", "table", "so", "that", "'", "s", "not", "done", "here", "."], "docstring": "the routing table, so that's not done here.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "addr", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "err", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "res", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "the routing table, so that's not done here.", "short_docstring_tokens": ["the", "routing", "table", "so", "that", "'", "s", "not", "done", "here", "."], "original_string": "function onResponse (addr, err, res) {\n    if (self.destroyed) return cb(new Error('dht is destroyed'))\n\n    pending -= 1\n    var nodeId = res && res.id\n    var nodeIdHex = idToHexString(nodeId)\n\n    // ignore errors - they are just timeouts\n    if (err) {\n      self._debug('got lookup error: %s', err.message)\n    } else {\n      self._debug('got lookup response from %s', nodeIdHex)\n\n      // add node that sent this response\n      var contact = table.get(nodeId) || { id: nodeId, addr: addr }\n      contact.token = res && res.token\n      add(contact)\n\n      // add nodes to this routing table for this lookup\n      if (res && res.nodes) {\n        res.nodes.forEach(function (contact) {\n          add(contact)\n        })\n      }\n    }\n\n    // find closest unqueried nodes\n    var candidates = table.closest({ id: id }, K)\n      .filter(function (contact) {\n        return !queried[contact.addr]\n      })\n\n    while (pending < MAX_CONCURRENCY && candidates.length) {\n      // query as many candidates as our concurrency limit will allow\n      query(candidates.pop().addr)\n    }\n\n    if (pending === 0 && candidates.length === 0) {\n      // recursive lookup should terminate because there are no closer nodes to find\n      self._debug('terminating lookup %s %s',\n          (opts.findNode ? '(find_node)' : '(get_peers)'), idHex)\n\n      var closest = (opts.findNode ? table : tokenful).closest({ id: id }, K)\n      self._debug('K closest nodes are:')\n      closest.forEach(function (contact) {\n        self._debug('  ' + contact.addr + ' ' + idToHexString(contact.id))\n      })\n      cb(null, closest)\n    }\n  }", "id": "a1e033402e7d5f834f64601c3fefb3c1a215c730906388653cebc277bfe0f506"}
{"identifier": "Swarm", "parameters": {"infoHash": null, "server": null}, "return_type": null, "repo": "bretth18/torrentPi", "path": "node_modules/bittorrent-tracker/lib/swarm.js", "language": "JavaScript", "stars_count": 24.0, "issues_count": 7.0, "forks_count": 5.0, "license": ["MIT"], "hexsha": "b7c2baaec78ff2e39912a360ccce092f85fb9d74", "ext": "js", "size": 2861, "code": "function Swarm (infoHash, server) {\n  this.peers = {}\n  this.complete = 0\n  this.incomplete = 0\n  this.emit = server.emit.bind(server)\n}", "code_tokens": ["function", "Swarm", "(", "infoHash", ",", "server", ")", "{", "this", ".", "peers", "=", "{", "}", "this", ".", "complete", "=", "0", "this", ".", "incomplete", "=", "0", "this", ".", "emit", "=", "server", ".", "emit", ".", "bind", "(", "server", ")", "}"], "original_docstring": "// need to support when overriding Server.getSwarm()", "comment": [], "docstring_tokens": ["need", "to", "support", "when", "overriding", "Server", ".", "getSwarm", "()"], "docstring": "need to support when overriding Server.getSwarm()", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "infoHash", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "server", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "need to support when overriding Server.getSwarm()", "short_docstring_tokens": ["need", "to", "support", "when", "overriding", "Server", ".", "getSwarm", "()"], "original_string": "function Swarm (infoHash, server) {\n  this.peers = {}\n  this.complete = 0\n  this.incomplete = 0\n  this.emit = server.emit.bind(server)\n}", "id": "7b8e6e3df71c93ebb494ad3775573ecbcdefdad3c5a4e77995e793344944c73b"}
{"identifier": "Server", "parameters": {"opts": null}, "return_type": "<not_specific>", "repo": "bretth18/torrentPi", "path": "node_modules/bittorrent-tracker/server.js", "language": "JavaScript", "stars_count": 24.0, "issues_count": 7.0, "forks_count": 5.0, "license": ["MIT"], "hexsha": "82c597417ce9a8b4c2dff1bf81f220f226ed0702", "ext": "js", "size": 9481, "code": "function Server (opts) {\n  var self = this\n  if (!(self instanceof Server)) return new Server(opts)\n  EventEmitter.call(self)\n  opts = opts || {}\n  self._intervalMs = opts.interval\n    ? opts.interval\n    : 10 * 60 * 1000 \n  self._trustProxy = !!opts.trustProxy\n  self.listening = false\n  self.port = null\n  self.torrents = {}\n  if (opts.http !== false) {\n    self._httpServer = http.createServer()\n    self._httpServer.on('request', self.onHttpRequest.bind(self))\n    self._httpServer.on('error', self._onError.bind(self))\n    self._httpServer.on('listening', onListening)\n  }\n  if (opts.udp !== false) {\n    self._udpSocket = dgram.createSocket('udp4')\n    self._udpSocket.on('message', self.onUdpRequest.bind(self))\n    self._udpSocket.on('error', self._onError.bind(self))\n    self._udpSocket.on('listening', onListening)\n  }\n  var num = !!self._httpServer + !!self._udpSocket\n  function onListening () {\n    num -= 1\n    if (num === 0) {\n      self.listening = true\n      self.emit('listening', self.port)\n    }\n  }\n}", "code_tokens": ["function", "Server", "(", "opts", ")", "{", "var", "self", "=", "this", "if", "(", "!", "(", "self", "instanceof", "Server", ")", ")", "return", "new", "Server", "(", "opts", ")", "EventEmitter", ".", "call", "(", "self", ")", "opts", "=", "opts", "||", "{", "}", "self", ".", "_intervalMs", "=", "opts", ".", "interval", "?", "opts", ".", "interval", ":", "10", "*", "60", "*", "1000", "self", ".", "_trustProxy", "=", "!", "!", "opts", ".", "trustProxy", "self", ".", "listening", "=", "false", "self", ".", "port", "=", "null", "self", ".", "torrents", "=", "{", "}", "if", "(", "opts", ".", "http", "!==", "false", ")", "{", "self", ".", "_httpServer", "=", "http", ".", "createServer", "(", ")", "self", ".", "_httpServer", ".", "on", "(", "'request'", ",", "self", ".", "onHttpRequest", ".", "bind", "(", "self", ")", ")", "self", ".", "_httpServer", ".", "on", "(", "'error'", ",", "self", ".", "_onError", ".", "bind", "(", "self", ")", ")", "self", ".", "_httpServer", ".", "on", "(", "'listening'", ",", "onListening", ")", "}", "if", "(", "opts", ".", "udp", "!==", "false", ")", "{", "self", ".", "_udpSocket", "=", "dgram", ".", "createSocket", "(", "'udp4'", ")", "self", ".", "_udpSocket", ".", "on", "(", "'message'", ",", "self", ".", "onUdpRequest", ".", "bind", "(", "self", ")", ")", "self", ".", "_udpSocket", ".", "on", "(", "'error'", ",", "self", ".", "_onError", ".", "bind", "(", "self", ")", ")", "self", ".", "_udpSocket", ".", "on", "(", "'listening'", ",", "onListening", ")", "}", "var", "num", "=", "!", "!", "self", ".", "_httpServer", "+", "!", "!", "self", ".", "_udpSocket", "function", "onListening", "(", ")", "{", "num", "-=", "1", "if", "(", "num", "===", "0", ")", "{", "self", ".", "listening", "=", "true", "self", ".", "emit", "(", "'listening'", ",", "self", ".", "port", ")", "}", "}", "}"], "original_docstring": "/**\n * A BitTorrent tracker server.\n *\n * A \"BitTorrent tracker\" is an HTTP service which responds to GET requests from\n * BitTorrent clients. The requests include metrics from clients that help the tracker\n * keep overall statistics about the torrent. The response includes a peer list that\n * helps the client participate in the torrent.\n *\n * @param {Object}  opts            options\n * @param {Number}  opts.interval   interval in ms that clients should announce on\n * @param {Number}  opts.trustProxy Trust 'x-forwarded-for' header from reverse proxy\n * @param {boolean} opts.http       Start an http server? (default: true)\n * @param {boolean} opts.udp        Start a udp server? (default: true)\n */", "comment": ["// 10 min", "// default to starting an http server unless the user explictly says no", "// default to starting a udp server unless the user explicitly says no"], "docstring_tokens": ["A", "BitTorrent", "tracker", "server", ".", "A", "\"", "BitTorrent", "tracker", "\"", "is", "an", "HTTP", "service", "which", "responds", "to", "GET", "requests", "from", "BitTorrent", "clients", ".", "The", "requests", "include", "metrics", "from", "clients", "that", "help", "the", "tracker", "keep", "overall", "statistics", "about", "the", "torrent", ".", "The", "response", "includes", "a", "peer", "list", "that", "helps", "the", "client", "participate", "in", "the", "torrent", ".", "@param", "{", "Object", "}", "opts", "options", "@param", "{", "Number", "}", "opts", ".", "interval", "interval", "in", "ms", "that", "clients", "should", "announce", "on", "@param", "{", "Number", "}", "opts", ".", "trustProxy", "Trust", "'", "x", "-", "forwarded", "-", "for", "'", "header", "from", "reverse", "proxy", "@param", "{", "boolean", "}", "opts", ".", "http", "Start", "an", "http", "server", ".", "(", "default", ":", "true", ")", "@param", "{", "boolean", "}", "opts", ".", "udp", "Start", "a", "udp", "server", ".", "(", "default", ":", "true", ")"], "docstring": "A BitTorrent tracker server.\nA \"BitTorrent tracker\" is an HTTP service which responds to GET requests from\nBitTorrent clients. The requests include metrics from clients that help the tracker\nkeep overall statistics about the torrent. The response includes a peer list that\nhelps the client participate in the torrent.\n\n@param {Object}  opts            options\n@param {Number}  opts.interval   interval in ms that clients should announce on\n@param {Number}  opts.trustProxy Trust 'x-forwarded-for' header from reverse proxy\n@param {boolean} opts.http       Start an http server. (default: true)\n@param {boolean} opts.udp        Start a udp server. (default: true)", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "opts", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "A BitTorrent tracker server.", "short_docstring_tokens": ["A", "BitTorrent", "tracker", "server", "."], "original_string": "function Server (opts) {\n  var self = this\n  if (!(self instanceof Server)) return new Server(opts)\n  EventEmitter.call(self)\n  opts = opts || {}\n\n  self._intervalMs = opts.interval\n    ? opts.interval\n    : 10 * 60 * 1000 // 10 min\n\n  self._trustProxy = !!opts.trustProxy\n\n  self.listening = false\n  self.port = null\n  self.torrents = {}\n\n  // default to starting an http server unless the user explictly says no\n  if (opts.http !== false) {\n    self._httpServer = http.createServer()\n    self._httpServer.on('request', self.onHttpRequest.bind(self))\n    self._httpServer.on('error', self._onError.bind(self))\n    self._httpServer.on('listening', onListening)\n  }\n\n  // default to starting a udp server unless the user explicitly says no\n  if (opts.udp !== false) {\n    self._udpSocket = dgram.createSocket('udp4')\n    self._udpSocket.on('message', self.onUdpRequest.bind(self))\n    self._udpSocket.on('error', self._onError.bind(self))\n    self._udpSocket.on('listening', onListening)\n  }\n\n  var num = !!self._httpServer + !!self._udpSocket\n  function onListening () {\n    num -= 1\n    if (num === 0) {\n      self.listening = true\n      self.emit('listening', self.port)\n    }\n  }\n}", "id": "fbef6442961e270d374cf32d6e2f9e9fe21d2c2aa4c262264ef73afd4ecd62a2"}
{"identifier": "remove", "parameters": {"name": null}, "return_type": "<not_specific>", "repo": "bretth18/torrentPi", "path": "node_modules/windows-no-runnable/lib/registry.js", "language": "JavaScript", "stars_count": 24.0, "issues_count": 7.0, "forks_count": 5.0, "license": ["MIT"], "hexsha": "888fb6b0e202b0acaebc88c6a938073311a75ac0", "ext": "js", "size": 8362, "code": "function remove(name){\n    if (name && name in this) {\n      return this[name].remove();\n    } else {\n      return SUCCESS(registry.delete(q(this.path), '/f'));\n    }\n  }", "code_tokens": ["function", "remove", "(", "name", ")", "{", "if", "(", "name", "&&", "name", "in", "this", ")", "{", "return", "this", "[", "name", "]", ".", "remove", "(", ")", ";", "}", "else", "{", "return", "SUCCESS", "(", "registry", ".", "delete", "(", "q", "(", "this", ".", "path", ")", ",", "'/f'", ")", ")", ";", "}", "}"], "original_docstring": "/**\n   * Remove a Keyset recursively or a child\n   * @param  {String} [name]   If given deletes a child Keyset or Value instead of this KeySet\n   * @return {Boolean|String}  True or the returned error message.\n   */", "comment": [], "docstring_tokens": ["Remove", "a", "Keyset", "recursively", "or", "a", "child", "@param", "{", "String", "}", "[", "name", "]", "If", "given", "deletes", "a", "child", "Keyset", "or", "Value", "instead", "of", "this", "KeySet", "@return", "{", "Boolean|String", "}", "True", "or", "the", "returned", "error", "message", "."], "docstring": "Remove a Keyset recursively or a child\n@param  {String} [name]   If given deletes a child Keyset or Value instead of this KeySet\n@return {Boolean|String}  True or the returned error message.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "name", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Remove a Keyset recursively or a child\n @param  {String} [name]   If given deletes a child Keyset or Value instead of this KeySet\n @return {Boolean|String}  True or the returned error message.", "short_docstring_tokens": ["Remove", "a", "Keyset", "recursively", "or", "a", "child", "@param", "{", "String", "}", "[", "name", "]", "If", "given", "deletes", "a", "child", "Keyset", "or", "Value", "instead", "of", "this", "KeySet", "@return", "{", "Boolean|String", "}", "True", "or", "the", "returned", "error", "message", "."], "original_string": "function remove(name){\n    if (name && name in this) {\n      return this[name].remove();\n    } else {\n      return SUCCESS(registry.delete(q(this.path), '/f'));\n    }\n  }", "id": "7becfd450884ea917c731da4afecd6b1f256f2fd7d40143c04287304af6ade67"}
{"identifier": "Client", "parameters": {"peerId": null, "port": null, "torrent": null, "opts": null}, "return_type": "<not_specific>", "repo": "bretth18/torrentPi", "path": "node_modules/bittorrent-tracker/client.js", "language": "JavaScript", "stars_count": 24.0, "issues_count": 7.0, "forks_count": 5.0, "license": ["MIT"], "hexsha": "e7161ed8bbfc547cfb74dc5e643a5e36d8593119", "ext": "js", "size": 15759, "code": "function Client (peerId, port, torrent, opts) {\n  var self = this\n  if (!(self instanceof Client)) return new Client(peerId, port, torrent, opts)\n  EventEmitter.call(self)\n  self._opts = opts || {}\n  self._peerId = Buffer.isBuffer(peerId)\n    ? peerId\n    : new Buffer(peerId, 'hex')\n  self._port = port\n  self._infoHash = Buffer.isBuffer(torrent.infoHash)\n    ? torrent.infoHash\n    : new Buffer(torrent.infoHash, 'hex')\n  self.torrentLength = torrent.length\n  self._numWant = self._opts.numWant || 50\n  self._intervalMs = self._opts.interval || (30 * 60 * 1000) \n  debug('new client %s', self._infoHash.toString('hex'))\n  if (typeof torrent.announce === 'string') torrent.announce = [ torrent.announce ]\n  self._trackers = (torrent.announce || [])\n    .filter(function (announceUrl) {\n      var protocol = url.parse(announceUrl).protocol\n      return protocol === 'udp:' || protocol === 'http:' || protocol === 'https:'\n    })\n    .map(function (announceUrl) {\n      return new Tracker(self, announceUrl, self._opts)\n    })\n}", "code_tokens": ["function", "Client", "(", "peerId", ",", "port", ",", "torrent", ",", "opts", ")", "{", "var", "self", "=", "this", "if", "(", "!", "(", "self", "instanceof", "Client", ")", ")", "return", "new", "Client", "(", "peerId", ",", "port", ",", "torrent", ",", "opts", ")", "EventEmitter", ".", "call", "(", "self", ")", "self", ".", "_opts", "=", "opts", "||", "{", "}", "self", ".", "_peerId", "=", "Buffer", ".", "isBuffer", "(", "peerId", ")", "?", "peerId", ":", "new", "Buffer", "(", "peerId", ",", "'hex'", ")", "self", ".", "_port", "=", "port", "self", ".", "_infoHash", "=", "Buffer", ".", "isBuffer", "(", "torrent", ".", "infoHash", ")", "?", "torrent", ".", "infoHash", ":", "new", "Buffer", "(", "torrent", ".", "infoHash", ",", "'hex'", ")", "self", ".", "torrentLength", "=", "torrent", ".", "length", "self", ".", "_numWant", "=", "self", ".", "_opts", ".", "numWant", "||", "50", "self", ".", "_intervalMs", "=", "self", ".", "_opts", ".", "interval", "||", "(", "30", "*", "60", "*", "1000", ")", "debug", "(", "'new client %s'", ",", "self", ".", "_infoHash", ".", "toString", "(", "'hex'", ")", ")", "if", "(", "typeof", "torrent", ".", "announce", "===", "'string'", ")", "torrent", ".", "announce", "=", "[", "torrent", ".", "announce", "]", "self", ".", "_trackers", "=", "(", "torrent", ".", "announce", "||", "[", "]", ")", ".", "filter", "(", "function", "(", "announceUrl", ")", "{", "var", "protocol", "=", "url", ".", "parse", "(", "announceUrl", ")", ".", "protocol", "return", "protocol", "===", "'udp:'", "||", "protocol", "===", "'http:'", "||", "protocol", "===", "'https:'", "}", ")", ".", "map", "(", "function", "(", "announceUrl", ")", "{", "return", "new", "Tracker", "(", "self", ",", "announceUrl", ",", "self", ".", "_opts", ")", "}", ")", "}"], "original_docstring": "/**\n * A Client manages tracker connections for a torrent.\n *\n * @param {string} peerId  this peer's id\n * @param {Number} port    port number that the client is listening on\n * @param {Object} torrent parsed torrent\n * @param {Object} opts    optional options\n * @param {Number} opts.numWant    number of peers to request\n * @param {Number} opts.interval   interval in ms to send announce requests to the tracker\n */", "comment": ["// required", "// optional", "// default: 30 minutes"], "docstring_tokens": ["A", "Client", "manages", "tracker", "connections", "for", "a", "torrent", "."], "docstring": "A Client manages tracker connections for a torrent.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "peerId", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "port", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "torrent", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "opts", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "A Client manages tracker connections for a torrent.", "short_docstring_tokens": ["A", "Client", "manages", "tracker", "connections", "for", "a", "torrent", "."], "original_string": "function Client (peerId, port, torrent, opts) {\n  var self = this\n  if (!(self instanceof Client)) return new Client(peerId, port, torrent, opts)\n  EventEmitter.call(self)\n  self._opts = opts || {}\n\n  // required\n  self._peerId = Buffer.isBuffer(peerId)\n    ? peerId\n    : new Buffer(peerId, 'hex')\n  self._port = port\n  self._infoHash = Buffer.isBuffer(torrent.infoHash)\n    ? torrent.infoHash\n    : new Buffer(torrent.infoHash, 'hex')\n  self.torrentLength = torrent.length\n\n  // optional\n  self._numWant = self._opts.numWant || 50\n  self._intervalMs = self._opts.interval || (30 * 60 * 1000) // default: 30 minutes\n\n  debug('new client %s', self._infoHash.toString('hex'))\n\n  if (typeof torrent.announce === 'string') torrent.announce = [ torrent.announce ]\n  self._trackers = (torrent.announce || [])\n    .filter(function (announceUrl) {\n      var protocol = url.parse(announceUrl).protocol\n      return protocol === 'udp:' || protocol === 'http:' || protocol === 'https:'\n    })\n    .map(function (announceUrl) {\n      return new Tracker(self, announceUrl, self._opts)\n    })\n}", "id": "53d056ddb4ffa00414a11519f9b5a1da59c81f8e2a3d2a64487a4a517e99c342"}
{"identifier": "Tracker", "parameters": {"client": null, "announceUrl": null, "opts": null}, "return_type": null, "repo": "bretth18/torrentPi", "path": "node_modules/bittorrent-tracker/client.js", "language": "JavaScript", "stars_count": 24.0, "issues_count": 7.0, "forks_count": 5.0, "license": ["MIT"], "hexsha": "e7161ed8bbfc547cfb74dc5e643a5e36d8593119", "ext": "js", "size": 15759, "code": "function Tracker (client, announceUrl, opts) {\n  var self = this\n  EventEmitter.call(self)\n  self._opts = opts || {}\n  self.client = client\n  debug('new tracker %s', announceUrl)\n  self._announceUrl = announceUrl\n  self._intervalMs = self.client._intervalMs \n  self._interval = null\n  var protocol = url.parse(self._announceUrl).protocol\n  if (protocol === 'udp:') {\n    self._requestImpl = self._requestUdp\n  } else if (protocol === 'http:' || protocol === 'https:') {\n    self._requestImpl = self._requestHttp\n  }\n}", "code_tokens": ["function", "Tracker", "(", "client", ",", "announceUrl", ",", "opts", ")", "{", "var", "self", "=", "this", "EventEmitter", ".", "call", "(", "self", ")", "self", ".", "_opts", "=", "opts", "||", "{", "}", "self", ".", "client", "=", "client", "debug", "(", "'new tracker %s'", ",", "announceUrl", ")", "self", ".", "_announceUrl", "=", "announceUrl", "self", ".", "_intervalMs", "=", "self", ".", "client", ".", "_intervalMs", "self", ".", "_interval", "=", "null", "var", "protocol", "=", "url", ".", "parse", "(", "self", ".", "_announceUrl", ")", ".", "protocol", "if", "(", "protocol", "===", "'udp:'", ")", "{", "self", ".", "_requestImpl", "=", "self", ".", "_requestUdp", "}", "else", "if", "(", "protocol", "===", "'http:'", "||", "protocol", "===", "'https:'", ")", "{", "self", ".", "_requestImpl", "=", "self", ".", "_requestHttp", "}", "}"], "original_docstring": "/**\n * An individual torrent tracker (used by Client)\n *\n * @param {Client} client       parent bittorrent tracker client\n * @param {string} announceUrl  announce url of tracker\n * @param {Object} opts         optional options\n */", "comment": ["// use client interval initially"], "docstring_tokens": ["An", "individual", "torrent", "tracker", "(", "used", "by", "Client", ")", "@param", "{", "Client", "}", "client", "parent", "bittorrent", "tracker", "client", "@param", "{", "string", "}", "announceUrl", "announce", "url", "of", "tracker", "@param", "{", "Object", "}", "opts", "optional", "options"], "docstring": "An individual torrent tracker (used by Client)\n@param {Client} client       parent bittorrent tracker client\n@param {string} announceUrl  announce url of tracker\n@param {Object} opts         optional options", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "client", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "announceUrl", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "opts", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "An individual torrent tracker (used by Client)\n @param {Client} client       parent bittorrent tracker client\n @param {string} announceUrl  announce url of tracker\n @param {Object} opts         optional options", "short_docstring_tokens": ["An", "individual", "torrent", "tracker", "(", "used", "by", "Client", ")", "@param", "{", "Client", "}", "client", "parent", "bittorrent", "tracker", "client", "@param", "{", "string", "}", "announceUrl", "announce", "url", "of", "tracker", "@param", "{", "Object", "}", "opts", "optional", "options"], "original_string": "function Tracker (client, announceUrl, opts) {\n  var self = this\n  EventEmitter.call(self)\n  self._opts = opts || {}\n\n  self.client = client\n\n  debug('new tracker %s', announceUrl)\n\n  self._announceUrl = announceUrl\n  self._intervalMs = self.client._intervalMs // use client interval initially\n  self._interval = null\n\n  var protocol = url.parse(self._announceUrl).protocol\n  if (protocol === 'udp:') {\n    self._requestImpl = self._requestUdp\n  } else if (protocol === 'http:' || protocol === 'https:') {\n    self._requestImpl = self._requestHttp\n  }\n}", "id": "bf0299bdecc56ea380c55ecae99b5a49b06cda3928b33a4a3057c0cbb977fbe4"}
{"identifier": "authenticateUser", "parameters": {"cname": null, "cvalue": null}, "return_type": null, "repo": "kaylinkhanal/admin_old", "path": "src/cookie/Auth.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ec7eb90246ed7a770b5faaab6c8670e54d47a18e", "ext": "js", "size": 1254, "code": "static authenticateUser(cname,cvalue) {\n    var d = new Date();\n    var exdays=0.25;\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\n    var expires = \"expires=\" + d.toGMTString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\"; \n    console.log(document.cookie)\n  }", "code_tokens": ["static", "authenticateUser", "(", "cname", ",", "cvalue", ")", "{", "var", "d", "=", "new", "Date", "(", ")", ";", "var", "exdays", "=", "0.25", ";", "d", ".", "setTime", "(", "d", ".", "getTime", "(", ")", "+", "(", "exdays", "*", "24", "*", "60", "*", "60", "*", "1000", ")", ")", ";", "var", "expires", "=", "\"expires=\"", "+", "d", ".", "toGMTString", "(", ")", ";", "document", ".", "cookie", "=", "cname", "+", "\"=\"", "+", "cvalue", "+", "\";\"", "+", "expires", "+", "\";path=/\"", ";", "console", ".", "log", "(", "document", ".", "cookie", ")", "}"], "original_docstring": "/**\n   * Authenticate a user. Save a token string in Cookie\n   *\n   * @param {string} token\n   */", "comment": ["//console.log('shfsdfa auth. js',cname,cvalue)"], "docstring_tokens": ["Authenticate", "a", "user", ".", "Save", "a", "token", "string", "in", "Cookie", "@param", "{", "string", "}", "token"], "docstring": "Authenticate a user. Save a token string in Cookie\n@param {string} token", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "cname", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "cvalue", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Authenticate a user.", "short_docstring_tokens": ["Authenticate", "a", "user", "."], "original_string": "static authenticateUser(cname,cvalue) {\n    //console.log('shfsdfa auth. js',cname,cvalue)\n    var d = new Date();\n    var exdays=0.25;\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\n    var expires = \"expires=\" + d.toGMTString();\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\"; \n    console.log(document.cookie)\n  }", "id": "a5e311eacfc6a16e1ff0c53ff0bfb428ad0f95fa3ea403868256870ddb6f9787"}
{"identifier": "deauthenticateUser", "parameters": {}, "return_type": null, "repo": "kaylinkhanal/admin_old", "path": "src/cookie/Auth.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "ec7eb90246ed7a770b5faaab6c8670e54d47a18e", "ext": "js", "size": 1254, "code": "static deauthenticateUser() {  \n    this.authenticateUser('token','');\n    this.authenticateUser('userId','');\n    this.authenticateUser('role','');\n    this.authenticateUser('locationId','2');\n  }", "code_tokens": ["static", "deauthenticateUser", "(", ")", "{", "this", ".", "authenticateUser", "(", "'token'", ",", "''", ")", ";", "this", ".", "authenticateUser", "(", "'userId'", ",", "''", ")", ";", "this", ".", "authenticateUser", "(", "'role'", ",", "''", ")", ";", "this", ".", "authenticateUser", "(", "'locationId'", ",", "'2'", ")", ";", "}"], "original_docstring": "/**\n   * Deauthenticate a user. Remove a token from Cookie\n   *\n   */", "comment": [], "docstring_tokens": ["Deauthenticate", "a", "user", ".", "Remove", "a", "token", "from", "Cookie"], "docstring": "Deauthenticate a user. Remove a token from Cookie", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Deauthenticate a user.", "short_docstring_tokens": ["Deauthenticate", "a", "user", "."], "original_string": "static deauthenticateUser() {  \n    \n    \n    this.authenticateUser('token','');\n    this.authenticateUser('userId','');\n    this.authenticateUser('role','');\n    this.authenticateUser('locationId','2');\n    \n  }", "id": "bdd421a701d619e19cb22facded82a5cb1eecc8ebfaa09ab625cb7a4be1fd948"}
{"identifier": "fetchSleepData", "parameters": {"accessToken": null}, "return_type": "<not_specific>", "repo": "akshitdewan/-fit-bitnutrient", "path": "companion/index.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "67701df655c47b35883bb72b1953562b4684bd2c", "ext": "js", "size": 1665, "code": "function fetchSleepData(accessToken)  {\n  let date = new Date();\n  let todayDate = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`; \n  fetch('https://htn-food.firebaseio.com/suggested_food.json', {\n    method: \"GET\",\n    headers: {\n    }\n  })\n  .then(function(res) {\n    return res.json();\n  })\n  .then(function(data) {\n    console.log(\" oh \" + JSON.stringify(data));\n    if (messaging.peerSocket.readyState === messaging.peerSocket.OPEN) {\n      messaging.peerSocket.send(data);\n    }\n  })\n  .catch(err => console.log('[FETCH]: ' + err));\n}", "code_tokens": ["function", "fetchSleepData", "(", "accessToken", ")", "{", "let", "date", "=", "new", "Date", "(", ")", ";", "let", "todayDate", "=", "`", "${", "date", ".", "getFullYear", "(", ")", "}", "${", "date", ".", "getMonth", "(", ")", "+", "1", "}", "${", "date", ".", "getDate", "(", ")", "}", "`", ";", "fetch", "(", "'https://htn-food.firebaseio.com/suggested_food.json'", ",", "{", "method", ":", "\"GET\"", ",", "headers", ":", "{", "}", "}", ")", ".", "then", "(", "function", "(", "res", ")", "{", "return", "res", ".", "json", "(", ")", ";", "}", ")", ".", "then", "(", "function", "(", "data", ")", "{", "console", ".", "log", "(", "\" oh \"", "+", "JSON", ".", "stringify", "(", "data", ")", ")", ";", "if", "(", "messaging", ".", "peerSocket", ".", "readyState", "===", "messaging", ".", "peerSocket", ".", "OPEN", ")", "{", "messaging", ".", "peerSocket", ".", "send", "(", "data", ")", ";", "}", "}", ")", ".", "catch", "(", "err", "=>", "console", ".", "log", "(", "'[FETCH]: '", "+", "err", ")", ")", ";", "}"], "original_docstring": "// Fetch Sleep Data from Fitbit Web API", "comment": ["//YYYY-MM-DD", "// Sleep API docs - https://dev.fitbit.com/reference/web-api/sleep/", "//fitbit https://api.fitbit.com/1.2/user/-/sleep/date/${todayDate}.json"], "docstring_tokens": ["Fetch", "Sleep", "Data", "from", "Fitbit", "Web", "API"], "docstring": "Fetch Sleep Data from Fitbit Web API", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "accessToken", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Fetch Sleep Data from Fitbit Web API", "short_docstring_tokens": ["Fetch", "Sleep", "Data", "from", "Fitbit", "Web", "API"], "original_string": "function fetchSleepData(accessToken)  {\n  let date = new Date();\n  let todayDate = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`; //YYYY-MM-DD\n\n  // Sleep API docs - https://dev.fitbit.com/reference/web-api/sleep/\n  //fitbit https://api.fitbit.com/1.2/user/-/sleep/date/${todayDate}.json\n  fetch('https://htn-food.firebaseio.com/suggested_food.json', {\n    method: \"GET\",\n    headers: {\n    }\n  })\n  .then(function(res) {\n    return res.json();\n  })\n  .then(function(data) {\n    console.log(\" oh \" + JSON.stringify(data));\n    if (messaging.peerSocket.readyState === messaging.peerSocket.OPEN) {\n      messaging.peerSocket.send(data);\n    }\n  })\n  .catch(err => console.log('[FETCH]: ' + err));\n}", "id": "ba7aa000e8cd26cbef6f59be004c7407218134f4820924d1f9d632b8b7fa99a8"}
{"identifier": "restoreSettings", "parameters": {}, "return_type": null, "repo": "akshitdewan/-fit-bitnutrient", "path": "companion/index.js", "language": "JavaScript", "stars_count": 1.0, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "67701df655c47b35883bb72b1953562b4684bd2c", "ext": "js", "size": 1665, "code": "function restoreSettings() {\n  for (let index = 0; index < settingsStorage.length; index++) {\n    let key = settingsStorage.key(index);\n    if (key && key === \"oauth\") {\n      let data = JSON.parse(settingsStorage.getItem(key))\n      fetchSleepData(data.access_token);\n    }\n  }\n}", "code_tokens": ["function", "restoreSettings", "(", ")", "{", "for", "(", "let", "index", "=", "0", ";", "index", "<", "settingsStorage", ".", "length", ";", "index", "++", ")", "{", "let", "key", "=", "settingsStorage", ".", "key", "(", "index", ")", ";", "if", "(", "key", "&&", "key", "===", "\"oauth\"", ")", "{", "let", "data", "=", "JSON", ".", "parse", "(", "settingsStorage", ".", "getItem", "(", "key", ")", ")", "fetchSleepData", "(", "data", ".", "access_token", ")", ";", "}", "}", "}"], "original_docstring": "// Restore previously saved settings and send to the device", "comment": ["// We already have an oauth token"], "docstring_tokens": ["Restore", "previously", "saved", "settings", "and", "send", "to", "the", "device"], "docstring": "Restore previously saved settings and send to the device", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Restore previously saved settings and send to the device", "short_docstring_tokens": ["Restore", "previously", "saved", "settings", "and", "send", "to", "the", "device"], "original_string": "function restoreSettings() {\n  for (let index = 0; index < settingsStorage.length; index++) {\n    let key = settingsStorage.key(index);\n    if (key && key === \"oauth\") {\n      // We already have an oauth token\n      let data = JSON.parse(settingsStorage.getItem(key))\n      fetchSleepData(data.access_token);\n    }\n  }\n}", "id": "cb425d753d46a54ac8248f7943c85eab5ee97682c0ba87b9aeecf1efc88d17d6"}
{"identifier": "restoreSettings", "parameters": {}, "return_type": null, "repo": "markchuang56/sdk-oauth", "path": "companion/index.js", "language": "JavaScript", "stars_count": 70.0, "issues_count": 7.0, "forks_count": 24.0, "license": ["MIT"], "hexsha": "09b23b6e5131c58ddec661d92c953bab31572a76", "ext": "js", "size": 1556, "code": "function restoreSettings() {\n  for (let index = 0; index < settingsStorage.length; index++) {\n    let key = settingsStorage.key(index);\n    if (key && key === \"oauth\") {\n      let data = JSON.parse(settingsStorage.getItem(key))\n      fetchSleepData(data.access_token);\n    }\n  }\n}", "code_tokens": ["function", "restoreSettings", "(", ")", "{", "for", "(", "let", "index", "=", "0", ";", "index", "<", "settingsStorage", ".", "length", ";", "index", "++", ")", "{", "let", "key", "=", "settingsStorage", ".", "key", "(", "index", ")", ";", "if", "(", "key", "&&", "key", "===", "\"oauth\"", ")", "{", "let", "data", "=", "JSON", ".", "parse", "(", "settingsStorage", ".", "getItem", "(", "key", ")", ")", "fetchSleepData", "(", "data", ".", "access_token", ")", ";", "}", "}", "}"], "original_docstring": "// Restore previously saved settings and send to the device", "comment": ["// We already have an oauth token"], "docstring_tokens": ["Restore", "previously", "saved", "settings", "and", "send", "to", "the", "device"], "docstring": "Restore previously saved settings and send to the device", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Restore previously saved settings and send to the device", "short_docstring_tokens": ["Restore", "previously", "saved", "settings", "and", "send", "to", "the", "device"], "original_string": "function restoreSettings() {\n  for (let index = 0; index < settingsStorage.length; index++) {\n    let key = settingsStorage.key(index);\n    if (key && key === \"oauth\") {\n      // We already have an oauth token\n      let data = JSON.parse(settingsStorage.getItem(key))\n      fetchSleepData(data.access_token);\n    }\n  }\n}", "id": "cb425d753d46a54ac8248f7943c85eab5ee97682c0ba87b9aeecf1efc88d17d6"}
{"identifier": "group", "parameters": {"array": null, "keySelector": null, "valueSelector": null}, "return_type": "<not_specific>", "repo": "trusilosv/core-js-101", "path": "src/03-arrays-tasks.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "5daac9b6f5abd06e036c6d1b8046b128bc735cfe", "ext": "js", "size": 6014, "code": "function group(array, keySelector, valueSelector) {\n  const tempkeys = array.map(keySelector);\n  const value = array.map(valueSelector);\n  const map = new Map();\n  tempkeys.forEach((item, index) => {\n    if (!map.has(item)) {\n      map.set(item, [value[index]]);\n    } else {\n      map.set(item, map.get(item).concat([value[index]]));\n    }\n  });\n  return map;\n}", "code_tokens": ["function", "group", "(", "array", ",", "keySelector", ",", "valueSelector", ")", "{", "const", "tempkeys", "=", "array", ".", "map", "(", "keySelector", ")", ";", "const", "value", "=", "array", ".", "map", "(", "valueSelector", ")", ";", "const", "map", "=", "new", "Map", "(", ")", ";", "tempkeys", ".", "forEach", "(", "(", "item", ",", "index", ")", "=>", "{", "if", "(", "!", "map", ".", "has", "(", "item", ")", ")", "{", "map", ".", "set", "(", "item", ",", "[", "value", "[", "index", "]", "]", ")", ";", "}", "else", "{", "map", ".", "set", "(", "item", ",", "map", ".", "get", "(", "item", ")", ".", "concat", "(", "[", "value", "[", "index", "]", "]", ")", ")", ";", "}", "}", ")", ";", "return", "map", ";", "}"], "original_docstring": "/**\n * Groups elements of the specified array by key.\n * Returns multimap of keys extracted from array elements via keySelector callback\n * and values extracted via valueSelector callback.\n * See: https://en.wikipedia.org/wiki/Multimap\n *\n * @param {array} array\n * @param {Function} keySelector\n * @param {Function} valueSelector\n * @return {Map}\n *\n * @example\n *   group([\n *      { country: 'Belarus', city: 'Brest' },\n *      { country: 'Russia', city: 'Omsk' },\n *      { country: 'Russia', city: 'Samara' },\n *      { country: 'Belarus', city: 'Grodno' },\n *      { country: 'Belarus', city: 'Minsk' },\n *      { country: 'Poland', city: 'Lodz' }\n *     ],\n *     item => item.country,\n *     item => item.city\n *   )\n *            =>\n *   Map {\n *    \"Belarus\" => [\"Brest\", \"Grodno\", \"Minsk\"],\n *    \"Russia\" => [\"Omsk\", \"Samara\"],\n *    \"Poland\" => [\"Lodz\"]\n *   }\n */", "comment": [], "docstring_tokens": ["Groups", "elements", "of", "the", "specified", "array", "by", "key", ".", "Returns", "multimap", "of", "keys", "extracted", "from", "array", "elements", "via", "keySelector", "callback", "and", "values", "extracted", "via", "valueSelector", "callback", ".", "@param", "{", "array", "}", "array", "@param", "{", "Function", "}", "keySelector", "@param", "{", "Function", "}", "valueSelector", "@return", "{", "Map", "}"], "docstring": "Groups elements of the specified array by key.\nReturns multimap of keys extracted from array elements via keySelector callback\nand values extracted via valueSelector callback.\n\n@param {array} array\n@param {Function} keySelector\n@param {Function} valueSelector\n@return {Map}\n\n", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "array", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "keySelector", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "valueSelector", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Groups elements of the specified array by key.", "short_docstring_tokens": ["Groups", "elements", "of", "the", "specified", "array", "by", "key", "."], "original_string": "function group(array, keySelector, valueSelector) {\n  const tempkeys = array.map(keySelector);\n  const value = array.map(valueSelector);\n  const map = new Map();\n  tempkeys.forEach((item, index) => {\n    if (!map.has(item)) {\n      map.set(item, [value[index]]);\n    } else {\n      map.set(item, map.get(item).concat([value[index]]));\n    }\n  });\n  return map;\n}", "id": "c1ab8293d2c44816e78db6ed265a8992b40b28596a0d4c5bf6d274885e0dcb15"}
{"identifier": "componentDidMount", "parameters": {}, "return_type": null, "repo": "Crisiskyle/dig4639-mobile-dev", "path": "contactsapp/src/App.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "06d771a452f31a67ffd273c10d388fa7421c635e", "ext": "js", "size": 1823, "code": "componentDidMount() {\n    fetch(\"http://plato.mrl.ai:8080/contacts\", {headers: {API: \"melendez\"}})\n    .then((res) => res.json())\n    .then((data, ) => {\n        console.log(data)\n      this.setState({contacts: data.contacts});\n    });\n  }", "code_tokens": ["componentDidMount", "(", ")", "{", "fetch", "(", "\"http://plato.mrl.ai:8080/contacts\"", ",", "{", "headers", ":", "{", "API", ":", "\"melendez\"", "}", "}", ")", ".", "then", "(", "(", "res", ")", "=>", "res", ".", "json", "(", ")", ")", ".", "then", "(", "(", "data", ",", ")", "=>", "{", "console", ".", "log", "(", "data", ")", "this", ".", "setState", "(", "{", "contacts", ":", "data", ".", "contacts", "}", ")", ";", "}", ")", ";", "}"], "original_docstring": "//using to fetch the contact list", "comment": [], "docstring_tokens": ["using", "to", "fetch", "the", "contact", "list"], "docstring": "using to fetch the contact list", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "using to fetch the contact list", "short_docstring_tokens": ["using", "to", "fetch", "the", "contact", "list"], "original_string": "componentDidMount() {\n    fetch(\"http://plato.mrl.ai:8080/contacts\", {headers: {API: \"melendez\"}})\n    .then((res) => res.json())\n    .then((data, ) => {\n        console.log(data)\n      this.setState({contacts: data.contacts});\n    });\n   \n  }", "id": "83cdf654c3d4008d18a630670d98a96ee6df632a12af2be5c89142e4f1f3b35a"}
{"identifier": "componentDidUpdate", "parameters": {}, "return_type": null, "repo": "Crisiskyle/dig4639-mobile-dev", "path": "contactsapp/src/App.js", "language": "JavaScript", "stars_count": NaN, "issues_count": NaN, "forks_count": NaN, "license": ["MIT"], "hexsha": "06d771a452f31a67ffd273c10d388fa7421c635e", "ext": "js", "size": 1823, "code": "componentDidUpdate(){\n  fetch(\"http://plato.mrl.ai:8080/profile\", {headers: {API: \"melendez\"}})\n  .then((res) => res.json())\n  .then((datas) => {\n    this.setState({profile:[datas]});\n  });\n  }", "code_tokens": ["componentDidUpdate", "(", ")", "{", "fetch", "(", "\"http://plato.mrl.ai:8080/profile\"", ",", "{", "headers", ":", "{", "API", ":", "\"melendez\"", "}", "}", ")", ".", "then", "(", "(", "res", ")", "=>", "res", ".", "json", "(", ")", ")", ".", "then", "(", "(", "datas", ")", "=>", "{", "this", ".", "setState", "(", "{", "profile", ":", "[", "datas", "]", "}", ")", ";", "}", ")", ";", "}"], "original_docstring": "//using to fetch the profile list", "comment": [], "docstring_tokens": ["using", "to", "fetch", "the", "profile", "list"], "docstring": "using to fetch the profile list", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "using to fetch the profile list", "short_docstring_tokens": ["using", "to", "fetch", "the", "profile", "list"], "original_string": "componentDidUpdate(){\n  fetch(\"http://plato.mrl.ai:8080/profile\", {headers: {API: \"melendez\"}})\n  .then((res) => res.json())\n  .then((datas) => {\n    this.setState({profile:[datas]});\n  });\n  }", "id": "7498e6f6252b16ffdac7a12b024b35362276960557793a68987368c1bb43560d"}
{"identifier": "changeInAppBrowserLayout", "parameters": {}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/themes/minimal/CheckoutSuccess.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "335b151c1d88371f793a67754b69a07fe20db90b", "ext": "js", "size": 1801, "code": "changeInAppBrowserLayout() {\n    this.shopgateAppCodeExecutor.execute(() => {\n      const commands = [\n        broadcastEvent('checkoutSuccess'),\n        setNavigationBarParams(\n          'Checkout',\n          false,\n          isShopgateAndroidApp() ? 'done' : true,\n          isShopgateAndroidApp() ? 'custom' : 'done',\n          'SGAction.popTabToRoot({\\'targetTab\\': \\'main\\'}); SGAction.showTab({\\'targetTab\\': \\'main\\'});'\n        ),\n      ];\n      sendAppCommands(commands);\n      return true;\n    });\n  }", "code_tokens": ["changeInAppBrowserLayout", "(", ")", "{", "this", ".", "shopgateAppCodeExecutor", ".", "execute", "(", "(", ")", "=>", "{", "const", "commands", "=", "[", "broadcastEvent", "(", "'checkoutSuccess'", ")", ",", "setNavigationBarParams", "(", "'Checkout'", ",", "false", ",", "isShopgateAndroidApp", "(", ")", "?", "'done'", ":", "true", ",", "isShopgateAndroidApp", "(", ")", "?", "'custom'", ":", "'done'", ",", "'SGAction.popTabToRoot({\\'targetTab\\': \\'main\\'}); SGAction.showTab({\\'targetTab\\': \\'main\\'});'", ")", ",", "]", ";", "sendAppCommands", "(", "commands", ")", ";", "return", "true", ";", "}", ")", ";", "}"], "original_docstring": "/**\n   * Will change the InAppBrowser title to \"Checkout\" and show a button named \"done\"\n   * located at the top to the right\n   */", "comment": [], "docstring_tokens": ["Will", "change", "the", "InAppBrowser", "title", "to", "\"", "Checkout", "\"", "and", "show", "a", "button", "named", "\"", "done", "\"", "located", "at", "the", "top", "to", "the", "right"], "docstring": "Will change the InAppBrowser title to \"Checkout\" and show a button named \"done\"\nlocated at the top to the right", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Will change the InAppBrowser title to \"Checkout\" and show a button named \"done\"\n located at the top to the right", "short_docstring_tokens": ["Will", "change", "the", "InAppBrowser", "title", "to", "\"", "Checkout", "\"", "and", "show", "a", "button", "named", "\"", "done", "\"", "located", "at", "the", "top", "to", "the", "right"], "original_string": "changeInAppBrowserLayout() {\n    this.shopgateAppCodeExecutor.execute(() => {\n      const commands = [\n        broadcastEvent('checkoutSuccess'),\n        setNavigationBarParams(\n          'Checkout',\n          false,\n          isShopgateAndroidApp() ? 'done' : true,\n          isShopgateAndroidApp() ? 'custom' : 'done',\n          'SGAction.popTabToRoot({\\'targetTab\\': \\'main\\'}); SGAction.showTab({\\'targetTab\\': \\'main\\'});'\n        ),\n      ];\n\n      sendAppCommands(commands);\n\n      return true;\n    });\n  }", "id": "a1f9aad6610a81e08ab3be5e4647b85cd242a96a5752f53d28a5784539980980"}
{"identifier": "onRegister", "parameters": {}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/modules/registerHooks.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "07d5395038a39f50073df071ed7cb08893cbf4ca", "ext": "js", "size": 405, "code": "function onRegister() {\n  document.addEventListener('submit', (e) => {\n    if (/action=save_new_account$/.test(e.target.action)) {\n      if (e.returnValue === true) {\n        showLoadingScreen(LOADING_SCREEN_TIMEOUT_SECONDS);\n      }\n    }\n  });\n}", "code_tokens": ["function", "onRegister", "(", ")", "{", "document", ".", "addEventListener", "(", "'submit'", ",", "(", "e", ")", "=>", "{", "if", "(", "/", "action=save_new_account$", "/", ".", "test", "(", "e", ".", "target", ".", "action", ")", ")", "{", "if", "(", "e", ".", "returnValue", "===", "true", ")", "{", "showLoadingScreen", "(", "LOADING_SCREEN_TIMEOUT_SECONDS", ")", ";", "}", "}", "}", ")", ";", "}"], "original_docstring": "/**\n * Hook when the register user should happen.\n */", "comment": [], "docstring_tokens": ["Hook", "when", "the", "register", "user", "should", "happen", "."], "docstring": "Hook when the register user should happen.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Hook when the register user should happen.", "short_docstring_tokens": ["Hook", "when", "the", "register", "user", "should", "happen", "."], "original_string": "function onRegister() {\n  document.addEventListener('submit', (e) => {\n    if (/action=save_new_account$/.test(e.target.action)) {\n      if (e.returnValue === true) {\n        showLoadingScreen(LOADING_SCREEN_TIMEOUT_SECONDS);\n      }\n    }\n  });\n}", "id": "9494b7a69a1add217cb3ef94387bcae425de9a3022d5c085fa8b8e7654b1debb"}
{"identifier": "executeWithRetry", "parameters": {"intervalInMilliseconds": null, "maximumIntervalTimeInMilliseconds": null, "executeCallback": null, "timeoutCallback": null}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/modules/executeWithRetry.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "461481abcb3b6580bcfe7ae9e3bd6315717065c4", "ext": "js", "size": 1185, "code": "function executeWithRetry(\n  intervalInMilliseconds,\n  maximumIntervalTimeInMilliseconds,\n  executeCallback,\n  timeoutCallback = null\n) {\n  if (executeCallback()) {\n    return;\n  }\n  const startTimestampInMilliseconds = Date.now();\n  const interval = setInterval(() => {\n    if (Date.now() >= startTimestampInMilliseconds + maximumIntervalTimeInMilliseconds) {\n      if (timeoutCallback !== null) {\n        timeoutCallback();\n      }\n      clearInterval(interval);\n      return;\n    }\n    if (!executeCallback()) {\n      return;\n    }\n    clearInterval(interval);\n  }, intervalInMilliseconds);\n}", "code_tokens": ["function", "executeWithRetry", "(", "intervalInMilliseconds", ",", "maximumIntervalTimeInMilliseconds", ",", "executeCallback", ",", "timeoutCallback", "=", "null", ")", "{", "if", "(", "executeCallback", "(", ")", ")", "{", "return", ";", "}", "const", "startTimestampInMilliseconds", "=", "Date", ".", "now", "(", ")", ";", "const", "interval", "=", "setInterval", "(", "(", ")", "=>", "{", "if", "(", "Date", ".", "now", "(", ")", ">=", "startTimestampInMilliseconds", "+", "maximumIntervalTimeInMilliseconds", ")", "{", "if", "(", "timeoutCallback", "!==", "null", ")", "{", "timeoutCallback", "(", ")", ";", "}", "clearInterval", "(", "interval", ")", ";", "return", ";", "}", "if", "(", "!", "executeCallback", "(", ")", ")", "{", "return", ";", "}", "clearInterval", "(", "interval", ")", ";", "}", ",", "intervalInMilliseconds", ")", ";", "}"], "original_docstring": "/**\n * Creates an interval and executes the executeCallback until it returns true or interval finishes\n *\n * @param {int} intervalInMilliseconds interval in milliseconds\n * @param {int} maximumIntervalTimeInMilliseconds maximum interval in milliseconds\n * @param {function} executeCallback callback has to return true in case it will finish execution\n *                                   and false if it should repeatedly executed\n * @param {function} timeoutCallback callback is called when the timeout is reachead\n *                   without calling the executeCallback\n */", "comment": [], "docstring_tokens": ["Creates", "an", "interval", "and", "executes", "the", "executeCallback", "until", "it", "returns", "true", "or", "interval", "finishes", "@param", "{", "int", "}", "intervalInMilliseconds", "interval", "in", "milliseconds", "@param", "{", "int", "}", "maximumIntervalTimeInMilliseconds", "maximum", "interval", "in", "milliseconds", "@param", "{", "function", "}", "executeCallback", "callback", "has", "to", "return", "true", "in", "case", "it", "will", "finish", "execution", "and", "false", "if", "it", "should", "repeatedly", "executed", "@param", "{", "function", "}", "timeoutCallback", "callback", "is", "called", "when", "the", "timeout", "is", "reachead", "without", "calling", "the", "executeCallback"], "docstring": "Creates an interval and executes the executeCallback until it returns true or interval finishes\n@param {int} intervalInMilliseconds interval in milliseconds\n@param {int} maximumIntervalTimeInMilliseconds maximum interval in milliseconds\n@param {function} executeCallback callback has to return true in case it will finish execution\nand false if it should repeatedly executed\n@param {function} timeoutCallback callback is called when the timeout is reachead\nwithout calling the executeCallback", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "intervalInMilliseconds", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "maximumIntervalTimeInMilliseconds", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "executeCallback", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "timeoutCallback", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Creates an interval and executes the executeCallback until it returns true or interval finishes\n @param {int} intervalInMilliseconds interval in milliseconds\n @param {int} maximumIntervalTimeInMilliseconds maximum interval in milliseconds\n @param {function} executeCallback callback has to return true in case it will finish execution\n                                   and false if it should repeatedly executed\n @param {function} timeoutCallback callback is called when the timeout is reachead\n                   without calling the executeCallback", "short_docstring_tokens": ["Creates", "an", "interval", "and", "executes", "the", "executeCallback", "until", "it", "returns", "true", "or", "interval", "finishes", "@param", "{", "int", "}", "intervalInMilliseconds", "interval", "in", "milliseconds", "@param", "{", "int", "}", "maximumIntervalTimeInMilliseconds", "maximum", "interval", "in", "milliseconds", "@param", "{", "function", "}", "executeCallback", "callback", "has", "to", "return", "true", "in", "case", "it", "will", "finish", "execution", "and", "false", "if", "it", "should", "repeatedly", "executed", "@param", "{", "function", "}", "timeoutCallback", "callback", "is", "called", "when", "the", "timeout", "is", "reachead", "without", "calling", "the", "executeCallback"], "original_string": "function executeWithRetry(\n  intervalInMilliseconds,\n  maximumIntervalTimeInMilliseconds,\n  executeCallback,\n  timeoutCallback = null\n) {\n  if (executeCallback()) {\n    return;\n  }\n\n  const startTimestampInMilliseconds = Date.now();\n\n  const interval = setInterval(() => {\n    if (Date.now() >= startTimestampInMilliseconds + maximumIntervalTimeInMilliseconds) {\n      if (timeoutCallback !== null) {\n        timeoutCallback();\n      }\n\n      clearInterval(interval);\n      return;\n    }\n\n    if (!executeCallback()) {\n      return;\n    }\n\n    clearInterval(interval);\n  }, intervalInMilliseconds);\n}", "id": "ec9153a63783c66521c17750d508cd3f99964eb75ec87c1f3994c0affdef1204"}
{"identifier": "removedInfoLinks", "parameters": {}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/themes/minimal/Cart.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "677c988178e01016a3948223fdf30b85a9e84c8f", "ext": "js", "size": 1718, "code": "removedInfoLinks() {\n    walkThroughAnchors((anchor) => {\n      let parent = anchor;\n      while (parent = parent.parentElement) {\n        if (parent.className === 'InfoMessage') {\n          anchor.onclick = e => e.preventDefault();\n        }\n      }\n    });\n  }", "code_tokens": ["removedInfoLinks", "(", ")", "{", "walkThroughAnchors", "(", "(", "anchor", ")", "=>", "{", "let", "parent", "=", "anchor", ";", "while", "(", "parent", "=", "parent", ".", "parentElement", ")", "{", "if", "(", "parent", ".", "className", "===", "'InfoMessage'", ")", "{", "anchor", ".", "onclick", "=", "e", "=>", "e", ".", "preventDefault", "(", ")", ";", "}", "}", "}", ")", ";", "}"], "original_docstring": "/**\n   * Removes the link in InfoMessage\n   * @private\n   */", "comment": ["// eslint-disable-next-line no-cond-assign", "// eslint-disable-next-line no-param-reassign"], "docstring_tokens": ["Removes", "the", "link", "in", "InfoMessage", "@private"], "docstring": "Removes the link in InfoMessage\n@private", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Removes the link in InfoMessage\n @private", "short_docstring_tokens": ["Removes", "the", "link", "in", "InfoMessage", "@private"], "original_string": "removedInfoLinks() {\n    walkThroughAnchors((anchor) => {\n      let parent = anchor;\n      // eslint-disable-next-line no-cond-assign\n      while (parent = parent.parentElement) {\n        if (parent.className === 'InfoMessage') {\n          // eslint-disable-next-line no-param-reassign\n          anchor.onclick = e => e.preventDefault();\n        }\n      }\n    });\n  }", "id": "d78623bf509ec95a76b479327fefd9df7d68f8bc984565557810d84bb76930e4"}
{"identifier": "removeProductLinks", "parameters": {}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/themes/minimal/Cart.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "677c988178e01016a3948223fdf30b85a9e84c8f", "ext": "js", "size": 1718, "code": "removeProductLinks() {\n    walkThroughAnchors(((anchor) => {\n      let parent = anchor;\n      while (parent = parent.parentElement) {\n        if (parent.className === 'CartList' && (anchor.parentElement.nodeName === 'STRONG' || anchor.parentElement.className === 'ProductImage')) {\n          anchor.onclick = e => e.preventDefault();\n        }\n      }\n    }));\n  }", "code_tokens": ["removeProductLinks", "(", ")", "{", "walkThroughAnchors", "(", "(", "(", "anchor", ")", "=>", "{", "let", "parent", "=", "anchor", ";", "while", "(", "parent", "=", "parent", ".", "parentElement", ")", "{", "if", "(", "parent", ".", "className", "===", "'CartList'", "&&", "(", "anchor", ".", "parentElement", ".", "nodeName", "===", "'STRONG'", "||", "anchor", ".", "parentElement", ".", "className", "===", "'ProductImage'", ")", ")", "{", "anchor", ".", "onclick", "=", "e", "=>", "e", ".", "preventDefault", "(", ")", ";", "}", "}", "}", ")", ")", ";", "}"], "original_docstring": "/**\n   * Removed links from product links\n   * @private\n   */", "comment": ["// eslint-disable-next-line no-cond-assign", "// eslint-disable-next-line no-param-reassign"], "docstring_tokens": ["Removed", "links", "from", "product", "links", "@private"], "docstring": "Removed links from product links\n@private", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Removed links from product links\n @private", "short_docstring_tokens": ["Removed", "links", "from", "product", "links", "@private"], "original_string": "removeProductLinks() {\n    walkThroughAnchors(((anchor) => {\n      let parent = anchor;\n      // eslint-disable-next-line no-cond-assign\n      while (parent = parent.parentElement) {\n        if (parent.className === 'CartList' && (anchor.parentElement.nodeName === 'STRONG' || anchor.parentElement.className === 'ProductImage')) {\n          // eslint-disable-next-line no-param-reassign\n          anchor.onclick = e => e.preventDefault();\n        }\n      }\n    }));\n  }", "id": "261a4d67ae762a1af70a2a2be94d8872569a08172504fbd8bcc2a3011bfd24c4"}
{"identifier": "removedLinkInTitle", "parameters": {}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/themes/cornerstone/Cart.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "6423a709aed7eec7c4a4ef2370ea13e60639c2a1", "ext": "js", "size": 1309, "code": "removedLinkInTitle() {\n    walkThroughAnchors((anchor) => {\n      if (\n        anchor.parentElement.nodeName === 'H1'\n        || anchor.parentElement.nodeName === 'H2'\n      ) {\n        anchor.onclick = e => e.preventDefault();\n      }\n    });\n  }", "code_tokens": ["removedLinkInTitle", "(", ")", "{", "walkThroughAnchors", "(", "(", "anchor", ")", "=>", "{", "if", "(", "anchor", ".", "parentElement", ".", "nodeName", "===", "'H1'", "||", "anchor", ".", "parentElement", ".", "nodeName", "===", "'H2'", ")", "{", "anchor", ".", "onclick", "=", "e", "=>", "e", ".", "preventDefault", "(", ")", ";", "}", "}", ")", ";", "}"], "original_docstring": "/**\n   * Removes the link in the title\n   * @private\n   */", "comment": ["// eslint-disable-next-line no-param-reassign"], "docstring_tokens": ["Removes", "the", "link", "in", "the", "title", "@private"], "docstring": "Removes the link in the title\n@private", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Removes the link in the title\n @private", "short_docstring_tokens": ["Removes", "the", "link", "in", "the", "title", "@private"], "original_string": "removedLinkInTitle() {\n    walkThroughAnchors((anchor) => {\n      if (\n        anchor.parentElement.nodeName === 'H1'\n        || anchor.parentElement.nodeName === 'H2'\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        anchor.onclick = e => e.preventDefault();\n      }\n    });\n  }", "id": "f07808baf9f7bb161743c19b7d5a94acc059235c93f4b6b43c5b8be3782ebea2"}
{"identifier": "removeProductLinks", "parameters": {}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/themes/cornerstone/Cart.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "6423a709aed7eec7c4a4ef2370ea13e60639c2a1", "ext": "js", "size": 1309, "code": "removeProductLinks() {\n    walkThroughAnchors(((anchor) => {\n      if (\n        anchor.parentElement.className === 'cart-item-name'\n      ) {\n        anchor.onclick = e => e.preventDefault();\n      }\n    }));\n  }", "code_tokens": ["removeProductLinks", "(", ")", "{", "walkThroughAnchors", "(", "(", "(", "anchor", ")", "=>", "{", "if", "(", "anchor", ".", "parentElement", ".", "className", "===", "'cart-item-name'", ")", "{", "anchor", ".", "onclick", "=", "e", "=>", "e", ".", "preventDefault", "(", ")", ";", "}", "}", ")", ")", ";", "}"], "original_docstring": "/**\n   * Removed links from product links\n   * @private\n   */", "comment": ["// eslint-disable-next-line no-param-reassign"], "docstring_tokens": ["Removed", "links", "from", "product", "links", "@private"], "docstring": "Removed links from product links\n@private", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Removed links from product links\n @private", "short_docstring_tokens": ["Removed", "links", "from", "product", "links", "@private"], "original_string": "removeProductLinks() {\n    walkThroughAnchors(((anchor) => {\n      if (\n        anchor.parentElement.className === 'cart-item-name'\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        anchor.onclick = e => e.preventDefault();\n      }\n    }));\n  }", "id": "ae42255f09b850b5c80377572609c9bece9f18951f227472c72fdc42594c4825"}
{"identifier": "subscribeEventReceived", "parameters": {"eventName": null, "subscriberCallback": null}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/modules/appEvents.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "6447c54127d9ece96c9234c4b1b490d8db3fbc15", "ext": "js", "size": 832, "code": "function subscribeEventReceived(eventName, subscriberCallback) {\n  if (!Array.isArray(subscribers[eventName])) {\n    subscribers[eventName] = [];\n  }\n  subscribers[eventName].push(subscriberCallback);\n}", "code_tokens": ["function", "subscribeEventReceived", "(", "eventName", ",", "subscriberCallback", ")", "{", "if", "(", "!", "Array", ".", "isArray", "(", "subscribers", "[", "eventName", "]", ")", ")", "{", "subscribers", "[", "eventName", "]", "=", "[", "]", ";", "}", "subscribers", "[", "eventName", "]", ".", "push", "(", "subscriberCallback", ")", ";", "}"], "original_docstring": "/**\n * Subscribe a callback to specified event.\n *\n * @param {string} eventName Name of the app event.\n * @param {function} subscriberCallback Callback for the event.\n */", "comment": [], "docstring_tokens": ["Subscribe", "a", "callback", "to", "specified", "event", ".", "@param", "{", "string", "}", "eventName", "Name", "of", "the", "app", "event", ".", "@param", "{", "function", "}", "subscriberCallback", "Callback", "for", "the", "event", "."], "docstring": "Subscribe a callback to specified event.\n@param {string} eventName Name of the app event.\n@param {function} subscriberCallback Callback for the event.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "eventName", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "subscriberCallback", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Subscribe a callback to specified event.", "short_docstring_tokens": ["Subscribe", "a", "callback", "to", "specified", "event", "."], "original_string": "function subscribeEventReceived(eventName, subscriberCallback) {\n  if (!Array.isArray(subscribers[eventName])) {\n    subscribers[eventName] = [];\n  }\n\n  subscribers[eventName].push(subscriberCallback);\n}", "id": "31603824de44002e8d82f6b8d3a5ea57f42b3e1b665e2872f9a5ac06d8d0284d"}
{"identifier": "notifyEventReceived", "parameters": {"eventName": null, "eventArguments": null}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/modules/appEvents.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "6447c54127d9ece96c9234c4b1b490d8db3fbc15", "ext": "js", "size": 832, "code": "function notifyEventReceived(eventName, eventArguments) {\n  if (!Array.isArray(subscribers[eventName])) {\n    return;\n  }\n  subscribers[eventName].forEach((subscriberCallback) => {\n    subscriberCallback(...eventArguments);\n  });\n}", "code_tokens": ["function", "notifyEventReceived", "(", "eventName", ",", "eventArguments", ")", "{", "if", "(", "!", "Array", ".", "isArray", "(", "subscribers", "[", "eventName", "]", ")", ")", "{", "return", ";", "}", "subscribers", "[", "eventName", "]", ".", "forEach", "(", "(", "subscriberCallback", ")", "=>", "{", "subscriberCallback", "(", "...", "eventArguments", ")", ";", "}", ")", ";", "}"], "original_docstring": "/**\n * Notify all subscribed callback when an app event is received.\n *\n * @param {stirng} eventName Name of the app event.\n * @param {Array} eventArguments Arguments of the event.\n */", "comment": [], "docstring_tokens": ["Notify", "all", "subscribed", "callback", "when", "an", "app", "event", "is", "received", ".", "@param", "{", "stirng", "}", "eventName", "Name", "of", "the", "app", "event", ".", "@param", "{", "Array", "}", "eventArguments", "Arguments", "of", "the", "event", "."], "docstring": "Notify all subscribed callback when an app event is received.\n@param {stirng} eventName Name of the app event.\n@param {Array} eventArguments Arguments of the event.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "eventName", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "eventArguments", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Notify all subscribed callback when an app event is received.", "short_docstring_tokens": ["Notify", "all", "subscribed", "callback", "when", "an", "app", "event", "is", "received", "."], "original_string": "function notifyEventReceived(eventName, eventArguments) {\n  if (!Array.isArray(subscribers[eventName])) {\n    return;\n  }\n\n  subscribers[eventName].forEach((subscriberCallback) => {\n    subscriberCallback(...eventArguments);\n  });\n}", "id": "11dcdbac4689722571fd8a491ac8d47518ca10ea113f21ee30adaca3b258fabe"}
{"identifier": "changeInAppBrowserLayout", "parameters": {}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/themes/fortune/CheckoutSuccess.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "b6190a1426974ccd61ec08cb3fdcdd982deb7a38", "ext": "js", "size": 2158, "code": "changeInAppBrowserLayout() {\n    this.shopgateAppCodeExecutor.execute(() => {\n      const commands = [\n        setNavigationBarParams(\n          'Checkout',\n          false,\n          isShopgateAndroidApp() ? 'done' : true,\n          isShopgateAndroidApp() ? 'custom' : 'done',\n          'SGAction.popTabToRoot({\\'targetTab\\': \\'main\\'}); SGAction.showTab({\\'targetTab\\': \\'main\\'});'\n        ),\n      ];\n      sendAppCommands(commands);\n      return true;\n    });\n  }", "code_tokens": ["changeInAppBrowserLayout", "(", ")", "{", "this", ".", "shopgateAppCodeExecutor", ".", "execute", "(", "(", ")", "=>", "{", "const", "commands", "=", "[", "setNavigationBarParams", "(", "'Checkout'", ",", "false", ",", "isShopgateAndroidApp", "(", ")", "?", "'done'", ":", "true", ",", "isShopgateAndroidApp", "(", ")", "?", "'custom'", ":", "'done'", ",", "'SGAction.popTabToRoot({\\'targetTab\\': \\'main\\'}); SGAction.showTab({\\'targetTab\\': \\'main\\'});'", ")", ",", "]", ";", "sendAppCommands", "(", "commands", ")", ";", "return", "true", ";", "}", ")", ";", "}"], "original_docstring": "/**\n   * Will change the InAppBrowser title to \"Checkout\" and show a button named \"done\"\n   * located at the top to the right\n   */", "comment": [], "docstring_tokens": ["Will", "change", "the", "InAppBrowser", "title", "to", "\"", "Checkout", "\"", "and", "show", "a", "button", "named", "\"", "done", "\"", "located", "at", "the", "top", "to", "the", "right"], "docstring": "Will change the InAppBrowser title to \"Checkout\" and show a button named \"done\"\nlocated at the top to the right", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Will change the InAppBrowser title to \"Checkout\" and show a button named \"done\"\n located at the top to the right", "short_docstring_tokens": ["Will", "change", "the", "InAppBrowser", "title", "to", "\"", "Checkout", "\"", "and", "show", "a", "button", "named", "\"", "done", "\"", "located", "at", "the", "top", "to", "the", "right"], "original_string": "changeInAppBrowserLayout() {\n    this.shopgateAppCodeExecutor.execute(() => {\n      const commands = [\n        setNavigationBarParams(\n          'Checkout',\n          false,\n          isShopgateAndroidApp() ? 'done' : true,\n          isShopgateAndroidApp() ? 'custom' : 'done',\n          'SGAction.popTabToRoot({\\'targetTab\\': \\'main\\'}); SGAction.showTab({\\'targetTab\\': \\'main\\'});'\n        ),\n      ];\n\n      sendAppCommands(commands);\n\n      return true;\n    });\n  }", "id": "4f8682e000bbcd2ee965092e9d326f42a3e0bc15500ec49d5430ddf48393f648"}
{"identifier": "changeLinks", "parameters": {}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/themes/fortune/CheckoutSuccess.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "b6190a1426974ccd61ec08cb3fdcdd982deb7a38", "ext": "js", "size": 2158, "code": "changeLinks() {\n    const anchors = document.getElementsByTagName('A');\n    for (let i = 0; i < anchors.length; i += 1) {\n      if (anchors[i].href.indexOf('action=view_order') !== -1) {\n        anchors[i].onclick = e => e.preventDefault();\n      }\n      if (anchors[i].parentElement.nodeName === 'H1' || anchors[i].parentElement.nodeName === 'H2') {\n        anchors[i].onclick = e => e.preventDefault();\n      }\n    }\n  }", "code_tokens": ["changeLinks", "(", ")", "{", "const", "anchors", "=", "document", ".", "getElementsByTagName", "(", "'A'", ")", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "anchors", ".", "length", ";", "i", "+=", "1", ")", "{", "if", "(", "anchors", "[", "i", "]", ".", "href", ".", "indexOf", "(", "'action=view_order'", ")", "!==", "-", "1", ")", "{", "anchors", "[", "i", "]", ".", "onclick", "=", "e", "=>", "e", ".", "preventDefault", "(", ")", ";", "}", "if", "(", "anchors", "[", "i", "]", ".", "parentElement", ".", "nodeName", "===", "'H1'", "||", "anchors", "[", "i", "]", ".", "parentElement", ".", "nodeName", "===", "'H2'", ")", "{", "anchors", "[", "i", "]", ".", "onclick", "=", "e", "=>", "e", ".", "preventDefault", "(", ")", ";", "}", "}", "}"], "original_docstring": "/**\n   * Makes specific links not useable\n   * @private\n   */", "comment": [], "docstring_tokens": ["Makes", "specific", "links", "not", "useable", "@private"], "docstring": "Makes specific links not useable\n@private", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Makes specific links not useable\n @private", "short_docstring_tokens": ["Makes", "specific", "links", "not", "useable", "@private"], "original_string": "changeLinks() {\n    const anchors = document.getElementsByTagName('A');\n\n    for (let i = 0; i < anchors.length; i += 1) {\n      if (anchors[i].href.indexOf('action=view_order') !== -1) {\n        anchors[i].onclick = e => e.preventDefault();\n      }\n\n      if (anchors[i].parentElement.nodeName === 'H1' || anchors[i].parentElement.nodeName === 'H2') {\n        anchors[i].onclick = e => e.preventDefault();\n      }\n    }\n  }", "id": "7b65fbb1d7836a54f6aef468db38fe682299ea5812c66dc6be077235af7618a8"}
{"identifier": "prepareForCheckout", "parameters": {}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/modules/redirectToCheckout.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "763c630445da07268001514658d0be77c900c984", "ext": "js", "size": 925, "code": "function prepareForCheckout() {\n  shopgateAppCodeExecutor.execute(() => {\n    sendAppCommands([\n      sendPipelineRequest('bigcommerce.checkout.getUrl.v1'),\n    ], '12.0');\n  });\n}", "code_tokens": ["function", "prepareForCheckout", "(", ")", "{", "shopgateAppCodeExecutor", ".", "execute", "(", "(", ")", "=>", "{", "sendAppCommands", "(", "[", "sendPipelineRequest", "(", "'bigcommerce.checkout.getUrl.v1'", ")", ",", "]", ",", "'12.0'", ")", ";", "}", ")", ";", "}"], "original_docstring": "/**\n * Initiates getting the checkout url.\n */", "comment": [], "docstring_tokens": ["Initiates", "getting", "the", "checkout", "url", "."], "docstring": "Initiates getting the checkout url.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Initiates getting the checkout url.", "short_docstring_tokens": ["Initiates", "getting", "the", "checkout", "url", "."], "original_string": "function prepareForCheckout() {\n  shopgateAppCodeExecutor.execute(() => {\n    sendAppCommands([\n      sendPipelineRequest('bigcommerce.checkout.getUrl.v1'),\n    ], '12.0');\n  });\n}", "id": "7d8584667822a486eafc6cef802abeca6c5fd37b1ca11f99fffddc6dfe0734dc"}
{"identifier": "redirectToCheckout", "parameters": {}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/modules/redirectToCheckout.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "763c630445da07268001514658d0be77c900c984", "ext": "js", "size": 925, "code": "function redirectToCheckout() {\n  executeWithRetry(25, 2500, () => {\n    const checkoutUrl = getCheckoutUrl();\n    if (checkoutUrl === null) {\n      return false;\n    }\n    window.location.href = checkoutUrl;\n    return true;\n  });\n}", "code_tokens": ["function", "redirectToCheckout", "(", ")", "{", "executeWithRetry", "(", "25", ",", "2500", ",", "(", ")", "=>", "{", "const", "checkoutUrl", "=", "getCheckoutUrl", "(", ")", ";", "if", "(", "checkoutUrl", "===", "null", ")", "{", "return", "false", ";", "}", "window", ".", "location", ".", "href", "=", "checkoutUrl", ";", "return", "true", ";", "}", ")", ";", "}"], "original_docstring": "/**\n * Redirects to checkout if checkout url is available.\n */", "comment": [], "docstring_tokens": ["Redirects", "to", "checkout", "if", "checkout", "url", "is", "available", "."], "docstring": "Redirects to checkout if checkout url is available.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Redirects to checkout if checkout url is available.", "short_docstring_tokens": ["Redirects", "to", "checkout", "if", "checkout", "url", "is", "available", "."], "original_string": "function redirectToCheckout() {\n  executeWithRetry(25, 2500, () => {\n    const checkoutUrl = getCheckoutUrl();\n    if (checkoutUrl === null) {\n      return false;\n    }\n\n    window.location.href = checkoutUrl;\n\n    return true;\n  });\n}", "id": "bee9e536f527095cc982cdad5c9c746ec9ac0b38981f476039b3d93b9f751a9c"}
{"identifier": "iterateElements", "parameters": {"elementClass": null, "callback": null}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/modules/boxing.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "096eda4f89775c2724d5d7a555edcf992a40a976", "ext": "js", "size": 1501, "code": "function iterateElements(elementClass, callback) {\n  const elements = document.getElementsByClassName(elementClass);\n  if (!elements) {\n    return;\n  }\n  for (let i = 0; i < elements.length; i += 1) {\n    callback(elements[i]);\n  }\n}", "code_tokens": ["function", "iterateElements", "(", "elementClass", ",", "callback", ")", "{", "const", "elements", "=", "document", ".", "getElementsByClassName", "(", "elementClass", ")", ";", "if", "(", "!", "elements", ")", "{", "return", ";", "}", "for", "(", "let", "i", "=", "0", ";", "i", "<", "elements", ".", "length", ";", "i", "+=", "1", ")", "{", "callback", "(", "elements", "[", "i", "]", ")", ";", "}", "}"], "original_docstring": "/**\n * @param {string} elementClass Html element class attribute.\n * @param {function} callback Callback to apply for every found element.\n */", "comment": [], "docstring_tokens": ["@param", "{", "string", "}", "elementClass", "Html", "element", "class", "attribute", ".", "@param", "{", "function", "}", "callback", "Callback", "to", "apply", "for", "every", "found", "element", "."], "docstring": "@param {string} elementClass Html element class attribute.\n@param {function} callback Callback to apply for every found element.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "elementClass", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "callback", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "@param {string} elementClass Html element class attribute.", "short_docstring_tokens": ["@param", "{", "string", "}", "elementClass", "Html", "element", "class", "attribute", "."], "original_string": "function iterateElements(elementClass, callback) {\n  const elements = document.getElementsByClassName(elementClass);\n  if (!elements) {\n    return;\n  }\n\n  for (let i = 0; i < elements.length; i += 1) {\n    callback(elements[i]);\n  }\n}", "id": "e35795e20d53f9b99c4bdacb028ab46a1f43e4ca15967feb97714d11c21d3001"}
{"identifier": "walkThroughAnchors", "parameters": {"manipulateCallback": null}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/modules/walkThroughAnchors.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "bf8f97860bc1e0114216a0f8049cb980a9f07b62", "ext": "js", "size": 542, "code": "function walkThroughAnchors(manipulateCallback) {\n  if (typeof manipulateCallback !== 'function') {\n    return;\n  }\n  const anchors = document.getElementsByTagName('A');\n  for (let i = 0; i < anchors.length; i += 1) {\n    manipulateCallback(anchors[i]);\n  }\n}", "code_tokens": ["function", "walkThroughAnchors", "(", "manipulateCallback", ")", "{", "if", "(", "typeof", "manipulateCallback", "!==", "'function'", ")", "{", "return", ";", "}", "const", "anchors", "=", "document", ".", "getElementsByTagName", "(", "'A'", ")", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "anchors", ".", "length", ";", "i", "+=", "1", ")", "{", "manipulateCallback", "(", "anchors", "[", "i", "]", ")", ";", "}", "}"], "original_docstring": "/**\n * The method walks through all anchors of a document and calls for each anchor the given callback\n *\n * @param {ManipulateCallback} manipulateCallback callback has to expect anchors as a parameter\n */", "comment": [], "docstring_tokens": ["The", "method", "walks", "through", "all", "anchors", "of", "a", "document", "and", "calls", "for", "each", "anchor", "the", "given", "callback", "@param", "{", "ManipulateCallback", "}", "manipulateCallback", "callback", "has", "to", "expect", "anchors", "as", "a", "parameter"], "docstring": "The method walks through all anchors of a document and calls for each anchor the given callback\n@param {ManipulateCallback} manipulateCallback callback has to expect anchors as a parameter", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "manipulateCallback", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "The method walks through all anchors of a document and calls for each anchor the given callback\n @param {ManipulateCallback} manipulateCallback callback has to expect anchors as a parameter", "short_docstring_tokens": ["The", "method", "walks", "through", "all", "anchors", "of", "a", "document", "and", "calls", "for", "each", "anchor", "the", "given", "callback", "@param", "{", "ManipulateCallback", "}", "manipulateCallback", "callback", "has", "to", "expect", "anchors", "as", "a", "parameter"], "original_string": "function walkThroughAnchors(manipulateCallback) {\n  if (typeof manipulateCallback !== 'function') {\n    return;\n  }\n\n  const anchors = document.getElementsByTagName('A');\n\n  for (let i = 0; i < anchors.length; i += 1) {\n    manipulateCallback(anchors[i]);\n  }\n}", "id": "9251708c4572c0ac030e6b185c2355262eb65dfd80b638fcffd7899e8498faf6"}
{"identifier": "popTabToRoot", "parameters": {"targetTab": null}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/modules/app_commands/popTabToRoot.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "7185f915259d3013613e87df27f0fe6ac3284ec8", "ext": "js", "size": 221, "code": "function popTabToRoot(targetTab) {\n  return {\n    c: 'popTabToRoot',\n    p: { targetTab },\n  };\n}", "code_tokens": ["function", "popTabToRoot", "(", "targetTab", ")", "{", "return", "{", "c", ":", "'popTabToRoot'", ",", "p", ":", "{", "targetTab", "}", ",", "}", ";", "}"], "original_docstring": "/**\n * Resets the stack of targetTag\n *\n * @param {string} targetTab tab to be reset\n *\n * @return {AppCommand}\n */", "comment": [], "docstring_tokens": ["Resets", "the", "stack", "of", "targetTag", "@param", "{", "string", "}", "targetTab", "tab", "to", "be", "reset"], "docstring": "Resets the stack of targetTag\n@param {string} targetTab tab to be reset\n\n", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "targetTab", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Resets the stack of targetTag\n @param {string} targetTab tab to be reset", "short_docstring_tokens": ["Resets", "the", "stack", "of", "targetTag", "@param", "{", "string", "}", "targetTab", "tab", "to", "be", "reset"], "original_string": "function popTabToRoot(targetTab) {\n  return {\n    c: 'popTabToRoot',\n    p: { targetTab },\n  };\n}", "id": "b2a1c7327eac9e97e802d3047224d5982833670e160d65aa61ad5b80277605c5"}
{"identifier": "removeProductLinks", "parameters": {}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/themes/fortune/Cart.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "4f5f5f9e9183f00939f10d1b5e7bb2185d2f365f", "ext": "js", "size": 974, "code": "removeProductLinks() {\n    walkThroughAnchors(((anchor) => {\n      if (\n        anchor.parentElement.className === 'cart-item-product-name'\n      ) {\n        anchor.onclick = e => e.preventDefault();\n      }\n    }));\n  }", "code_tokens": ["removeProductLinks", "(", ")", "{", "walkThroughAnchors", "(", "(", "(", "anchor", ")", "=>", "{", "if", "(", "anchor", ".", "parentElement", ".", "className", "===", "'cart-item-product-name'", ")", "{", "anchor", ".", "onclick", "=", "e", "=>", "e", ".", "preventDefault", "(", ")", ";", "}", "}", ")", ")", ";", "}"], "original_docstring": "/**\n   * Removed links from product links\n   * @private\n   */", "comment": ["// eslint-disable-next-line no-param-reassign"], "docstring_tokens": ["Removed", "links", "from", "product", "links", "@private"], "docstring": "Removed links from product links\n@private", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Removed links from product links\n @private", "short_docstring_tokens": ["Removed", "links", "from", "product", "links", "@private"], "original_string": "removeProductLinks() {\n    walkThroughAnchors(((anchor) => {\n      if (\n        anchor.parentElement.className === 'cart-item-product-name'\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        anchor.onclick = e => e.preventDefault();\n      }\n    }));\n  }", "id": "3a3eabf8ed4a5f4949c1314fd01253d3a96d977c9ac8d52502a68c179871e028"}
{"identifier": "identifyPage", "parameters": {"fileName": null}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/modules/pageIdentifier.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "5130b9de9c51e7be531893ed7d648c0af82587a2", "ext": "js", "size": 2588, "code": "function identifyPage(fileName) {\n  switch (fileName) {\n    case 'cart.php':\n      return SHOPGATE_PAGE_CART;\n    case 'checkout/order-confirmation':\n    case 'finishorder.php':\n      return SHOPGATE_PAGE_CHECKOUT_SUCCESS;\n    case 'login.php':\n      if (window.location.search.indexOf('action=create_account') !== -1) {\n        return SHOPGATE_PAGE_REGISTER;\n      } else if (window.location.search.indexOf('action=account_created') !== -1) {\n        return SHOPGATE_PAGE_REGISTER_SUCCESS;\n      } else if (window.location.search.indexOf('action=reset_password') !== -1) {\n        return SHOPGATE_PAGE_FORGOT_PASSWORD;\n      }\n      return SHOPGATE_PAGE_LOGIN;\n    case 'checkout':\n    case 'checkout.php':\n      return SHOPGATE_PAGE_CHECKOUT;\n    default:\n      return '';\n  }\n}", "code_tokens": ["function", "identifyPage", "(", "fileName", ")", "{", "switch", "(", "fileName", ")", "{", "case", "'cart.php'", ":", "return", "SHOPGATE_PAGE_CART", ";", "case", "'checkout/order-confirmation'", ":", "case", "'finishorder.php'", ":", "return", "SHOPGATE_PAGE_CHECKOUT_SUCCESS", ";", "case", "'login.php'", ":", "if", "(", "window", ".", "location", ".", "search", ".", "indexOf", "(", "'action=create_account'", ")", "!==", "-", "1", ")", "{", "return", "SHOPGATE_PAGE_REGISTER", ";", "}", "else", "if", "(", "window", ".", "location", ".", "search", ".", "indexOf", "(", "'action=account_created'", ")", "!==", "-", "1", ")", "{", "return", "SHOPGATE_PAGE_REGISTER_SUCCESS", ";", "}", "else", "if", "(", "window", ".", "location", ".", "search", ".", "indexOf", "(", "'action=reset_password'", ")", "!==", "-", "1", ")", "{", "return", "SHOPGATE_PAGE_FORGOT_PASSWORD", ";", "}", "return", "SHOPGATE_PAGE_LOGIN", ";", "case", "'checkout'", ":", "case", "'checkout.php'", ":", "return", "SHOPGATE_PAGE_CHECKOUT", ";", "default", ":", "return", "''", ";", "}", "}"], "original_docstring": "/**\n * Tries to identify a BigCommerce page by given fileName\n *\n * @param {string} fileName file name of the page to identify\n * @returns {string}\n */", "comment": [], "docstring_tokens": ["Tries", "to", "identify", "a", "BigCommerce", "page", "by", "given", "fileName", "@param", "{", "string", "}", "fileName", "file", "name", "of", "the", "page", "to", "identify", "@returns", "{", "string", "}"], "docstring": "Tries to identify a BigCommerce page by given fileName\n@param {string} fileName file name of the page to identify\n@returns {string}", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "fileName", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Tries to identify a BigCommerce page by given fileName\n @param {string} fileName file name of the page to identify\n @returns {string}", "short_docstring_tokens": ["Tries", "to", "identify", "a", "BigCommerce", "page", "by", "given", "fileName", "@param", "{", "string", "}", "fileName", "file", "name", "of", "the", "page", "to", "identify", "@returns", "{", "string", "}"], "original_string": "function identifyPage(fileName) {\n  switch (fileName) {\n    case 'cart.php':\n      return SHOPGATE_PAGE_CART;\n    case 'checkout/order-confirmation':\n    case 'finishorder.php':\n      return SHOPGATE_PAGE_CHECKOUT_SUCCESS;\n    case 'login.php':\n      if (window.location.search.indexOf('action=create_account') !== -1) {\n        return SHOPGATE_PAGE_REGISTER;\n      } else if (window.location.search.indexOf('action=account_created') !== -1) {\n        return SHOPGATE_PAGE_REGISTER_SUCCESS;\n      } else if (window.location.search.indexOf('action=reset_password') !== -1) {\n        return SHOPGATE_PAGE_FORGOT_PASSWORD;\n      }\n      return SHOPGATE_PAGE_LOGIN;\n    case 'checkout':\n    case 'checkout.php':\n      return SHOPGATE_PAGE_CHECKOUT;\n    default:\n      return '';\n  }\n}", "id": "d231ec18ff65228640bd063d0e79d56b59d089fc641e1c98dc484950adfeccab"}
{"identifier": "onDocumentReady", "parameters": {"callback": null}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/modules/onDocumentReady.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "c96859b07742c7d9e9afbe5eac18a86d384428be", "ext": "js", "size": 551, "code": "function onDocumentReady(callback) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n  if (document.readyState === 'complete' || document.readyState === 'interactive') {\n    callback();\n    return;\n  }\n  document.addEventListener('DOMContentLoaded', callback);\n}", "code_tokens": ["function", "onDocumentReady", "(", "callback", ")", "{", "if", "(", "typeof", "callback", "!==", "'function'", ")", "{", "return", ";", "}", "if", "(", "document", ".", "readyState", "===", "'complete'", "||", "document", ".", "readyState", "===", "'interactive'", ")", "{", "callback", "(", ")", ";", "return", ";", "}", "document", ".", "addEventListener", "(", "'DOMContentLoaded'", ",", "callback", ")", ";", "}"], "original_docstring": "/**\n * The method calls a passed callback when the page is loaded through adding it to\n * the DOMContentLoaded event or when the page is already loaded by calling the callback directly\n *\n * @param {function} callback to be called when the document is loaded\n */", "comment": [], "docstring_tokens": ["The", "method", "calls", "a", "passed", "callback", "when", "the", "page", "is", "loaded", "through", "adding", "it", "to", "the", "DOMContentLoaded", "event", "or", "when", "the", "page", "is", "already", "loaded", "by", "calling", "the", "callback", "directly", "@param", "{", "function", "}", "callback", "to", "be", "called", "when", "the", "document", "is", "loaded"], "docstring": "The method calls a passed callback when the page is loaded through adding it to\nthe DOMContentLoaded event or when the page is already loaded by calling the callback directly\n\n@param {function} callback to be called when the document is loaded", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "callback", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "The method calls a passed callback when the page is loaded through adding it to\n the DOMContentLoaded event or when the page is already loaded by calling the callback directly", "short_docstring_tokens": ["The", "method", "calls", "a", "passed", "callback", "when", "the", "page", "is", "loaded", "through", "adding", "it", "to", "the", "DOMContentLoaded", "event", "or", "when", "the", "page", "is", "already", "loaded", "by", "calling", "the", "callback", "directly"], "original_string": "function onDocumentReady(callback) {\n  if (typeof callback !== 'function') {\n    return;\n  }\n\n  if (document.readyState === 'complete' || document.readyState === 'interactive') {\n    callback();\n    return;\n  }\n\n  document.addEventListener('DOMContentLoaded', callback);\n}", "id": "b6cc0adb759c98848760af5f8927f8a84270d565f93b20136163e3d5ff930636"}
{"identifier": "addCSS", "parameters": {"cssString": null}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/modules/head.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "782db261898b329c7c68861d2808f9092bb99fce", "ext": "js", "size": 320, "code": "function addCSS(cssString) {\n  const style = document.createElement('style');\n  style.type = 'text/css';\n  style.appendChild(document.createTextNode(cssString));\n  document.head.appendChild(style);\n}", "code_tokens": ["function", "addCSS", "(", "cssString", ")", "{", "const", "style", "=", "document", ".", "createElement", "(", "'style'", ")", ";", "style", ".", "type", "=", "'text/css'", ";", "style", ".", "appendChild", "(", "document", ".", "createTextNode", "(", "cssString", ")", ")", ";", "document", ".", "head", ".", "appendChild", "(", "style", ")", ";", "}"], "original_docstring": "/**\n * Adds style element to the head with provided css string.\n * @param {string} cssString The css string.\n */", "comment": [], "docstring_tokens": ["Adds", "style", "element", "to", "the", "head", "with", "provided", "css", "string", ".", "@param", "{", "string", "}", "cssString", "The", "css", "string", "."], "docstring": "Adds style element to the head with provided css string.\n@param {string} cssString The css string.", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "cssString", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Adds style element to the head with provided css string.", "short_docstring_tokens": ["Adds", "style", "element", "to", "the", "head", "with", "provided", "css", "string", "."], "original_string": "function addCSS(cssString) {\n  const style = document.createElement('style');\n  style.type = 'text/css';\n  style.appendChild(document.createTextNode(cssString));\n  document.head.appendChild(style);\n}", "id": "fb5892d574e3363c84e27ed9eb5e95a795c62a6f94ed0260a2d785bec52dac96"}
{"identifier": "shopgateInit", "parameters": {}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/bigcommerce.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "9ba442ddd2ba480f1b45489b7269440ef985acf8", "ext": "js", "size": 8018, "code": "function shopgateInit() {\n    var yourTheme = 'cornerstone'; \n    loadTheme(yourTheme);\n  }", "code_tokens": ["function", "shopgateInit", "(", ")", "{", "var", "yourTheme", "=", "'cornerstone'", ";", "loadTheme", "(", "yourTheme", ")", ";", "}"], "original_docstring": "/**\n   * this will only be executed when a Shopgate App visits the desktop site.\n   */", "comment": ["// Default Theme: cornerstone"], "docstring_tokens": ["this", "will", "only", "be", "executed", "when", "a", "Shopgate", "App", "visits", "the", "desktop", "site", "."], "docstring": "this will only be executed when a Shopgate App visits the desktop site.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "this will only be executed when a Shopgate App visits the desktop site.", "short_docstring_tokens": ["this", "will", "only", "be", "executed", "when", "a", "Shopgate", "App", "visits", "the", "desktop", "site", "."], "original_string": "function shopgateInit() {\n    var yourTheme = 'cornerstone'; // Default Theme: cornerstone\n\n    loadTheme(yourTheme);\n  }", "id": "1b090abed942731504085c3b3ff0c916e5594c696a912b1d26c7d6a2c4ebf8c6"}
{"identifier": "loadTheme", "parameters": {"themeName": null}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/bigcommerce.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "9ba442ddd2ba480f1b45489b7269440ef985acf8", "ext": "js", "size": 8018, "code": "function loadTheme(themeName) {\n    var theme = document.createElement('script');\n    theme.setAttribute('src', EXTERNAL_JS_RESOURCES_URL + 'themes/' + themeName + '.bundle.min.js');\n    document.head.appendChild(theme);\n  }", "code_tokens": ["function", "loadTheme", "(", "themeName", ")", "{", "var", "theme", "=", "document", ".", "createElement", "(", "'script'", ")", ";", "theme", ".", "setAttribute", "(", "'src'", ",", "EXTERNAL_JS_RESOURCES_URL", "+", "'themes/'", "+", "themeName", "+", "'.bundle.min.js'", ")", ";", "document", ".", "head", ".", "appendChild", "(", "theme", ")", ";", "}"], "original_docstring": "/**\n   * loading a theme to make the page escape proof.\n   *\n   * @param {string} themeName\n   */", "comment": [], "docstring_tokens": ["loading", "a", "theme", "to", "make", "the", "page", "escape", "proof", ".", "@param", "{", "string", "}", "themeName"], "docstring": "loading a theme to make the page escape proof.\n@param {string} themeName", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "themeName", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "loading a theme to make the page escape proof.", "short_docstring_tokens": ["loading", "a", "theme", "to", "make", "the", "page", "escape", "proof", "."], "original_string": "function loadTheme(themeName) {\n    var theme = document.createElement('script');\n    theme.setAttribute('src', EXTERNAL_JS_RESOURCES_URL + 'themes/' + themeName + '.bundle.min.js');\n    document.head.appendChild(theme);\n  }", "id": "1afb6d3bf9067fca97be85729db76cdc7b1e6b1ba0f1d0229193cf81f45ba98d"}
{"identifier": "ShopgateUniversalTracking", "parameters": {"previousPageTracker": null}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/bigcommerce.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "9ba442ddd2ba480f1b45489b7269440ef985acf8", "ext": "js", "size": 8018, "code": "function ShopgateUniversalTracking(previousPageTracker) {\n    this.previousPageTracker = previousPageTracker;\n    if (previousPageTracker) {\n      for (var property in previousPageTracker) {\n        if (typeof previousPageTracker[property] === 'function') {\n          this[property] = previousPageTracker[property];\n        }\n      }\n    }\n    this._addTrans = addTrans;\n    this._addItem = addItem;\n    this._trackTrans = trackTrans;\n    this.products = [];\n    this.orderId = null;\n    this.currency = shopgateGetCurrency();\n  }", "code_tokens": ["function", "ShopgateUniversalTracking", "(", "previousPageTracker", ")", "{", "this", ".", "previousPageTracker", "=", "previousPageTracker", ";", "if", "(", "previousPageTracker", ")", "{", "for", "(", "var", "property", "in", "previousPageTracker", ")", "{", "if", "(", "typeof", "previousPageTracker", "[", "property", "]", "===", "'function'", ")", "{", "this", "[", "property", "]", "=", "previousPageTracker", "[", "property", "]", ";", "}", "}", "}", "this", ".", "_addTrans", "=", "addTrans", ";", "this", ".", "_addItem", "=", "addItem", ";", "this", ".", "_trackTrans", "=", "trackTrans", ";", "this", ".", "products", "=", "[", "]", ";", "this", ".", "orderId", "=", "null", ";", "this", ".", "currency", "=", "shopgateGetCurrency", "(", ")", ";", "}"], "original_docstring": "/**\n   * This function is a wrapper for BigCommerce pageTracker variable\n   * @param {Object} previousPageTracker\n   *\n   * @constructor\n   */", "comment": [], "docstring_tokens": ["This", "function", "is", "a", "wrapper", "for", "BigCommerce", "pageTracker", "variable", "@param", "{", "Object", "}", "previousPageTracker", "@constructor"], "docstring": "This function is a wrapper for BigCommerce pageTracker variable\n@param {Object} previousPageTracker\n\n@constructor", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "previousPageTracker", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "This function is a wrapper for BigCommerce pageTracker variable\n @param {Object} previousPageTracker", "short_docstring_tokens": ["This", "function", "is", "a", "wrapper", "for", "BigCommerce", "pageTracker", "variable", "@param", "{", "Object", "}", "previousPageTracker"], "original_string": "function ShopgateUniversalTracking(previousPageTracker) {\n    this.previousPageTracker = previousPageTracker;\n    if (previousPageTracker) {\n      for (var property in previousPageTracker) {\n        if (typeof previousPageTracker[property] === 'function') {\n          this[property] = previousPageTracker[property];\n        }\n      }\n    }\n\n    this._addTrans = addTrans;\n    this._addItem = addItem;\n    this._trackTrans = trackTrans;\n    this.products = [];\n    this.orderId = null;\n    this.currency = shopgateGetCurrency();\n  }", "id": "4f11935bb7056d3e0be301ead9c3d88a668d70eb2b473d9743773052201b07e1"}
{"identifier": "trackTrans", "parameters": {}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/bigcommerce.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "9ba442ddd2ba480f1b45489b7269440ef985acf8", "ext": "js", "size": 8018, "code": "function trackTrans() {\n    if (this.previousPageTracker && typeof this.previousPageTracker._trackTrans === 'function') {\n      this.previousPageTracker._trackTrans();\n    }\n    var orderId = this.orderId\n    var checkoutSuccess = {\n      order: {\n        number: orderId,\n        currency: this.currency ? this.currency : 'USD',\n        totals: [\n          this.shippingTotal,\n          this.taxTotal,\n          this.priceTotal\n        ],\n        products: this.products\n      }\n    };\n    shopgateExecuteWithRetry(50, 5000, function() {\n      if (!window.SGJavascriptBridge) {\n        return false;\n      }\n      sendCommandsToApp([\n        {\n          'c': 'broadcastEvent',\n          'p': {\n            'event': 'checkoutSuccess',\n            'parameters': [checkoutSuccess]\n          }\n        }\n      ]);\n      return true;\n    });\n  }", "code_tokens": ["function", "trackTrans", "(", ")", "{", "if", "(", "this", ".", "previousPageTracker", "&&", "typeof", "this", ".", "previousPageTracker", ".", "_trackTrans", "===", "'function'", ")", "{", "this", ".", "previousPageTracker", ".", "_trackTrans", "(", ")", ";", "}", "var", "orderId", "=", "this", ".", "orderId", "var", "checkoutSuccess", "=", "{", "order", ":", "{", "number", ":", "orderId", ",", "currency", ":", "this", ".", "currency", "?", "this", ".", "currency", ":", "'USD'", ",", "totals", ":", "[", "this", ".", "shippingTotal", ",", "this", ".", "taxTotal", ",", "this", ".", "priceTotal", "]", ",", "products", ":", "this", ".", "products", "}", "}", ";", "shopgateExecuteWithRetry", "(", "50", ",", "5000", ",", "function", "(", ")", "{", "if", "(", "!", "window", ".", "SGJavascriptBridge", ")", "{", "return", "false", ";", "}", "sendCommandsToApp", "(", "[", "{", "'c'", ":", "'broadcastEvent'", ",", "'p'", ":", "{", "'event'", ":", "'checkoutSuccess'", ",", "'parameters'", ":", "[", "checkoutSuccess", "]", "}", "}", "]", ")", ";", "return", "true", ";", "}", ")", ";", "}"], "original_docstring": "/**\n   * The final request in BigCommerce analytics tracking\n   */", "comment": [], "docstring_tokens": ["The", "final", "request", "in", "BigCommerce", "analytics", "tracking"], "docstring": "The final request in BigCommerce analytics tracking", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "The final request in BigCommerce analytics tracking", "short_docstring_tokens": ["The", "final", "request", "in", "BigCommerce", "analytics", "tracking"], "original_string": "function trackTrans() {\n    if (this.previousPageTracker && typeof this.previousPageTracker._trackTrans === 'function') {\n      this.previousPageTracker._trackTrans();\n    }\n    var orderId = this.orderId\n    var checkoutSuccess = {\n      order: {\n        number: orderId,\n        currency: this.currency ? this.currency : 'USD',\n        totals: [\n          this.shippingTotal,\n          this.taxTotal,\n          this.priceTotal\n        ],\n        products: this.products\n      }\n    };\n\n    shopgateExecuteWithRetry(50, 5000, function() {\n      if (!window.SGJavascriptBridge) {\n        return false;\n      }\n\n      sendCommandsToApp([\n        {\n          'c': 'broadcastEvent',\n          'p': {\n            'event': 'checkoutSuccess',\n            'parameters': [checkoutSuccess]\n          }\n        }\n      ]);\n\n      return true;\n    });\n  }", "id": "63f23e935320b4bdf17dffb56e7886badcd9db2f232a670e93be41aecc93acb6"}
{"identifier": "enableShopgateAppEvents", "parameters": {}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/bigcommerce.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "9ba442ddd2ba480f1b45489b7269440ef985acf8", "ext": "js", "size": 8018, "code": "function enableShopgateAppEvents() {\n    var libshopgate = 'libshopgate';\n    if (document.getElementById(libshopgate)) {\n      return;\n    }\n    var metaTag = document.createElement('meta');\n    metaTag.setAttribute('id', libshopgate);\n    metaTag.src = libshopgate;\n    document.getElementsByTagName('head').item(0).appendChild(metaTag);\n  }", "code_tokens": ["function", "enableShopgateAppEvents", "(", ")", "{", "var", "libshopgate", "=", "'libshopgate'", ";", "if", "(", "document", ".", "getElementById", "(", "libshopgate", ")", ")", "{", "return", ";", "}", "var", "metaTag", "=", "document", ".", "createElement", "(", "'meta'", ")", ";", "metaTag", ".", "setAttribute", "(", "'id'", ",", "libshopgate", ")", ";", "metaTag", ".", "src", "=", "libshopgate", ";", "document", ".", "getElementsByTagName", "(", "'head'", ")", ".", "item", "(", "0", ")", ".", "appendChild", "(", "metaTag", ")", ";", "}"], "original_docstring": "/**\n   * Enabling ShopgateApp events by injecting a libshopgate meta tag.\n   * Needed early (in the page loading phase) in order for iOS app to work as we expect it to.\n   */", "comment": ["// Check if insertion is needed", "// Insert libshopgate as meta tag, to tell the Shopgate app to send events", "// Not using a script tag to avoid \"src unavailable\" errors in the browsers console", "// Add a \"src\" property (not an attribute, because of the iOS app not receiving it otherwise)"], "docstring_tokens": ["Enabling", "ShopgateApp", "events", "by", "injecting", "a", "libshopgate", "meta", "tag", ".", "Needed", "early", "(", "in", "the", "page", "loading", "phase", ")", "in", "order", "for", "iOS", "app", "to", "work", "as", "we", "expect", "it", "to", "."], "docstring": "Enabling ShopgateApp events by injecting a libshopgate meta tag.\nNeeded early (in the page loading phase) in order for iOS app to work as we expect it to.", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Enabling ShopgateApp events by injecting a libshopgate meta tag.", "short_docstring_tokens": ["Enabling", "ShopgateApp", "events", "by", "injecting", "a", "libshopgate", "meta", "tag", "."], "original_string": "function enableShopgateAppEvents() {\n    // Check if insertion is needed\n    var libshopgate = 'libshopgate';\n    if (document.getElementById(libshopgate)) {\n      return;\n    }\n\n    // Insert libshopgate as meta tag, to tell the Shopgate app to send events\n    // Not using a script tag to avoid \"src unavailable\" errors in the browsers console\n    var metaTag = document.createElement('meta');\n    metaTag.setAttribute('id', libshopgate);\n    // Add a \"src\" property (not an attribute, because of the iOS app not receiving it otherwise)\n    metaTag.src = libshopgate;\n    document.getElementsByTagName('head').item(0).appendChild(metaTag);\n  }", "id": "1aafd4a7d83f37bed33ed5bae7c6cf548da5f8a86b221ffc6f518daf874f9020"}
{"identifier": "shopgateExecuteWithRetry", "parameters": {"intervalInMilliseconds": null, "maximumIntervalTimeInMilliseconds": null, "executeCallback": null}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/bigcommerce.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "9ba442ddd2ba480f1b45489b7269440ef985acf8", "ext": "js", "size": 8018, "code": "function shopgateExecuteWithRetry(\n    intervalInMilliseconds,\n    maximumIntervalTimeInMilliseconds,\n    executeCallback\n  ) {\n    var startTimestampInMilliseconds = Date.now();\n    var interval = setInterval(function() {\n      if (Date.now() >= startTimestampInMilliseconds + maximumIntervalTimeInMilliseconds) {\n        clearInterval(interval);\n        return;\n      }\n      if (!executeCallback()) {\n        return;\n      }\n      clearInterval(interval);\n    }, intervalInMilliseconds);\n  }", "code_tokens": ["function", "shopgateExecuteWithRetry", "(", "intervalInMilliseconds", ",", "maximumIntervalTimeInMilliseconds", ",", "executeCallback", ")", "{", "var", "startTimestampInMilliseconds", "=", "Date", ".", "now", "(", ")", ";", "var", "interval", "=", "setInterval", "(", "function", "(", ")", "{", "if", "(", "Date", ".", "now", "(", ")", ">=", "startTimestampInMilliseconds", "+", "maximumIntervalTimeInMilliseconds", ")", "{", "clearInterval", "(", "interval", ")", ";", "return", ";", "}", "if", "(", "!", "executeCallback", "(", ")", ")", "{", "return", ";", "}", "clearInterval", "(", "interval", ")", ";", "}", ",", "intervalInMilliseconds", ")", ";", "}"], "original_docstring": "/**\n   * Shopgate App code execution\n   * @param intervalInMilliseconds\n   * @param maximumIntervalTimeInMilliseconds\n   * @param executeCallback\n   */", "comment": [], "docstring_tokens": ["Shopgate", "App", "code", "execution", "@param", "intervalInMilliseconds", "@param", "maximumIntervalTimeInMilliseconds", "@param", "executeCallback"], "docstring": "Shopgate App code execution\n@param intervalInMilliseconds\n@param maximumIntervalTimeInMilliseconds\n@param executeCallback", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "intervalInMilliseconds", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "maximumIntervalTimeInMilliseconds", "docstring": null, "type": null, "docstring_tokens": []}, {"identifier": "executeCallback", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Shopgate App code execution\n @param intervalInMilliseconds\n @param maximumIntervalTimeInMilliseconds\n @param executeCallback", "short_docstring_tokens": ["Shopgate", "App", "code", "execution", "@param", "intervalInMilliseconds", "@param", "maximumIntervalTimeInMilliseconds", "@param", "executeCallback"], "original_string": "function shopgateExecuteWithRetry(\n    intervalInMilliseconds,\n    maximumIntervalTimeInMilliseconds,\n    executeCallback\n  ) {\n    var startTimestampInMilliseconds = Date.now();\n\n    var interval = setInterval(function() {\n      if (Date.now() >= startTimestampInMilliseconds + maximumIntervalTimeInMilliseconds) {\n        clearInterval(interval);\n        return;\n      }\n\n      if (!executeCallback()) {\n        return;\n      }\n\n      clearInterval(interval);\n    }, intervalInMilliseconds);\n  }", "id": "f89046f9dfa51efa27dbc9b02b9ac0ac7f8987fe4e0d3dbc2a634bf9af73393d"}
{"identifier": "showTab", "parameters": {"targetTab": null}, "return_type": "<not_specific>", "repo": "shopgate/bigcommerce-js", "path": "src/modules/app_commands/showTab.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "97562a4428eaa3406c53e3d60214287697d427e3", "ext": "js", "size": 209, "code": "function showTab(targetTab) {\n  return {\n    c: 'showTab',\n    p: { targetTab },\n  };\n}", "code_tokens": ["function", "showTab", "(", "targetTab", ")", "{", "return", "{", "c", ":", "'showTab'", ",", "p", ":", "{", "targetTab", "}", ",", "}", ";", "}"], "original_docstring": "/**\n * Focus the given targetTag\n *\n * @param {string} targetTab tab to be focused\n *\n * @return {AppCommand}\n */", "comment": [], "docstring_tokens": ["Focus", "the", "given", "targetTag", "@param", "{", "string", "}", "targetTab", "tab", "to", "be", "focused"], "docstring": "Focus the given targetTag\n@param {string} targetTab tab to be focused\n\n", "docstring_params": {"returns": [], "raises": [], "params": [{"identifier": "targetTab", "docstring": null, "type": null, "docstring_tokens": []}], "outlier_params": [], "others": []}, "short_docstring": "Focus the given targetTag\n @param {string} targetTab tab to be focused", "short_docstring_tokens": ["Focus", "the", "given", "targetTag", "@param", "{", "string", "}", "targetTab", "tab", "to", "be", "focused"], "original_string": "function showTab(targetTab) {\n  return {\n    c: 'showTab',\n    p: { targetTab },\n  };\n}", "id": "61ba38d8df4c9120df21622b8efd272c9a78b71cfba420105300d68cff251a16"}
{"identifier": "improveTopPositions", "parameters": {}, "return_type": null, "repo": "shopgate/bigcommerce-js", "path": "src/themes/fortune/Register.js", "language": "JavaScript", "stars_count": NaN, "issues_count": 1.0, "forks_count": NaN, "license": ["Apache-2.0"], "hexsha": "9fbbd24e3e731ec6ab36dacfe055de6e484c7e6d", "ext": "js", "size": 1184, "code": "improveTopPositions() {\n    setMargin('main-content', '0');\n    setPaddingTop('authorization-container', '0');\n    setPaddingBottom('authorization-container', '2em');\n  }", "code_tokens": ["improveTopPositions", "(", ")", "{", "setMargin", "(", "'main-content'", ",", "'0'", ")", ";", "setPaddingTop", "(", "'authorization-container'", ",", "'0'", ")", ";", "setPaddingBottom", "(", "'authorization-container'", ",", "'2em'", ")", ";", "}"], "original_docstring": "/**\n   * Sets margins and padding for the top elements.\n   * @private\n   */", "comment": [], "docstring_tokens": ["Sets", "margins", "and", "padding", "for", "the", "top", "elements", ".", "@private"], "docstring": "Sets margins and padding for the top elements.\n@private", "docstring_params": {"returns": [], "raises": [], "params": [], "outlier_params": [], "others": []}, "short_docstring": "Sets margins and padding for the top elements.", "short_docstring_tokens": ["Sets", "margins", "and", "padding", "for", "the", "top", "elements", "."], "original_string": "improveTopPositions() {\n    setMargin('main-content', '0');\n    setPaddingTop('authorization-container', '0');\n    setPaddingBottom('authorization-container', '2em');\n  }", "id": "e29929dbe5d19bd0bb0dc11f95a1993a6489872b5f4be1afda11ada02a3c1b58"}
